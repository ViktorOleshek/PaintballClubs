@page "/orders"
@using BlazorDownloadFile
@using Domain.Entities
@using Services.Export
@using Services.ExternalApi.Facade

@inject IApiFacade ApiFacade
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject IExportService ExportService

<div class="container-fluid mt-4">
	<div class="row mb-3">
		<div class="col-12 d-flex justify-content-between align-items-center">
			<h4>Orders</h4>
			<button class="btn btn-primary" @onclick="OpenAddOrderForm">
				<i class="bi bi-plus-lg me-1"></i> NEW ORDER
			</button>
		</div>
	</div>

	<OrderAddComponent @bind-showAddForm="showAddForm" OnOrderAdded="LoadData" />

	<div class="row mb-3">
		<div class="col-12 col-md-6 col-lg-4">
			<div class="input-group">
				<span class="input-group-text"><i class="bi bi-search"></i></span>
				<input type="text" class="form-control" @bind="searchQuery" @bind:event="oninput" placeholder="Search by Order Number" />
				@if (!string.IsNullOrWhiteSpace(searchQuery))
				{
					<button class="btn btn-outline-secondary" @onclick="() => searchQuery = string.Empty">
						<i class="bi bi-x"></i>
					</button>
				}
			</div>
		</div>
	</div>

	<div class="row">
		@if (FilteredOrders.Any())
		{
			@foreach (var order in FilteredOrders)
			{
				<!-- Replace the existing card markup with this more compact design -->
				<div class="col-12 col-md-6 col-lg-4 mb-3 position-relative">
					<div class="card shadow-sm h-100">
						<!-- Card header with status color -->
						<div class="card-header @GetStatusBadgeClass(order.StatusName)" style="color: white;">
							<div class="d-flex justify-content-between align-items-center">
								<h6 class="mb-0">Order #@order.OrderNumber</h6>

								<div style="width: auto; display: inline-block;">
									<select class="form-select form-select-sm" style="background: transparent; color: white; border-color: rgba(255,255,255,0.3); width: auto; min-width: 120px;"
											value="@order.StatusId" @onchange="@((e) => UpdateOrderStatus(order, statuses.FirstOrDefault(s => s.status_id == int.Parse(e.Value.ToString()))?.status_name))">
										@foreach (var status in statuses)
										{
											<option value="@status.status_id" style="color: #212529;">@status.status_name</option>
										}
									</select>
								</div>

							</div>
						</div>

						<div class="card-body p-2">
							<!-- Primary information in a compact layout -->
							<div class="row g-1">
								<div class="col-6">
									<label class="form-label small mb-0 text-muted">Club</label>
									<select class="form-select form-select-sm py-0" value="@GetClubId(order)" @onchange="@((e) => UpdateOrderClub(order, int.Parse(e.Value.ToString())))">
										@foreach (var club in clubs)
										{
											<option value="@club.club_id">@club.name</option>
										}
									</select>
								</div>
								<div class="col-6">
									<label class="form-label small mb-0 text-muted">Employee</label>
									<select class="form-select form-select-sm py-0" value="@order.EmployeeId" @onchange="@((e) => UpdateOrderEmployee(order, int.Parse(e.Value.ToString())))">
										@foreach (var employee in FilteredEmployees(GetClubId(order)))
										{
											<option value="@employee.employee_id">@employee.first_name @employee.last_name</option>
										}
									</select>
								</div>

								<div class="col-6 mt-1">
									<label class="form-label small mb-0 text-muted">Club offer</label>
									<select class="form-select form-select-sm py-0" value="@order.OfferId" @onchange="@((e) => UpdateOrderOffer(order, int.Parse(e.Value.ToString())))">
										@foreach (var offer in offers)
										{
											<option value="@offer.offer_id">@offer.name</option>
										}
									</select>
								</div>
								<div class="col-6 mt-1">
									<label class="form-label small mb-0 text-muted">Client</label>
									<select class="form-select form-select-sm py-0" value="@(order.ClientId.HasValue ? order.ClientId.Value.ToString() : "")"
											@onchange="@((e) => UpdateOrderClient(order, string.IsNullOrEmpty(e.Value.ToString()) ? null : (int?)int.Parse(e.Value.ToString())))">
										<option value="">None</option>
										@foreach (var client in clients)
										{
											<option value="@client.client_id">@client.first_name @client.last_name</option>
										}
									</select>
								</div>

								<div class="row g-1 mt-1">
									<div class="col-6">
										<label class="form-label small mb-0 text-muted">Order Date</label>
										<input type="date" class="form-control form-control-sm py-0" value="@order.OrderDate.ToString("yyyy-MM-dd")"
											   @onchange="@((e) => { order.OrderDate = DateTime.Parse(e.Value.ToString()); UpdateOrderDate(order); })" />
									</div>
									<div class="col-6">
										<label class="form-label small mb-0 text-muted">Event Date</label>
										<input type="date" class="form-control form-control-sm py-0" value="@order.EventDate.ToString("yyyy-MM-dd")"
											   @onchange="@((e) => { order.EventDate = DateTime.Parse(e.Value.ToString()); UpdateEventDate(order); })" />
									</div>
								</div>

								<div class="col-12 mt-1">
									<label class="form-label small mb-0 text-muted">Total Amount</label>
									<div class="input-group input-group-sm">
										<span class="input-group-text py-0">$</span>
										<span class="form-control py-0">@order.TotalAmount.ToString("F2")</span>
									</div>
								</div>
							</div>

							<hr class="my-2" />

							<!-- Accordion for extended details -->
							<div class="accordion accordion-flush" id="order@(order.OrderId)Accordion">
								<div class="accordion-item">
									<h2 class="accordion-header" id="heading@(order.OrderId)">
										<button class="accordion-button collapsed p-2" type="button" @onclick="() => ToggleDetails(order.OrderId)"
												aria-expanded="@(expandedOrderDetails.Contains(order.OrderId))" aria-controls="collapse@(order.OrderId)">
											<div class="d-flex align-items-center justify-content-between w-100">
												<span>Match & Equipment Details</span>
												<span class="badge bg-primary rounded-pill ms-2">@(GetOrderDetailsByOrderId(order.OrderId).Count)</span>
											</div>
										</button>
									</h2>
								</div>
							</div>
							<div id="collapse@(order.OrderId)" class="order-details-popup @(expandedOrderDetails.Contains(order.OrderId) ? "show" : "")">
								@if (expandedOrderDetails.Contains(order.OrderId))
								{
									<div class="order-details-container mt-2 pt-2 border-top">
										<div class="card-body p-2">
											<h6 class="mb-2">Match Details</h6>
											@if (GetMatchByOrderId(order.OrderId) is Match match)
											{
												<div class="row g-2">
													<div class="col-6">
														<label class="form-label small mb-0 text-muted">Match Date</label>
														<input type="date" class="form-control form-control-sm" value="@match.event_date.ToString("yyyy-MM-dd")"
															   @onchange="@((e) => { match.event_date = DateTime.Parse(e.Value.ToString()); UpdateMatchDate(match); })" />
													</div>
													<div class="col-6">
														<label class="form-label small mb-0 text-muted">Location</label>
														<select class="form-select form-select-sm" value="@(match.location_id.HasValue ? match.location_id.Value.ToString() : "")"
																@onchange="@((e) => UpdateMatchLocation(match, string.IsNullOrEmpty(e.Value.ToString()) ? null : (int?)int.Parse(e.Value.ToString())))">
															<option value="">None</option>
															@foreach (var location in locations)
															{
																<option value="@location.location_id">@location.location_name</option>
															}
														</select>
													</div>
													<div class="col-12">
														<label class="form-label small mb-0 text-muted">Participants</label>
														<input type="number" class="form-control form-control-sm" value="@match.participant_count" min="0"
															   @onchange="@((e) => { match.participant_count = int.Parse(e.Value.ToString()); UpdateMatchParticipants(match); })" />
													</div>
													<div class="col-12">
														<label class="form-label small mb-0 text-muted">Description</label>
														<textarea class="form-control form-control-sm" rows="2" @bind="match.description" @onblur="@(_ => UpdateMatchDescription(match))"></textarea>
													</div>
												</div>
											}
											else
											{
												<button class="btn btn-outline-primary btn-sm mb-2" @onclick="@(() => CreateMatch(order.OrderId))">Create Match</button>
											}
											<hr class="my-2" />
											<div class="d-flex justify-content-between align-items-center mb-2">
												<h6 class="mb-0">Equipment</h6>
												<button class="btn btn-primary btn-sm" @onclick="@(() => ShowAddEquipmentDialog(order.OrderId))">
													<i class="bi bi-plus"></i> Add
												</button>
											</div>
											@{
												var orderDetails = GetOrderDetailsByOrderId(order.OrderId);
											}
											@if (orderDetails.Any())
											{
												<div class="table-responsive">
													<table class="table table-sm table-bordered mb-0">
														<thead class="table-light">
															<tr>
																<th>Equipment</th>
																<th>Qty</th>
																<th>PUnitrice</th>
																<th>Total</th>
																<th></th>
															</tr>
														</thead>
														<tbody>
															@foreach (var detail in orderDetails)
															{
																<tr>
																	<td>
																		@{
																			var availableEquipment = GetAvailableEquipment(detail.available_equipment_id);
																			var equipment = GetEquipment(availableEquipment?.equipment_id ?? 0);
																			var available = GetAvailableEquipment(detail.available_equipment_id);
																			var usedQuantity = orderDetails
																			.Where(od => od.available_equipment_id == detail.available_equipment_id && od.order_detail_id != detail.order_detail_id)
																			.Sum(od => od.quantity);
																			var remaining = (available?.available_quantity ?? 0) - usedQuantity;
																		}
																		<span class="smalll">@equipment?.name</span>
																		<small class="text-muted d-block">Available: @remaining</small>
																	</td>
																	<td>
																		<input type="number" class="form-control form-control-sm" value="@detail.quantity" min="1"
																			   max="@GetMaxEquipmentQuantity(detail)"
																			   @onchange="@((e) => { detail.quantity = int.Parse(e.Value.ToString()); UpdateOrderDetailQuantity(detail); })" />
																	</td>
																	<td>
																		@{
																			var availEq = GetAvailableEquipment(detail.available_equipment_id);
																		}
																		<span>@(availEq?.rental_price.ToString("0.00") ?? "0.00")</span>
																	</td>
																	<td>
																		@{
																			var price = availEq?.rental_price ?? 0;
																			var totalPrice = price * detail.quantity;
																		}
																		<span>@totalPrice.ToString("C2")</span>
																	</td>
																	<td class="text-center">
																		<button class="btn btn-danger btn-sm" @onclick="@(() => DeleteOrderDetail(detail.order_detail_id))">
																			<i class="bi bi-trash"></i>
																		</button>
																	</td>
																</tr>
															}
															@if (orderDetails.Any())
															{
																<tr class="table-light">
																	<td colspan="3" class="text-end fw-bold">Total Equipment:</td>
																	<td class="fw-bold">@GetTotalEquipmentCost(order.OrderId).ToString("C2")</td>
																	<td></td>
																</tr>
															}
														</tbody>
													</table>
												</div>
											}
											else
											{
												<div class="alert alert-info py-2 mb-0">No equipment added yet.</div>
											}
										</div>
									</div>
								}
							</div>
						</div>
						<div class="card-footer p-2 d-flex justify-content-between">
							<div>
								<button class="btn btn-success btn-sm me-1" title="Save Changes" @onclick="@(() => SaveOrder(order))">
									<i class="bi bi-save"></i> Save
								</button>
								<button class="btn btn-danger btn-sm" title="Delete Order" @onclick="@(() => ConfirmDelete(order))">
									<i class="bi bi-trash"></i>
								</button>
							</div>
						</div>
					</div>
				</div>
			}
		}
		else
		{
			<div class="col-12">
				<div class="alert alert-info">
					@if (string.IsNullOrWhiteSpace(searchQuery))
					{
						<span>No orders found. Create a new order to get started.</span>
					}
					else
					{
						<span>No orders matching your search. Try a different search term or <a href="#" @onclick:preventDefault @onclick="() => searchQuery = string.Empty">clear the search</a>.</span>
					}
				</div>
			</div>
		}
	</div>
</div>

@code {
	private bool equipmentDialogVisible = false;
	private int orderIdForEquipment;
	private int selectedEquipmentId;
	private int selectedEquipmentQuantity = 1;
	private decimal selectedEquipmentUnitPrice;

	private string searchQuery = "";
	private List<OrderViewModel> Orders = new();
	private List<Employee> employees = new();
	private List<Club> clubs = new();
	private List<ClubOffer> offers = new();
	private List<Match> matches = new();
	private List<Location> locations = new();
	private List<Client> clients = new();
	private List<OrderStatus> statuses = new();
	private List<OrderDetail> orderDetails = new();
	private List<AvailableEquipment> availableEquipments = new();
	private List<Equipment> equipments = new();

	private IEnumerable<OrderViewModel> FilteredOrders =>
		string.IsNullOrWhiteSpace(searchQuery)
			? Orders
			: Orders.Where(o => o.OrderNumber.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	private bool showAddForm = false;

	// Add button method
	private void OpenAddOrderForm()
	{
		showAddForm = true;
	}

	private HashSet<int> expandedOrderDetails = new HashSet<int>();
	private void ToggleDetails(int orderId)
	{
		// If this specific order ID is already expanded, remove it to collapse
		if (expandedOrderDetails.Contains(orderId))
		{
			expandedOrderDetails.Remove(orderId);
		}
		else
		{
			// Otherwise, clear all expanded orders and expand only this one
			expandedOrderDetails.Clear();
			expandedOrderDetails.Add(orderId);
		}

		StateHasChanged();
	}

	private void ShowAddEquipmentDialog(int orderId)
	{
		orderIdForEquipment = orderId;
		selectedEquipmentId = 0;
		selectedEquipmentQuantity = 1;
		selectedEquipmentUnitPrice = 0;
		equipmentDialogVisible = true;
	}
	private decimal GetTotalEquipmentCost(int orderId)
	{
		decimal total = 0;
		var details = GetOrderDetailsByOrderId(orderId);

		foreach (var detail in details)
		{
			var availableEq = GetAvailableEquipment(detail.available_equipment_id);
			if (availableEq != null)
			{
				total += availableEq.rental_price * detail.quantity;
			}
		}

		return total;
	}
	private void UpdateUnitPrice(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value.ToString(), out int equipmentId) && equipmentId > 0)
		{
			var available = GetAvailableEquipment(equipmentId);
			selectedEquipmentUnitPrice = available?.rental_price ?? 0;
		}
		else
		{
			selectedEquipmentUnitPrice = 0;
		}
	}

	private async Task UpdateOrderDetailEquipment(OrderDetail detail, int newAvailableEquipmentId)
	{
		// Only proceed if the equipment has actually changed
		if (detail.available_equipment_id == newAvailableEquipmentId) return;

		// Store the original equipment ID in case we need to revert
		int originalEquipmentId = detail.available_equipment_id;

		// Save the new equipment choice
		detail.available_equipment_id = newAvailableEquipmentId;

		// Check if the new quantity would exceed the available amount
		int maxAvailable = GetMaxEquipmentQuantity(detail);
		if (detail.quantity > maxAvailable)
		{
			// If no equipment available, revert the change
			if (maxAvailable <= 0)
			{
				detail.available_equipment_id = originalEquipmentId;
				await ShowToast("No available quantity for this equipment", "danger");
				return;
			}

			detail.quantity = maxAvailable;
			await ShowToast($"Quantity adjusted to maximum available: {maxAvailable}", "warning");
		}

		detail.UpdateDatetime = DateTime.Now;
		var response = await ApiFacade.OrderDetailsApiService.Update(detail.order_detail_id, detail);
		if (response.IsSuccessStatusCode)
		{
			await ShowToast("Equipment updated successfully", "success");
			await LoadData(); // Reload to get accurate equipment quantity
		}
		else
		{
			detail.available_equipment_id = originalEquipmentId; // Revert in case of error
			await ShowToast("Failed to update equipment", "danger");
			await LoadData(); // Reload to reset the selection
		}
	}

	private async Task LoadData()
	{
		var ordersResponse = await ApiFacade.OrdersApiService.Get();
		var statusesResponse = await ApiFacade.OrderStatusApiService.Get();
		var employeesResponse = await ApiFacade.EmployeeApiService.Get();
		var clubsResponse = await ApiFacade.ClubApiService.Get();
		var offersResponse = await ApiFacade.ClubOffersApiService.Get();
		var matchesResponse = await ApiFacade.MatchApiService.Get();
		var locationsResponse = await ApiFacade.LocationApiService.Get();
		var clientsResponse = await ApiFacade.ClientApiService.Get();
		var orderDetailsResponse = await ApiFacade.OrderDetailsApiService.Get();
		var availableEquipmentResponse = await ApiFacade.AvailableEquipmentApiService.Get();
		var equipmentResponse = await ApiFacade.EquipmentApiService.Get();

		if (!ordersResponse.IsSuccessStatusCode)
		{
			await ShowToast("Failed to load orders", "danger");
			return;
		}

		var orders = ordersResponse.Content;
		statuses = statusesResponse.Content.ToList();
		employees = employeesResponse.Content.ToList();
		clubs = clubsResponse.Content.ToList();
		offers = offersResponse.Content.ToList();
		matches = matchesResponse.Content.ToList();
		locations = locationsResponse.Content.ToList();
		clients = clientsResponse.Content.ToList();
		orderDetails = orderDetailsResponse.Content.ToList();
		availableEquipments = availableEquipmentResponse.Content.ToList();
		equipments = equipmentResponse.Content.ToList();

		Orders = orders.Select(o => new OrderViewModel
			{
				OrderId = o.order_id,
				OrderNumber = o.order_number,
				OrderDate = o.order_time ?? DateTime.Now,
				EventDate = o.event_date ?? DateTime.Now.AddDays(20),
				StatusName = statuses.FirstOrDefault(s => s.status_id == o.status_id)?.status_name ?? "Unknown",
				StatusId = o.status_id,
				ClientId = o.client_id,
				EmployeeId = o.employee_id,
				OfferId = o.offer_id,
				ClubName = GetClubName(o),
				EmployeeName = GetEmployeeName(o),
				ClubOffers = GetMatchType(o),
				TotalAmount = o.total_amount ?? 0,
				LastUpdated = o.UpdateDatetime
			}).ToList();
	}

	private string GetStatusBadgeClass(string statusName)
	{
		return statusName switch
		{
			"Completed" => "bg-primary",
			"Failed" => "bg-danger",
			"Cancelled" => "bg-warning",
			"Pending" => "bg-success",
			_ => "bg-secondary"
		};
	}

	private string GetClubName(Order order)
	{
		var employee = employees.FirstOrDefault(e => e.employee_id == order.employee_id);
		var club = clubs.FirstOrDefault(c => c.club_id == employee?.club_id);
		return club?.name ?? "Unknown Club";
	}

	private int GetClubId(OrderViewModel order)
	{
		var employee = employees.FirstOrDefault(e => e.employee_id == order.EmployeeId);
		return employee?.club_id ?? 0;
	}

	private IEnumerable<Employee> FilteredEmployees(int clubId)
	{
		return employees.Where(e => e.club_id == clubId);
	}

	private string GetEmployeeName(Order order)
	{
		var employee = employees.FirstOrDefault(e => e.employee_id == order.employee_id);
		return employee != null ? $"{employee.first_name} {employee.last_name}" : "Unknown Manager";
	}

	private string GetMatchType(Order order)
	{
		var offer = offers.FirstOrDefault(o => o.offer_id == order.offer_id);
		return offer?.name ?? "Unknown Match";
	}

	private Match? GetMatchByOrderId(int orderId)
	{
		return matches.FirstOrDefault(m => m.order_id == orderId);
	}

	private List<OrderDetail> GetOrderDetailsByOrderId(int orderId)
	{
		var result = orderDetails.Where(od => od.order_id == orderId).ToList();
		return result;
	}

	private AvailableEquipment? GetAvailableEquipment(int availableId)
	{
		return availableEquipments.FirstOrDefault(ae => ae.available_id == availableId);
	}

	private Equipment? GetEquipment(int equipmentId)
	{
		var eq = equipments.FirstOrDefault(e => e.equipment_id == equipmentId);
		return eq;
	}

	private int GetMaxEquipmentQuantity(OrderDetail detail)
	{
		var available = GetAvailableEquipment(detail.available_equipment_id);
		if (available == null) return 0;

		// Count how many of this equipment is used in other order details (except this one)
		var otherOrdersUsage = orderDetails
			.Where(od => od.available_equipment_id == detail.available_equipment_id && od.order_detail_id != detail.order_detail_id)
			.Sum(od => od.quantity);

		// Calculate maximum available quantity
		var maxAvailable = Math.Max(0, available.available_quantity - otherOrdersUsage);

		return maxAvailable;
	}

	private IEnumerable<AvailableEquipment> GetAvailableEquipmentForOrder(int orderId)
	{
		var clubId = GetClubIdForOrder(orderId);
		var result = new List<AvailableEquipment>();

		foreach (var availableEquipment in availableEquipments.Where(ae => ae.club_id == clubId))
		{
			// Count how many of this equipment is already used across all orders
			var usedQuantity = orderDetails
				.Where(od => od.available_equipment_id == availableEquipment.available_id)
				.Sum(od => od.quantity);

			// Only include if there's some quantity available
			if (availableEquipment.available_quantity > usedQuantity)
			{
				result.Add(availableEquipment);
			}
		}

		return result;
	}

	private async Task ConfirmDelete(OrderViewModel order)
	{
		// Display confirmation dialog without JavaScript
		var result = await DialogService.ShowMessageBox(
			"Confirm Delete",

			$"Are you sure you want to remove this order {order.OrderNumber}? This action cannot be undone.",
			yesText: "Yes",
			noText: "No");

		if (result == true)
		{
			var match = matches.FirstOrDefault(m => m.order_id == order.OrderId);
			var matchResponse = await ApiFacade.MatchApiService.Delete(match.match_id);
			var response = await ApiFacade.OrdersApiService.Delete(order.OrderId);
			if (response.IsSuccessStatusCode && matchResponse.IsSuccessStatusCode)
			{
				await ShowToast("Order deleted successfully", "success");
				await LoadData();
			}
			else
			{
				await ShowToast("Failed to delete order", "danger");
			}
		}
	}

	// Order editing methods
	private async Task UpdateOrderStatus(OrderViewModel order, string statusName)
	{
		if (string.IsNullOrEmpty(statusName)) return;

		var status = statuses.FirstOrDefault(s => s.status_name == statusName);
		if (status == null) return;

		var oldStatusName = order.StatusName;
		var oldStatusId = order.StatusId;

		order.StatusName = statusName;
		order.StatusId = status.status_id;

		var response = await SaveOrder(order);

		if (response)
		{
			await ShowToast($"Status updated to {statusName}", "success");
			StateHasChanged();
			return;
		}

		// If failed, revert back
		order.StatusName = oldStatusName;
		order.StatusId = oldStatusId;
		await ShowToast("Failed to update order status", "danger");
	}

	private async Task UpdateOrderClub(OrderViewModel order, int clubId)
	{
		var firstEmployee = employees.FirstOrDefault(e => e.club_id == clubId);
		if (firstEmployee == null) return;

		var oldEmployeeId = order.EmployeeId;
		var oldEmployeeName = order.EmployeeName;
		var oldClubName = order.ClubName;

		order.EmployeeId = firstEmployee.employee_id;
		order.EmployeeName = $"{firstEmployee.first_name} {firstEmployee.last_name}";
		order.ClubName = clubs.FirstOrDefault(c => c.club_id == clubId)?.name ?? "Unknown Club";

		var success = await SaveOrder(order);

		if (!success)
		{
			order.EmployeeId = oldEmployeeId;
			order.EmployeeName = oldEmployeeName;
			order.ClubName = oldClubName;
		}
	}

	private async Task UpdateOrderEmployee(OrderViewModel order, int employeeId)
	{
		var employee = employees.FirstOrDefault(e => e.employee_id == employeeId);
		if (employee == null) return;

		order.EmployeeId = employeeId;
		order.EmployeeName = $"{employee.first_name} {employee.last_name}";

		await SaveOrder(order);
	}

	private async Task UpdateOrderOffer(OrderViewModel order, int offerId)
	{
		var offer = offers.FirstOrDefault(o => o.offer_id == offerId);
		if (offer == null) return;
		order.OfferId = offerId;
		order.ClubOffers = offer.name;
		await SaveOrder(order);

		// Recalculate total after changing offer
		await CalculateTotal(order);
	}

	private async Task UpdateOrderClient(OrderViewModel order, int? clientId)
	{
		order.ClientId = clientId;
		await SaveOrder(order);
	}

	private async Task UpdateOrderDate(OrderViewModel order)
	{
		await SaveOrder(order);
	}

	private async Task UpdateEventDate(OrderViewModel order)
	{
		await SaveOrder(order);
	}

	private async Task CalculateTotal(OrderViewModel order)
	{
		decimal total = 0;

		// Add offer price
		var offer = offers.FirstOrDefault(o => o.offer_id == order.OfferId);
		if (offer != null)
		{
			total += offer.price;
		}

		// Add equipment prices
		total += GetTotalEquipmentCost(order.OrderId);

		order.TotalAmount = total;
		await SaveOrder(order);
	}

	private async Task<bool> SaveOrder(OrderViewModel viewModel)
	{
		var order = new Order
			{
				order_id = viewModel.OrderId,
				order_number = viewModel.OrderNumber,
				order_time = viewModel.OrderDate,
				event_date = viewModel.EventDate,
				status_id = viewModel.StatusId,
				client_id = viewModel.ClientId,
				employee_id = viewModel.EmployeeId,
				offer_id = viewModel.OfferId,
				total_amount = viewModel.TotalAmount,
				UpdateDatetime = DateTime.Now
			};

		var response = await ApiFacade.OrdersApiService.Update(viewModel.OrderId, order);
		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add("Order updated successfully", Severity.Success);
			viewModel.LastUpdated = DateTime.Now;
			return true;
		}

		Snackbar.Add("Failed to update order", Severity.Error);
		return false;
	}

	// Match handling methods
	private async Task UpdateMatchDate(Match match)
	{
		match.UpdateDatetime = DateTime.Now;
		var response = await ApiFacade.MatchApiService.Update(match.match_id, match);
		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add("Match date updated", Severity.Success);
		}
		else
		{
			Snackbar.Add("Failed to update match date", Severity.Error);
		}
	}

	private async Task UpdateMatchLocation(Match match, int? locationId)
	{
		match.location_id = locationId;
		match.UpdateDatetime = DateTime.Now;
		var response = await ApiFacade.MatchApiService.Update(match.match_id, match);
		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add("Match location updated", Severity.Success);
		}
		else
		{
			Snackbar.Add("Failed to update match location", Severity.Error);
		}
	}

	private async Task UpdateMatchParticipants(Match match)
	{
		match.UpdateDatetime = DateTime.Now;
		var response = await ApiFacade.MatchApiService.Update(match.match_id, match);
		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add("Participant count updated", Severity.Success);
		}
		else
		{
			Snackbar.Add("Failed to update participant count", Severity.Error);
		}
	}

	private async Task UpdateMatchDescription(Match match)
	{
		match.UpdateDatetime = DateTime.Now;
		var response = await ApiFacade.MatchApiService.Update(match.match_id, match);
		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add("Match description updated", Severity.Success);
		}
		else
		{
			Snackbar.Add("Failed to update match description", Severity.Error);
		}
	}

	private async Task CreateMatch(int orderId)
	{
		var order = Orders.FirstOrDefault(o => o.OrderId == orderId);
		if (order == null) return;

		var match = new Match
			{
				event_date = order.EventDate,
				order_id = orderId,
				participant_count = 0,
				CreateDatetime = DateTime.Now
			};

		var response = await ApiFacade.MatchApiService.Create(match);
		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add("Match created successfully", Severity.Success);
			await LoadData();
		}
		else
		{
			Snackbar.Add("Failed to create match", Severity.Error);
		}
	}

	private async Task AddEquipment(int orderId)
	{
		var availableEquipments = GetAvailableEquipmentForOrder(orderId).ToList();
		if (!availableEquipments.Any())
		{
			Snackbar.Add("No equipment available for this club", Severity.Warning);
			return;
		}

		// Find first equipment with available quantity
		var firstAvailable = availableEquipments.FirstOrDefault(ae => ae.available_quantity > 0);
		if (firstAvailable == null)
		{
			Snackbar.Add("No equipment available with sufficient quantity", Severity.Warning);
			return;
		}

		var orderDetail = new OrderDetail
			{
				order_id = orderId,
				available_equipment_id = firstAvailable.available_id,
				quantity = 1,
				CreateDatetime = DateTime.Now
			};

		var response = await ApiFacade.OrderDetailsApiService.Create(orderDetail);
		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add("Equipment added successfully", Severity.Success);
			await LoadData(); // Додано перезавантаження даних
		}
		else
		{
			Snackbar.Add("Failed to add equipment", Severity.Error);
		}
	}

	private void CancelAddEquipment()
	{
		equipmentDialogVisible = false;
	}

	private async Task ConfirmAddEquipment()
	{
		if (selectedEquipmentId == 0 || selectedEquipmentQuantity < 1)
		{
			Snackbar.Add("Please select equipment and quantity", Severity.Warning);
			return;
		}

		var orderDetail = new OrderDetail
			{
				order_id = orderIdForEquipment,
				available_equipment_id = selectedEquipmentId,
				quantity = selectedEquipmentQuantity,
				CreateDatetime = DateTime.Now
			};

		var response = await ApiFacade.OrderDetailsApiService.Create(orderDetail);
		if (response.IsSuccessStatusCode)
		{
			await LoadData();

			// Update order total
			var orderViewModel = Orders.FirstOrDefault(o => o.OrderId == orderIdForEquipment);
			if (orderViewModel != null)
			{
				var order = new Order
					{
						order_id = orderViewModel.OrderId,
						order_number = orderViewModel.OrderNumber,
						order_time = orderViewModel.OrderDate,
						event_date = orderViewModel.EventDate,
						status_id = orderViewModel.StatusId,
						client_id = orderViewModel.ClientId,
						employee_id = orderViewModel.EmployeeId,
						offer_id = orderViewModel.OfferId,
						UpdateDatetime = DateTime.Now
					};

				// Calculate new total
				decimal newTotal = CalculateTotalAmount(orderIdForEquipment);
				order.total_amount = newTotal;
				orderViewModel.TotalAmount = newTotal;

				var orderResponse = await ApiFacade.OrdersApiService.Update(order.order_id, order);
				if (orderResponse.IsSuccessStatusCode)
				{
					Snackbar.Add("Equipment added and total updated", Severity.Success);
				}
				else
				{
					Snackbar.Add("Equipment added but failed to update order total", Severity.Warning);
				}
				StateHasChanged();
			}

			equipmentDialogVisible = false;
		}
		else
		{
			Snackbar.Add("Failed to add equipment", Severity.Error);
		}
	}

	private async Task UpdateOrderDetailQuantity(OrderDetail detail)
	{
		// Store original quantity in case we need to revert
		int originalQuantity = detail.quantity;

		// Validate quantity
		int maxAvailable = GetMaxEquipmentQuantity(detail);
		if (detail.quantity > maxAvailable)
		{
			detail.quantity = maxAvailable;
			await ShowToast($"Quantity adjusted to maximum available: {maxAvailable}", "warning");
		}
		else if (detail.quantity <= 0)
		{
			detail.quantity = 1;
			await ShowToast("Quantity must be at least 1", "warning");
		}

		detail.UpdateDatetime = DateTime.Now;
		var response = await ApiFacade.OrderDetailsApiService.Update(detail.order_detail_id, detail);
		if (response.IsSuccessStatusCode)
		{
			// Get the order to update its total
			var orderViewModel = Orders.FirstOrDefault(o => o.OrderId == detail.order_id);
			if (orderViewModel != null)
			{
				var order = new Order
					{
						order_id = orderViewModel.OrderId,
						order_number = orderViewModel.OrderNumber,
						order_time = orderViewModel.OrderDate,
						event_date = orderViewModel.EventDate,
						status_id = orderViewModel.StatusId,
						client_id = orderViewModel.ClientId,
						employee_id = orderViewModel.EmployeeId,
						offer_id = orderViewModel.OfferId,
						UpdateDatetime = DateTime.Now
					};

				// Calculate new total
				decimal newTotal = CalculateTotalAmount(detail.order_id);
				order.total_amount = newTotal;
				orderViewModel.TotalAmount = newTotal;

				var orderResponse = await ApiFacade.OrdersApiService.Update(order.order_id, order);
				if (orderResponse.IsSuccessStatusCode)
				{
					await ShowToast("Quantity updated and total recalculated", "success");
				}
				else
				{
					await ShowToast("Quantity updated but failed to update order total", "warning");
				}
				StateHasChanged();
			}
		}
		else
		{
			// Revert to original quantity in case of error
			detail.quantity = originalQuantity;
			await ShowToast("Failed to update quantity", "danger");
			await LoadData(); // Reload to reset the quantity
		}
	}

	private async Task DeleteOrderDetail(int orderDetailId)
	{
		// First, store the order ID before deleting the detail
		var orderDetail = orderDetails.FirstOrDefault(od => od.order_detail_id == orderDetailId);
		if (orderDetail == null) return;

		int orderId = orderDetail.order_id;

		var response = await ApiFacade.OrderDetailsApiService.Delete(orderDetailId);
		if (response.IsSuccessStatusCode)
		{
			orderDetails.Remove(orderDetail);
			// Find the order and update its total
			var orderViewModel = Orders.FirstOrDefault(o => o.OrderId == orderId);
			if (orderViewModel != null)
			{
				// Get the corresponding order entity to update
				var order = new Order
					{
						order_id = orderViewModel.OrderId,
						order_number = orderViewModel.OrderNumber,
						order_time = orderViewModel.OrderDate,
						event_date = orderViewModel.EventDate,
						status_id = orderViewModel.StatusId,
						client_id = orderViewModel.ClientId,
						employee_id = orderViewModel.EmployeeId,
						offer_id = orderViewModel.OfferId,
						UpdateDatetime = DateTime.Now
					};

				decimal newTotal = CalculateTotalAmount(orderId);
				order.total_amount = newTotal;
				orderViewModel.TotalAmount = newTotal;

				var orderResponse = await ApiFacade.OrdersApiService.Update(order.order_id, order);

				if (orderResponse.IsSuccessStatusCode)
				{
					Snackbar.Add("Equipment removed and total updated", Severity.Success);
				}
				else
				{
					Snackbar.Add("Equipment removed but failed to update order total", Severity.Warning);
				}
				StateHasChanged();
			}
			else
			{
				Snackbar.Add("Equipment removed", Severity.Success);
				await LoadData();
			}
		}
		else
		{
			Snackbar.Add("Failed to remove equipment", Severity.Error);
		}
	}
	private decimal CalculateTotalAmount(int orderId)
	{
		decimal totalAmount = 0;

		// Add offer price if exists
		var order = Orders.FirstOrDefault(o => o.OrderId == orderId);
		if (order != null && order.OfferId > 0)
		{
			var offer = offers.FirstOrDefault(o => o.offer_id == order.OfferId);
			if (offer != null)
			{
				totalAmount += offer.price;
			}
		}

		// Add equipment prices
		var details = GetOrderDetailsByOrderId(orderId);
		foreach (var detail in details)
		{
			var availableEquipment = GetAvailableEquipment(detail.available_equipment_id);
			if (availableEquipment != null)
			{
				totalAmount += availableEquipment.rental_price * detail.quantity;
			}
		}

		return totalAmount;
	}

	private IEnumerable<AvailableEquipment> FilteredAvailableEquipment()
	{
		var clubId = GetClubIdForOrder(orderIdForEquipment);
		return availableEquipments.Where(ae => ae.club_id == clubId && ae.available_quantity > 0);
	}

	private int GetClubIdForOrder(int orderId)
	{
		var order = Orders.FirstOrDefault(o => o.OrderId == orderId);
		if (order == null) return 0;

		var employee = employees.FirstOrDefault(e => e.employee_id == order.EmployeeId);
		return employee?.club_id ?? 0;
	}

	private int GetMaxForSelectedEquipment()
	{
		if (selectedEquipmentId == 0) return 1;

		var available = availableEquipments.FirstOrDefault(ae => ae.available_id == selectedEquipmentId);
		if (available == null) return 1;

		// Count how many of this equipment is used in other orders
		var existingUsage = orderDetails
			.Where(od => od.available_equipment_id == selectedEquipmentId)
			.Sum(od => od.quantity);

		return Math.Max(1, available.available_quantity - existingUsage);
	}
	private async Task ShowToast(string message, string severity)
	{
		Severity sev = severity switch
		{
			"success" => Severity.Success,
			"info" => Severity.Info,
			"warning" => Severity.Warning,
			"danger" => Severity.Error,
			_ => Severity.Normal
		};

		Snackbar.Add(message, sev);
	}

	public class OrderViewModel
	{
		public int OrderId { get; set; }
		public string OrderNumber { get; set; } = "";
		public DateTime OrderDate { get; set; }
		public DateTime EventDate { get; set; }
		public string StatusName { get; set; } = "";
		public int StatusId { get; set; }
		public int? ClientId { get; set; }
		public int EmployeeId { get; set; }
		public int OfferId { get; set; }
		public string ClubName { get; set; } = "";
		public string EmployeeName { get; set; } = "";
		public string ClubOffers { get; set; } = "";
		public decimal TotalAmount { get; set; }
		public DateTime? LastUpdated { get; set; }
	}
}

<style>
	.order-details-container {
		background-color: #f9f9f9;
		border-radius: 0 0 4px 4px;
	}

	/* Updated styles for accordion behavior */
	div[id^="collapse"] {
		display: none;
	}

		div[id^="collapse"].show {
			display: block;
		}

	/* Add these new styles */
	.order-details-popup {
		position: absolute;
		top: 100%;
		left: 0;
		right: 0;
		z-index: 100;
		background-color: white;
		border: 1px solid #dee2e6;
		border-radius: 0.25rem;
		box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
	}
</style>