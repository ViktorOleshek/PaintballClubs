@page "/supplyOrders"
@using Domain.Entities
@using System.Collections.Generic
@using Services.ExternalApi.Facade
@inject IApiFacade ApiFacade
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3 class="mb-4">Supply Orders Management</h3>

<div class="mb-3">
    <input type="text" class="form-control w-25" placeholder="Search orders..." @bind-value="searchQuery" @bind-value:event="oninput" />
</div>

<div class="table-responsive">
    <table class="table table-bordered table-hover">
        <thead class="table-light">
            <tr>
                <th>ID</th>
                <th>Order Date</th>
                <th>Supplier</th>
                <th>Status</th>
                <th>Employee</th>
                <th>Equipment Items</th>
                <th>Total Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in FilteredOrders)
            {
                <tr>
                    <td>@order.SupplyOrderId</td>
                    <td @onclick="() => BeginEdit(order, nameof(order.OrderDate))">
                        @if (editingOrder?.SupplyOrderId == order.SupplyOrderId && editingField == nameof(order.OrderDate))
                        {
                            <input type="date" class="form-control" @bind-value="order.OrderDate" @onblur="() => EndEdit()" @onclick:stopPropagation="true" />
                        }
                        else
                        {
                            @order.OrderDate.ToShortDateString()
                        }
                    </td>
                    <td @onclick="() => BeginEdit(order, nameof(order.SupplierName))">
                        @if (editingOrder?.SupplyOrderId == order.SupplyOrderId && editingField == nameof(order.SupplierName))
                        {
                            <select class="form-select" @bind="order.SupplierId" @onblur="() => EndEdit()" @onclick:stopPropagation="true">
                                @foreach (var supplier in suppliers)
                                {
                                    <option value="@supplier.supplier_id">@supplier.name</option>
                                }
                            </select>
                        }
                        else
                        {
                            @order.SupplierName
                        }
                    </td>
                    <td @onclick="() => BeginEdit(order, nameof(order.StatusName))">
                        @if (editingOrder?.SupplyOrderId == order.SupplyOrderId && editingField == nameof(order.StatusName))
                        {
                            <select class="form-select" @bind="order.StatusId" @onblur="() => EndEdit()" @onclick:stopPropagation="true">
                                @foreach (var status in statuses)
                                {
                                    <option value="@status.status_id">@status.status_name</option>
                                }
                            </select>
                        }
                        else
                        {
                            <span class="@GetStatusBadgeClass(order.StatusName)">@order.StatusName</span>
                        }
                    </td>
                    <td @onclick="() => BeginEdit(order, nameof(order.EmployeeName))">
                        @if (editingOrder?.SupplyOrderId == order.SupplyOrderId && editingField == nameof(order.EmployeeName))
                        {
                            <select class="form-select" @bind="order.EmployeeId" @onblur="() => EndEdit()" @onclick:stopPropagation="true">
                                @foreach (var employee in employees)
                                {
                                    <option value="@employee.employee_id">@($"{employee.first_name} {employee.last_name}")</option>
                                }
                            </select>
                        }
                        else
                        {
                            @order.EmployeeName
                        }
                    </td>
                    <td @onclick="() => BeginEdit(order, nameof(order.SuppliedEquipmentItems))">
                        @if (editingOrder?.SupplyOrderId == order.SupplyOrderId && editingField == nameof(order.SuppliedEquipmentItems))
                        {
                            <div class="equipment-editor p-2" @onclick:stopPropagation="true">
                                @foreach (var item in order.SuppliedEquipmentItems)
                                {
                                    <div class="equipment-item mb-2 p-2 border rounded">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <select class="form-select me-2" @bind="item.EquipmentId">
                                                @foreach (var equip in equipmentList)
                                                {
                                                    <option value="@equip.equipment_id">@equip.name</option>
                                                }
                                            </select>
                                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveEquipmentItem(order, item)">×</button>
                                        </div>
                                        <div class="d-flex">
                                            <div class="me-2">
                                                <label>Quantity</label>
                                                <input type="number" class="form-control" @bind="item.Quantity" min="1" />
                                            </div>
                                            <div>
                                                <label>Price</label>
                                                <input type="number" class="form-control" @bind="item.Price" step="0.01" min="0" />
                                            </div>
                                        </div>
                                    </div>
                                }
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => AddEquipmentItem(order)">Add Equipment</button>
                                <div class="mt-2">
                                    <button class="btn btn-primary btn-sm" @onclick="() => SaveEquipmentChanges(order)">Save</button>
                                    <button class="btn btn-secondary btn-sm ms-2" @onclick="() => CancelEdit()">Cancel</button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => BeginEdit(order, nameof(order.SuppliedEquipmentItems))">
                                View (@order.SuppliedEquipmentItems.Count items)
                            </button>
                        }
                    </td>
                    <td class="text-end">@order.TotalAmount.ToString("C2")</td>
                    <td>
                        <div class="d-flex justify-content-around">
                            <button class="btn btn-sm btn-primary me-1" @onclick="() => EditOrder(order.SupplyOrderId)">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteOrder(order.SupplyOrderId)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<button class="btn btn-success" @onclick="CreateNewOrder">
    <i class="bi bi-plus-circle me-1"></i> New Order
</button>

@code {
    private string searchQuery = "";
    private List<SupplyOrderViewModel> orders = new();
    private List<Supplier> suppliers = new();
    private List<SupplyOrderStatus> statuses = new();
    private List<Employee> employees = new();
    private List<Equipment> equipmentList = new();
    private List<SuppliedEquipment> suppliedEquipments = new();

    private SupplyOrderViewModel? editingOrder;
    private string? editingField;

    private IEnumerable<SupplyOrderViewModel> FilteredOrders =>
        string.IsNullOrWhiteSpace(searchQuery)
            ? orders
            : orders.Where(o => o.SupplyOrderId.ToString().Contains(searchQuery) ||
                               o.SupplierName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                               o.StatusName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                               o.EmployeeName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var supplyOrdersResponse = await ApiFacade.SupplyOrdersApiService.Get();
        var suppliersResponse = await ApiFacade.SuppliersApiService.Get();
        var statusesResponse = await ApiFacade.SupplyOrderStatusApiService.Get();
        var employeesResponse = await ApiFacade.EmployeeApiService.Get();
        var equipmentResponse = await ApiFacade.EquipmentApiService.Get();
        var suppliedEquipmentsResponse = await ApiFacade.SuppliedEquipmentApiService.Get();

        if (!supplyOrdersResponse.IsSuccessStatusCode ||
            !suppliersResponse.IsSuccessStatusCode ||
            !statusesResponse.IsSuccessStatusCode ||
            !employeesResponse.IsSuccessStatusCode ||
            !equipmentResponse.IsSuccessStatusCode ||
            !suppliedEquipmentsResponse.IsSuccessStatusCode)
        {
            return;
        }

        var supplyOrders = supplyOrdersResponse.Content;
        suppliers = suppliersResponse.Content.ToList();
        statuses = statusesResponse.Content.ToList();
        employees = employeesResponse.Content.ToList();
        equipmentList = equipmentResponse.Content.ToList();
        suppliedEquipments = suppliedEquipmentsResponse.Content.ToList();

        orders = supplyOrders.Select(o => new SupplyOrderViewModel
            {
                SupplyOrderId = o.supply_order_id,
                OrderDate = o.order_date,
                SupplierId = o.supplier_id,
                SupplierName = suppliers.FirstOrDefault(s => s.supplier_id == o.supplier_id)?.name ?? "Unknown",
                StatusId = o.status_id,
                StatusName = statuses.FirstOrDefault(s => s.status_id == o.status_id)?.status_name ?? "Unknown",
                EmployeeId = o.employee_id,
                EmployeeName = GetEmployeeName(o.employee_id),
                TotalAmount = o.total_amount,
                SuppliedEquipmentItems = GetSuppliedEquipmentItems(o.supply_order_id)
            }).ToList();
    }

    private string GetEmployeeName(int employeeId)
    {
        var employee = employees.FirstOrDefault(e => e.employee_id == employeeId);
        return employee != null ? $"{employee.first_name} {employee.last_name}" : "Unknown";
    }

    private List<SuppliedEquipmentViewModel> GetSuppliedEquipmentItems(int supplyOrderId)
    {
        return suppliedEquipments
            .Where(se => se.supply_order_id == supplyOrderId)
            .Select(se => new SuppliedEquipmentViewModel
                {
                    SuppliedEquipmentId = se.supplied_equipment_id,
                    SupplyOrderId = se.supply_order_id,
                    EquipmentId = se.equipment_id,
                    EquipmentName = equipmentList.FirstOrDefault(e => e.equipment_id == se.equipment_id)?.name ?? "Unknown",
                    Quantity = se.quantity,
                    Price = se.price
                }).ToList();
    }

    private string GetStatusBadgeClass(string statusName)
    {
        return statusName.ToLower() switch
        {
            "pending" => "badge bg-warning text-dark",
            "approved" => "badge bg-info text-dark",
            "ordered" => "badge bg-primary",
            "delivered" => "badge bg-success",
            "cancelled" => "badge bg-danger",
            _ => "badge bg-secondary"
        };
    }

    private void BeginEdit(SupplyOrderViewModel order, string field)
    {
        editingOrder = order;
        editingField = field;
    }

    private async Task EndEdit()
    {
        if (editingOrder != null && editingField != nameof(editingOrder.SuppliedEquipmentItems))
        {
            await SaveChanges(editingOrder);
            editingOrder = null;
            editingField = null;
        }
    }

    private void CancelEdit()
    {
        editingOrder = null;
        editingField = null;
    }

    private async Task SaveChanges(SupplyOrderViewModel order)
    {
        var supplyOrder = new SupplyOrder
            {
                supply_order_id = order.SupplyOrderId,
                order_date = order.OrderDate,
                supplier_id = order.SupplierId,
                status_id = order.StatusId,
                employee_id = order.EmployeeId,
                total_amount = order.TotalAmount,
                UpdateDatetime = DateTime.Now
            };

        await ApiFacade.SupplyOrdersApiService.Update(supplyOrder.supply_order_id, supplyOrder);
        await LoadData();
    }

    private void AddEquipmentItem(SupplyOrderViewModel order)
    {
        var newItem = new SuppliedEquipmentViewModel
            {
                SupplyOrderId = order.SupplyOrderId,
                EquipmentId = equipmentList.FirstOrDefault()?.equipment_id ?? 0,
                EquipmentName = equipmentList.FirstOrDefault()?.name ?? "",
                Quantity = 1,
                Price = 0
            };

        order.SuppliedEquipmentItems.Add(newItem);
    }

    private void RemoveEquipmentItem(SupplyOrderViewModel order, SuppliedEquipmentViewModel item)
    {
        order.SuppliedEquipmentItems.Remove(item);
    }

    private async Task SaveEquipmentChanges(SupplyOrderViewModel order)
    {
        // Calculate new total amount
        order.TotalAmount = order.SuppliedEquipmentItems.Sum(item => item.Quantity * item.Price);

        // First update the supply order with new total
        await SaveChanges(order);

        // Then update all equipment items
        foreach (var item in order.SuppliedEquipmentItems)
        {
            var suppliedEquipment = new SuppliedEquipment
                {
                    supplied_equipment_id = item.SuppliedEquipmentId,
                    supply_order_id = item.SupplyOrderId,
                    equipment_id = item.EquipmentId,
                    quantity = item.Quantity,
                    price = item.Price,
                    UpdateDatetime = DateTime.Now
                };

            if (item.SuppliedEquipmentId > 0)
            {
                await ApiFacade.SuppliedEquipmentApiService.Update(suppliedEquipment.supplied_equipment_id, suppliedEquipment);
            }
            else
            {
                // For new items
                suppliedEquipment.CreateDatetime = DateTime.Now;
                await ApiFacade.SuppliedEquipmentApiService.Create(suppliedEquipment);
            }
        }

        // Remove deleted items from the database
        var existingItems = suppliedEquipments.Where(se => se.supply_order_id == order.SupplyOrderId);
        foreach (var existing in existingItems)
        {
            if (!order.SuppliedEquipmentItems.Any(i => i.SuppliedEquipmentId == existing.supplied_equipment_id))
            {
                await ApiFacade.SuppliedEquipmentApiService.Delete(existing.supplied_equipment_id);
            }
        }

        editingOrder = null;
        editingField = null;
        await LoadData();
    }

    private void CreateNewOrder()
    {
        NavigationManager.NavigateTo("/supply-orders/create");
    }

    private void EditOrder(int orderId)
    {
        NavigationManager.NavigateTo($"/supply-orders/edit/{orderId}");
    }

    private async Task DeleteOrder(int orderId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this order?");
        if (confirmed)
        {
            // First delete all supplied equipment items
            var itemsToDelete = suppliedEquipments.Where(se => se.supply_order_id == orderId);
            foreach (var item in itemsToDelete)
            {
                await ApiFacade.SuppliedEquipmentApiService.Delete(item.supplied_equipment_id);
            }

            // Then delete the order
            await ApiFacade.SupplyOrdersApiService.Delete(orderId);
            await LoadData();
        }
    }

    public class SupplyOrderViewModel
    {
        public int SupplyOrderId { get; set; }
        public DateTime OrderDate { get; set; }
        public int SupplierId { get; set; }
        public string SupplierName { get; set; } = "";
        public int StatusId { get; set; }
        public string StatusName { get; set; } = "";
        public int EmployeeId { get; set; }
        public string EmployeeName { get; set; } = "";
        public decimal TotalAmount { get; set; }
        public List<SuppliedEquipmentViewModel> SuppliedEquipmentItems { get; set; } = new();
    }

    public class SuppliedEquipmentViewModel
    {
        public int SuppliedEquipmentId { get; set; }
        public int SupplyOrderId { get; set; }
        public int EquipmentId { get; set; }
        public string EquipmentName { get; set; } = "";
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }
}

<style>
    .equipment-editor {
        background-color: #f8f9fa;
        border-radius: 4px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.15);
        max-height: 400px;
        overflow-y: auto;
        width: 400px;
        position: absolute;
        z-index: 1000;
    }

    .equipment-item {
        background-color: white;
    }
</style>