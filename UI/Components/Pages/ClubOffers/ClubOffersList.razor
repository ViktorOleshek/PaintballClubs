@page "/cluboffers"

@using Domain.Constants
@using Domain.Entities
@using Microsoft.AspNetCore.Components.Authorization
@using UI.Components.Pages.SupplyOrders.Component
@using Services.ExternalApi.Facade
@using System.ComponentModel.DataAnnotations

@inject IApiFacade ApiFacade
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject MudBlazor.ISnackbar Snackbar

<AuthorizeView Policy=@Roles.TechnicalSpecialist>
	<Authorized Context="authContext">

		<h3>Пропозиції мережі пейнтбольних клубів</h3>

		<div class="card mb-3">
			<div class="card-header">
				<div class="d-flex justify-content-between align-items-center mb-2">
					<h5 class="mb-0">Фільтри</h5>
					<button class="btn btn-success btn-sm" @onclick="ToggleAddNewForm">
						<i class="bi bi-plus-circle"></i> Додати пропозицію
					</button>
				</div>
				<div class="row g-2">
					<div class="col-md-3">
						<div class="input-group input-group-sm">
							<span class="input-group-text">Назва</span>
							<input type="text" class="form-control" @bind="searchQuery" @bind:event="oninput"
								   placeholder="Фільтр за назвою">
						</div>
					</div>
					<div class="col-md-3">
						<div class="input-group input-group-sm">
							<span class="input-group-text">Ціна від</span>
							<input type="number" class="form-control" @bind="minPriceFilter" @bind:event="oninput"
								   placeholder="Мінімальна ціна">
						</div>
					</div>
					<div class="col-md-3">
						<div class="input-group input-group-sm">
							<span class="input-group-text">Ціна до</span>
							<input type="number" class="form-control" @bind="maxPriceFilter" @bind:event="oninput"
								   placeholder="Максимальна ціна">
						</div>
					</div>
					<div class="col-md-3">
						<div class="input-group input-group-sm">
							<span class="input-group-text">Опис</span>
							<input type="text" class="form-control" @bind="descriptionFilter" @bind:event="oninput"
								   placeholder="Фільтр за описом">
						</div>
					</div>
				</div>
			</div>
		</div>

		@if (showAddNewForm)
		{
			<div class="card mb-3">
				<div class="card-header d-flex justify-content-between">
					<span>Додати нову пропозицію</span>
					<button type="button" class="btn-close" @onclick="ToggleAddNewForm"></button>
				</div>
				<div class="card-body">
					<EditForm Model="newOffer" OnValidSubmit="AddNewOffer">
						<DataAnnotationsValidator />

						<div class="row g-2">
							<div class="col-md-6">
								<label class="form-label">Назва</label>
								<InputText class="form-control form-control-sm" @bind-Value="newOffer.name" />
								<ValidationMessage For="@(() => newOffer.name)" class="text-danger small" />
							</div>
							<div class="col-md-6">
								<label class="form-label">Ціна</label>
								<InputNumber class="form-control form-control-sm" @bind-Value="newOffer.price" />
								<ValidationMessage For="@(() => newOffer.price)" class="text-danger small" />
							</div>
							<div class="col-12">
								<label class="form-label">Опис</label>
								<InputTextArea class="form-control form-control-sm" @bind-Value="newOffer.description" rows="3" />
								<ValidationMessage For="@(() => newOffer.description)" class="text-danger small" />
							</div>
							<div class="col-12">
								<div class="d-flex justify-content-end gap-2">
									<button type="button" class="btn btn-secondary btn-sm" @onclick="ToggleAddNewForm">Скасувати</button>
									<button type="submit" class="btn btn-primary btn-sm">Зберегти</button>
								</div>
							</div>
						</div>
					</EditForm>
				</div>
			</div>
		}

		<div class="row g-3" style="max-height: 470px; overflow-y: auto;">
			@foreach (var offer in PaginatedOffers)
			{
				<div class="col-md-4 col-lg-3">
					<div class="card h-100">
						<div class="card-header d-flex justify-content-between">
							@if (editingOffer?.offer_id == offer.offer_id)
							{
								<EditForm Model="editingOffer" OnValidSubmit="SaveOffer">
									<DataAnnotationsValidator />
									<InputText class="form-control form-control-sm" @bind-Value="editingOffer.name"
											   placeholder="Назва послуги" />
									<ValidationMessage For="@(() => editingOffer.name)" class="text-danger small" />
								</EditForm>
							}
							else
							{
								<h5 class="card-title mb-0">@offer.name</h5>
							}
							<div class="btn-group btn-group-sm">
								@if (editingOffer?.offer_id == offer.offer_id)
								{
									<button class="btn btn-success btn-sm" @onclick="SaveOffer">
										<i class="bi bi-check"></i>
									</button>
									<button class="btn btn-secondary btn-sm" @onclick="CancelEditing">
										<i class="bi bi-x"></i>
									</button>
								}
								else
								{
									<button class="btn btn-primary btn-sm" @onclick="() => EditOffer(offer)">
										<i class="bi bi-pencil"></i>
									</button>
									<button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(offer)">
										<i class="bi bi-trash"></i>
									</button>
								}
							</div>
						</div>
						<div class="card-body">
							@if (editingOffer?.offer_id == offer.offer_id)
							{
								<EditForm Model="editingOffer" OnValidSubmit="SaveOffer">
									<DataAnnotationsValidator />
									<div class="mb-2">
										<label class="form-label small">Ціна</label>
										<InputNumber class="form-control form-control-sm" @bind-Value="editingOffer.price" />
										<ValidationMessage For="@(() => editingOffer.price)" class="text-danger small" />
									</div>
									<div>
										<label class="form-label small">Опис</label>
										<InputTextArea class="form-control form-control-sm" @bind-Value="editingOffer.description" rows="3" />
										<ValidationMessage For="@(() => editingOffer.description)" class="text-danger small" />
									</div>
								</EditForm>
							}
							else
							{
								<p class="card-text text-success fw-bold">@offer.price.ToString("C")</p>
								<p class="card-text">@(string.IsNullOrEmpty(offer.description) ? "Опис відсутній" : offer.description)</p>
							}
						</div>
					</div>
				</div>
			}
		</div>

		@if (offers.Count == 0)
		{
			<div class="alert alert-info">Пропозиції не знайдено.</div>
		}
		else if (FilteredOffers.Count() == 0)
		{
			<div class="alert alert-info">За вказаними фільтрами пропозиції не знайдено.</div>
		}

		<div class="mt-3">
			<PaginationControl CurrentPage="currentPage"
							   PageSize="pageSize"
							   TotalItems="FilteredOffers.Count()"
							   TotalPages="TotalPages"
							   OnPageChanged="GoToPage"
							   OnPageSizeChanged="(size) => { pageSize = size; currentPage = 1; }" />
		</div>

		@if (showDeleteConfirmation)
		{
			<div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
				<div class="modal-dialog modal-dialog-centered">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title">Підтвердження видалення</h5>
							<button type="button" class="btn-close" @onclick="CancelDelete"></button>
						</div>
						<div class="modal-body">
							<p>Ви впевнені, що хочете видалити пропозицію "@offerToDelete?.name"?</p>
						</div>
						<div class="modal-footer">
							<button type="button" class="btn btn-secondary" @onclick="CancelDelete">Скасувати</button>
							<button type="button" class="btn btn-danger" @onclick="DeleteOffer">Видалити</button>
						</div>
					</div>
				</div>
			</div>
		}
	</Authorized>
	<NotAuthorized>
		<p>Ця функція доступна тільки для технічних спеціалістів.</p>
	</NotAuthorized>
</AuthorizeView>

@code {
	// Pagination parameters
	private int currentPage = 1;
	private int pageSize = 10;

	// Filter parameters
	private string searchQuery = "";
	private string descriptionFilter = "";
	private decimal? minPriceFilter = null;
	private decimal? maxPriceFilter = null;

	private List<ClubOffer> offers = new();
	private ClubOffer? editingOffer;
	private ClubOffer? offerToDelete;
	private bool showDeleteConfirmation = false;
	private bool showAddNewForm = false;
	private ClubOffer newOffer = new() { CreateDatetime = DateTime.Now };

	private IEnumerable<ClubOffer> FilteredOffers =>
		offers.Where(o =>
			(string.IsNullOrWhiteSpace(searchQuery) ||
				o.name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
			(string.IsNullOrWhiteSpace(descriptionFilter) ||
				(o.description != null && o.description.Contains(descriptionFilter, StringComparison.OrdinalIgnoreCase))) &&
			(!minPriceFilter.HasValue || o.price >= minPriceFilter.Value) &&
			(!maxPriceFilter.HasValue || o.price <= maxPriceFilter.Value)
		);

	private IEnumerable<ClubOffer> PaginatedOffers =>
		FilteredOffers.Skip((currentPage - 1) * pageSize).Take(pageSize);

	private int TotalPages => (int)Math.Ceiling(FilteredOffers.Count() / (double)pageSize);

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	private async Task LoadData()
	{
		try
		{
			var offersResponse = await ApiFacade.ClubOffersApiService.Get();
			if (!offersResponse.IsSuccessStatusCode)
			{
				Snackbar.Add("Не вдалося завантажити дані пропозицій. Оновіть сторінку.", MudBlazor.Severity.Error);
				return;
			}
			offers = offersResponse.Content.ToList();
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка завантаження даних: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	private void GoToPage(int page)
	{
		if (page < 1 || page > TotalPages)
			return;
		currentPage = page;
	}

	private void EditOffer(ClubOffer offer)
	{
		editingOffer = new ClubOffer
			{
				offer_id = offer.offer_id,
				name = offer.name,
				price = offer.price,
				description = offer.description,
				CreateDatetime = offer.CreateDatetime,
				UpdateDatetime = DateTime.Now
			};
	}

	private void CancelEditing()
	{
		editingOffer = null;
	}

	private async Task SaveOffer()
	{
		if (editingOffer == null) return;

		try
		{
			// Зберігаємо стару ціну перед оновленням
			var originalOffer = offers.FirstOrDefault(o => o.offer_id == editingOffer.offer_id);
			decimal oldPrice = originalOffer?.price ?? 0;

			editingOffer.UpdateDatetime = DateTime.Now;
			var response = await ApiFacade.ClubOffersApiService.Update(editingOffer.offer_id, editingOffer);

			if (response.IsSuccessStatusCode)
			{
				// Оновлюємо локальний список
				var index = offers.FindIndex(o => o.offer_id == editingOffer.offer_id);
				if (index >= 0)
				{
					offers[index] = editingOffer;
				}

				// Перевіряємо, чи змінилась ціна
				if (oldPrice != editingOffer.price)
				{
					await UpdateOrderTotalAmounts(editingOffer.offer_id, oldPrice, editingOffer.price);
				}

				Snackbar.Add("Пропозицію успішно оновлено", MudBlazor.Severity.Success);
				editingOffer = null;
			}
			else
			{
				Snackbar.Add($"Не вдалось оновити пропозицію: {response.Error}", MudBlazor.Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка оновлення пропозиції: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	// Додаємо новий метод для оновлення total_amount у замовленнях
	private async Task UpdateOrderTotalAmounts(int offerId, decimal oldPrice, decimal newPrice)
	{
		try
		{
			// Отримуємо всі замовлення
			var ordersResponse = await ApiFacade.OrdersApiService.Get();
			if (!ordersResponse.IsSuccessStatusCode)
			{
				Snackbar.Add("Не вдалося отримати замовлення для оновлення сум", MudBlazor.Severity.Warning);
				return;
			}

			// Фільтруємо замовлення, які містять дану пропозицію
			var affectedOrders = ordersResponse.Content.Where(o => o.offer_id == offerId).ToList();

			if (affectedOrders.Count == 0)
			{
				return; // Немає замовлень для оновлення
			}

			int updatedCount = 0;
			foreach (var order in affectedOrders)
			{
				// Розраховуємо нову суму замовлення
				if (order.total_amount.HasValue)
				{
					// Спочатку віднімаємо стару ціну, потім додаємо нову
					order.total_amount = (order.total_amount - oldPrice) + newPrice;
					order.UpdateDatetime = DateTime.Now;

					// Оновлюємо замовлення в базі даних
					var updateResponse = await ApiFacade.OrdersApiService.Update(order.order_id, order);
					if (updateResponse.IsSuccessStatusCode)
					{
						updatedCount++;
					}
				}
			}

			if (updatedCount > 0)
			{
				Snackbar.Add($"Оновлено загальну суму у {updatedCount} замовленнях", MudBlazor.Severity.Info);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка при оновленні сум замовлень: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	private void ConfirmDelete(ClubOffer offer)
	{
		offerToDelete = offer;
		showDeleteConfirmation = true;
	}

	private void CancelDelete()
	{
		offerToDelete = null;
		showDeleteConfirmation = false;
	}

	private async Task DeleteOffer()
	{
		if (offerToDelete == null) return;
		try
		{
			var response = await ApiFacade.ClubOffersApiService.Delete(offerToDelete.offer_id);
			if (response.IsSuccessStatusCode)
			{
				offers.RemoveAll(o => o.offer_id == offerToDelete.offer_id);
				Snackbar.Add("Пропозицію успішно видалено", MudBlazor.Severity.Success);
			}
			else
			{
				Snackbar.Add($"Не вдалось видалити пропозицію: {response.Error}", MudBlazor.Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка видалення пропозиції: {ex.Message}", MudBlazor.Severity.Error);
		}
		finally
		{
			offerToDelete = null;
			showDeleteConfirmation = false;
		}
	}

	private void ToggleAddNewForm()
	{
		showAddNewForm = !showAddNewForm;
		if (showAddNewForm)
		{
			// Reset new offer object
			newOffer = new ClubOffer { CreateDatetime = DateTime.Now };
		}
	}

	private async Task AddNewOffer()
	{
		try
		{
			newOffer.CreateDatetime = DateTime.Now;
			var response = await ApiFacade.ClubOffersApiService.Create(newOffer);
			if (response.IsSuccessStatusCode)
			{
				// Add the new offer to the list
				offers.Add(response.Content);
				Snackbar.Add("Пропозицію успішно додано", MudBlazor.Severity.Success);
				showAddNewForm = false;
			}
			else
			{
				Snackbar.Add($"Не вдалось додати пропозицію: {response.Error}", MudBlazor.Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка додавання пропозиції: {ex.Message}", MudBlazor.Severity.Error);
		}
	}
}