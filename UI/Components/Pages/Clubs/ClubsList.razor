@page "/clubs"
@using Domain.Constants
@using Domain.Entities
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@using UI.Components.Pages.SupplyOrders.Component
@inject Services.ExternalApi.Facade.IApiFacade ApiFacade

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject MudBlazor.ISnackbar Snackbar

<AuthorizeView Policy=@Roles.WarehouseWorker>
	<Authorized Context="authContext">

		<h3>Пейнтбольні клуби</h3>

		<div class="card mb-2">
			<div class="card-header p-2">
				<div class="d-flex justify-content-between align-items-center mb-1">
					<div class="d-flex align-items-center">
						<h5 class="mb-0 me-2">Фільтри</h5>
						<button class="btn btn-sm @(showFilters ? "btn-secondary" : "btn-outline-secondary")" @onclick="ToggleFilters">
							<i class="bi @(showFilters ? "bi-funnel-fill" : "bi-funnel")"></i>
						</button>
					</div>
					<button class="btn btn-success btn-sm" @onclick="ToggleAddNewForm">
						<i class="bi bi-plus-circle"></i> Додати клуб
					</button>
				</div>

				@if (showFilters)
				{
					<div class="row g-1">
						<div class="col-md-3 col-lg-2">
							<div class="input-group input-group-sm">
								<span class="input-group-text">Назва</span>
								<input type="text" class="form-control" @bind="nameFilter" @bind:event="oninput"
									   placeholder="Фільтр за назвою">
							</div>
						</div>
						<div class="col-md-3 col-lg-2">
							<div class="input-group input-group-sm">
								<span class="input-group-text">Адреса</span>
								<input type="text" class="form-control" @bind="addressFilter" @bind:event="oninput"
									   placeholder="Фільтр за адресою">
							</div>
						</div>
						<div class="col-md-3 col-lg-2">
							<div class="input-group input-group-sm">
								<span class="input-group-text">Телефон</span>
								<input type="text" class="form-control" @bind="phoneFilter" @bind:event="oninput"
									   placeholder="Фільтр за телефоном">
							</div>
						</div>
						<div class="col-md-3 col-lg-2">
							<div class="input-group input-group-sm">
								<span class="input-group-text">Дата</span>
								<input type="date" class="form-control" @bind="dateFilter" @bind:format="yyyy-MM-dd">
							</div>
						</div>
						<div class="col-md-3 col-lg-2">
							<button class="btn btn-outline-secondary btn-sm w-100" @onclick="ClearFilters">
								Очистити фільтри
							</button>
						</div>
					</div>
				}
			</div>
		</div>

		@if (showAddNewForm)
		{
			<div class="card mb-2">
				<div class="card-header p-2 d-flex justify-content-between align-items-center bg-light">
					<span><i class="bi bi-plus-circle me-1"></i>Додати клуб</span>
					<button type="button" class="btn-close" @onclick="ToggleAddNewForm"></button>
				</div>
				<div class="card-body p-2">
					<EditForm Model="newClub" OnValidSubmit="AddNewClub">
						<DataAnnotationsValidator />

						<div class="row g-1">
							<div class="col-md-4 col-lg-3">
								<div class="mb-1">
									<label class="form-label small mb-0">Назва*</label>
									<InputText class="form-control form-control-sm py-1" @bind-Value="newClub.name" />
									<ValidationMessage For="@(() => newClub.name)" class="text-danger small" />
								</div>
							</div>
							<div class="col-md-4 col-lg-3">
								<div class="mb-1">
									<label class="form-label small mb-0">Адреса</label>
									<InputText class="form-control form-control-sm py-1" @bind-Value="newClub.address" />
									<ValidationMessage For="@(() => newClub.address)" class="text-danger small" />
								</div>
							</div>
							<div class="col-md-4 col-lg-3">
								<div class="mb-1">
									<label class="form-label small mb-0">Телефон</label>
									<InputText class="form-control form-control-sm py-1" @bind-Value="newClub.phone_number" />
									<ValidationMessage For="@(() => newClub.phone_number)" class="text-danger small" />
								</div>
							</div>
							<div class="col-md-4 col-lg-3">
								<div class="d-flex justify-content-end gap-1 h-100 align-items-end">
									<button type="button" class="btn btn-outline-secondary btn-sm" @onclick="ToggleAddNewForm">Скасувати</button>
									<button type="submit" class="btn btn-primary btn-sm">Зберегти</button>
								</div>
							</div>
						</div>
					</EditForm>
				</div>
			</div>
		}

		<div class="table-responsive" style="max-height: 550px; overflow-y: auto;">
			<table class="table table-sm table-hover table-bordered">
				<thead class="table-light">
					<tr>
						<th @onclick='() => SortTable("name")' style="cursor: pointer;">
							Назва
							@if (currentSortColumn == "name")
							{
								<i class="bi @(isAscending ? "bi-sort-alpha-down" : "bi-sort-alpha-up")"></i>
							}
						</th>
						<th @onclick='() => SortTable("address")' style="cursor: pointer;">
							Адреса
							@if (currentSortColumn == "address")
							{
								<i class="bi @(isAscending ? "bi-sort-alpha-down" : "bi-sort-alpha-up")"></i>
							}
						</th>
						<th @onclick='() => SortTable("phone")' style="cursor: pointer;">
							Телефон
							@if (currentSortColumn == "phone")
							{
								<i class="bi @(isAscending ? "bi-sort-alpha-down" : "bi-sort-alpha-up")"></i>
							}
						</th>
						<th @onclick='() => SortTable("employees")' style="cursor: pointer;">
							Кількість працівників
							@if (currentSortColumn == "employees")
							{
								<i class="bi @(isAscending ? "bi-sort-numeric-down" : "bi-sort-numeric-up")"></i>
							}
						</th>
						<th>Дії</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var club in PaginatedClubs)
					{
						<tr class="@(selectedClub?.club_id == club.club_id ? "table-active" : "")">
							<td class="align-middle">
								@if (editingClub?.club_id == club.club_id)
								{
									<EditForm Model="editingClub" OnValidSubmit="SaveClub">
										<InputText class="form-control form-control-sm" @bind-Value="editingClub.name" />
									</EditForm>
								}
								else
								{
									<span>@club.name</span>
								}
							</td>
							<td class="align-middle">
								@if (editingClub?.club_id == club.club_id)
								{
									<EditForm Model="editingClub" OnValidSubmit="SaveClub">
										<InputText class="form-control form-control-sm" @bind-Value="editingClub.address" />
									</EditForm>
								}
								else
								{
									<span>@club.address</span>
								}
							</td>
							<td class="align-middle">
								@if (editingClub?.club_id == club.club_id)
								{
									<EditForm Model="editingClub" OnValidSubmit="SaveClub">
										<InputText class="form-control form-control-sm" @bind-Value="editingClub.phone_number" />
									</EditForm>
								}
								else
								{
									<span>@club.phone_number</span>
								}
							</td>
							<td>@clubEmployees.Where(e => e.club_id == club.club_id).Count()</td>
							<td class="text-end align-middle">
								<div class="btn-group btn-group-sm">
									@if (editingClub?.club_id == club.club_id)
									{
										<button class="btn btn-success" @onclick="SaveClub">
											<i class="bi bi-check"></i>
										</button>
										<button class="btn btn-secondary" @onclick="CancelEditing">
											<i class="bi bi-x"></i>
										</button>
									}
									else
									{
										<button class="btn btn-primary" @onclick="() => EditClub(club)">
											<i class="bi bi-pencil"></i>
										</button>
										<button class="btn btn-info" @onclick="() => ToggleDetails(club)">
											<i class="bi bi-info-circle"></i>
										</button>
										<button class="btn btn-danger" @onclick="() => ConfirmDelete(club)">
											<i class="bi bi-trash"></i>
										</button>
									}
								</div>
							</td>
						</tr>
						@if (selectedClub?.club_id == club.club_id)
						{
							<tr>
								<td colspan="5" class="p-0">
									<div class="p-2 bg-light border">
										<div class="card-header p-2 d-flex justify-content-between align-items-center bg-light">
											<ul class="nav nav-tabs" role="tablist">
												<li class="nav-item" role="presentation">
													<button class="nav-link @(activeTab == "employees" ? "active" : "")" @onclick='() => activeTab = "employees"'>
														Працівники
													</button>
												</li>
												<li class="nav-item" role="presentation">
													<button class="nav-link @(activeTab == "equipment" ? "active" : "")" @onclick='() => activeTab = "equipment"'>
														Обладнання
													</button>
												</li>
											</ul>
											<button type="button" class="btn-close" @onclick="CloseDetails"></button>
										</div>

										<div class="tab-content p-2 border border-top-0">
											@if (activeTab == "employees")
											{
												<div class="d-flex justify-content-between align-items-center mb-2">
													<h6 class="mb-0">Працівники клубу</h6>
													<button class="btn btn-sm btn-success" @onclick="() => ShowAddEmployeeForm(club.club_id)">
														<i class="bi bi-plus-circle"></i> Додати працівника
													</button>
												</div>

												@if (showAddEmployeeForm && addEmployeeToClubId == club.club_id)
												{
													<div class="border p-2 mb-2 bg-white rounded">
														<div class="card-header p-2 d-flex justify-content-between align-items-center bg-light">
															<span><i class="bi bi-plus-circle me-1"></i>Додати працівника</span>
															<button type="button" class="btn-close" @onclick="CancelAddEmployee"></button>
														</div>
														<EditForm Model="newEmployee" OnValidSubmit="AddNewEmployee">
															<DataAnnotationsValidator />
															<div class="row g-1">
																<div class="col-md-3">
																	<div class="mb-1">
																		<label class="form-label small mb-0">Ім'я*</label>
																		<InputText class="form-control form-control-sm" @bind-Value="newEmployee.first_name" />
																		<ValidationMessage For="@(() => newEmployee.first_name)" class="text-danger small" />
																	</div>
																</div>
																<div class="col-md-3">
																	<div class="mb-1">
																		<label class="form-label small mb-0">Прізвище*</label>
																		<InputText class="form-control form-control-sm" @bind-Value="newEmployee.last_name" />
																		<ValidationMessage For="@(() => newEmployee.last_name)" class="text-danger small" />
																	</div>
																</div>
																<div class="col-md-3">
																	<div class="mb-1">
																		<label class="form-label small mb-0">Посада*</label>
																		<InputSelect class="form-select form-select-sm" @bind-Value="newEmployee.position_id">
																			@foreach (var position in positions)
																			{
																				<option value="@position.position_id">@position.position_name</option>
																			}
																		</InputSelect>
																		<ValidationMessage For="@(() => newEmployee.position_id)" class="text-danger small" />
																	</div>
																</div>
																<div class="col-md-3">
																	<div class="d-flex justify-content-end gap-1 h-100 align-items-end">
																		<button type="button" class="btn btn-outline-secondary btn-sm" @onclick="CancelAddEmployee">Скасувати</button>
																		<button type="submit" class="btn btn-primary btn-sm">Зберегти</button>
																	</div>
																</div>
															</div>
														</EditForm>
													</div>
												}

												<div class="table-responsive">
													<table class="table table-sm table-bordered">
														<thead class="table-light">
															<tr>
																<th @onclick='() => SortEmployeeTable("firstName")' style="cursor: pointer;">
																	Ім'я
																	@if (currentEmployeeSortColumn == "firstName")
																	{
																		<i class="bi @(isEmployeeAscending ? "bi-sort-alpha-down" : "bi-sort-alpha-up")"></i>
																	}
																</th>
																<th @onclick='() => SortEmployeeTable("lastName")' style="cursor: pointer;">
																	Прізвище
																	@if (currentEmployeeSortColumn == "lastName")
																	{
																		<i class="bi @(isEmployeeAscending ? "bi-sort-alpha-down" : "bi-sort-alpha-up")"></i>
																	}
																</th>
																<th @onclick='() => SortEmployeeTable("position")' style="cursor: pointer;">
																	Посада
																	@if (currentEmployeeSortColumn == "position")
																	{
																		<i class="bi @(isEmployeeAscending ? "bi-sort-alpha-down" : "bi-sort-alpha-up")"></i>
																	}
																</th>
															</tr>
														</thead>
														<tbody>
															@foreach (var employee in SortedEmployees(clubEmployees.Where(e => e.club_id == club.club_id)))
															{
																<tr>
																	<td>@employee.first_name</td>
																	<td>@employee.last_name</td>
																	<td>@GetPositionName(employee.position_id)</td>
																</tr>
															}
														</tbody>
													</table>
												</div>
												@if (!clubEmployees.Any(e => e.club_id == club.club_id))
												{
													<div class="alert alert-info">У цьому клубі немає працівників.</div>
												}
											}
											@if (activeTab == "equipment")
											{
												<div class="d-flex justify-content-between align-items-center mb-2">
													<h6 class="mb-0">Обладнання клубу</h6>
													<button class="btn btn-sm btn-success" @onclick="() => ShowAddEquipmentForm(club.club_id)">
														<i class="bi bi-plus-circle"></i> Додати обладнання
													</button>
												</div>

												@if (showAddEquipmentForm && addEquipmentToClubId == club.club_id)
												{
													<div class="border p-2 mb-2 bg-white rounded">
														<div class="card-header p-2 d-flex justify-content-between align-items-center bg-light">
															<span><i class="bi bi-plus-circle me-1"></i>Додати обладнання</span>
															<button type="button" class="btn-close" @onclick="CancelAddEquipment"></button>
														</div>
														<EditForm Model="newAvailableEquipment" OnValidSubmit="AddNewAvailableEquipment">
															<DataAnnotationsValidator />
															<div class="row g-1">
																<div class="col-md-4">
																	<div class="mb-1">
																		<label class="form-label small mb-0">Обладнання*</label>
																		<InputSelect class="form-select form-select-sm" @bind-Value="newAvailableEquipment.equipment_id">
																			@foreach (var equipment in equipments.Where(e => !availableEquipments.Any(ae => ae.club_id == club.club_id && ae.equipment_id == e.equipment_id)))
																			{
																				<option value="@equipment.equipment_id">@equipment.name</option>
																			}
																		</InputSelect>
																		<ValidationMessage For="@(() => newAvailableEquipment.equipment_id)" class="text-danger small" />
																	</div>
																</div>
																<div class="col-md-3">
																	<div class="mb-1">
																		<label class="form-label small mb-0">Кількість*</label>
																		<InputNumber class="form-control form-control-sm" @bind-Value="newAvailableEquipment.available_quantity" />
																		<ValidationMessage For="@(() => newAvailableEquipment.available_quantity)" class="text-danger small" />
																	</div>
																</div>
																<div class="col-md-3">
																	<div class="mb-1">
																		<label class="form-label small mb-0">Ціна оренди*</label>
																		<InputNumber class="form-control form-control-sm" @bind-Value="newAvailableEquipment.rental_price" />
																		<ValidationMessage For="@(() => newAvailableEquipment.rental_price)" class="text-danger small" />
																	</div>
																</div>
																<div class="col-md-2">
																	<div class="d-flex justify-content-end gap-1 h-100 align-items-end">
																		<button type="button" class="btn btn-outline-secondary btn-sm" @onclick="CancelAddEquipment">Скасувати</button>
																		<button type="submit" class="btn btn-primary btn-sm">Зберегти</button>
																	</div>
																</div>
															</div>
														</EditForm>
													</div>
												}

												<div class="table-responsive">
													<table class="table table-sm table-bordered">
														<thead class="table-light">
															<tr>
																<th @onclick='() => SortEquipmentTable("name")' style="cursor: pointer;">
																	Обладнання
																	@if (currentEquipmentSortColumn == "name")
																	{
																		<i class="bi @(isEquipmentAscending ? "bi-sort-alpha-down" : "bi-sort-alpha-up")"></i>
																	}
																</th>
																<th @onclick='() => SortEquipmentTable("brand")' style="cursor: pointer;">
																	Бренд
																	@if (currentEquipmentSortColumn == "brand")
																	{
																		<i class="bi @(isEquipmentAscending ? "bi-sort-alpha-down" : "bi-sort-alpha-up")"></i>
																	}
																</th>
																<th @onclick='() => SortEquipmentTable("type")' style="cursor: pointer;">
																	Тип
																	@if (currentEquipmentSortColumn == "type")
																	{
																		<i class="bi @(isEquipmentAscending ? "bi-sort-alpha-down" : "bi-sort-alpha-up")"></i>
																	}
																</th>
																<th @onclick='() => SortEquipmentTable("category")' style="cursor: pointer;">
																	Категорія
																	@if (currentEquipmentSortColumn == "category")
																	{
																		<i class="bi @(isEquipmentAscending ? "bi-sort-alpha-down" : "bi-sort-alpha-up")"></i>
																	}
																</th>
																<th @onclick='() => SortEquipmentTable("model")' style="cursor: pointer;">
																	Модель
																	@if (currentEquipmentSortColumn == "model")
																	{
																		<i class="bi @(isEquipmentAscending ? "bi-sort-alpha-down" : "bi-sort-alpha-up")"></i>
																	}
																</th>
																<th @onclick='() => SortEquipmentTable("quantity")' style="cursor: pointer;">
																	Кількість
																	@if (currentEquipmentSortColumn == "quantity")
																	{
																		<i class="bi @(isEquipmentAscending ? "bi-sort-numeric-down" : "bi-sort-numeric-up")"></i>
																	}
																</th>
																<th @onclick='() => SortEquipmentTable("price")' style="cursor: pointer;">
																	Ціна оренди
																	@if (currentEquipmentSortColumn == "price")
																	{
																		<i class="bi @(isEquipmentAscending ? "bi-sort-numeric-down" : "bi-sort-numeric-up")"></i>
																	}
																</th>
																<th class="text-end">Дії</th>
															</tr>
														</thead>
														<tbody>
															@foreach (var equipment in SortedEquipments(availableEquipments.Where(e => e.club_id == club.club_id)))
															{
																var equipmentInfo = equipments.FirstOrDefault(e => e.equipment_id == equipment.equipment_id);
																<tr>
																	<td>@(equipmentInfo?.name ?? "Невідоме обладнання")</td>
																	<td>@(brands.FirstOrDefault(b => b.brand_id == equipmentInfo?.brand_id)?.brand_name ?? "-")</td>
																	<td>@(types.FirstOrDefault(t => t.type_id == equipmentInfo?.type_id)?.type_name ?? "-")</td>
																	<td>@(categories.FirstOrDefault(c => c.category_id == equipmentInfo?.category_id)?.category_name ?? "-")</td>
																	<td>@(equipmentInfo?.model ?? "-")</td>
																	<td>@equipment.available_quantity</td>
																	<td>
																		@if (editingAvailableEquipment?.available_id == equipment.available_id)
																		{
																			<EditForm Model="editingAvailableEquipment" OnValidSubmit="SaveAvailableEquipment">
																				<InputNumber class="form-control form-control-sm" @bind-Value="editingAvailableEquipment.rental_price" />
																			</EditForm>
																		}
																		else
																		{
																			@equipment.rental_price.ToString("C")
																		}
																	</td>
																	<td class="text-end">
																		<div class="btn-group btn-group-sm">
																			@if (editingAvailableEquipment?.available_id == equipment.available_id)
																			{
																				<button class="btn btn-success" @onclick="SaveAvailableEquipment">
																					<i class="bi bi-check"></i>
																				</button>
																				<button class="btn btn-secondary" @onclick="CancelEditingAvailableEquipment">
																					<i class="bi bi-x"></i>
																				</button>
																			}
																			else
																			{
																				<button class="btn btn-primary" @onclick="() => EditAvailableEquipment(equipment)">
																					<i class="bi bi-pencil"></i>
																				</button>
																				<button class="btn btn-danger" @onclick="() => ConfirmDeleteAvailableEquipment(equipment)">
																					<i class="bi bi-trash"></i>
																				</button>
																			}
																		</div>
																	</td>
																</tr>
															}
														</tbody>
													</table>
												</div>
												@if (!availableEquipments.Any(e => e.club_id == club.club_id))
												{
													<div class="alert alert-info">У цьому клубі немає обладнання.</div>
												}
											}
										</div>
										<div class="d-flex justify-content-end mt-2">
											<button class="btn btn-sm btn-secondary" @onclick="CloseDetails">
												<i class="bi bi-x-circle"></i> Закрити деталі
											</button>
										</div>
									</div>
								</td>
							</tr>
						}
					}
				</tbody>
			</table>
		</div>

		@if (clubs.Count == 0)
		{
			<div class="alert alert-info">Клуби не знайдено.</div>
		}
		else if (FilteredClubs.Count() == 0)
		{
			<div class="alert alert-info">За вказаними фільтрами клуби не знайдено.</div>
		}

		<div class="mt-3">
			<PaginationControl CurrentPage="currentPage"
							   PageSize="pageSize"
							   TotalItems="FilteredClubs.Count()"
							   TotalPages="TotalPages"
							   OnPageChanged="GoToPage"
							   OnPageSizeChanged="(size) => { pageSize = size; currentPage = 1; }" />
		</div>

		@if (showDeleteConfirmation)
		{
			<div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
				<div class="modal-dialog modal-dialog-centered">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title">Підтвердження видалення</h5>
							<button type="button" class="btn-close" @onclick="CancelDelete"></button>
						</div>
						<div class="modal-body">
							<p>Ви впевнені, що хочете видалити клуб "@clubToDelete?.name"?</p>
						</div>
						<div class="modal-footer">
							<button type="button" class="btn btn-secondary" @onclick="CancelDelete">Скасувати</button>
							<button type="button" class="btn btn-danger" @onclick="DeleteClub">Видалити</button>
						</div>
					</div>
				</div>
			</div>
		}

		@if (showDeleteAvailableEquipmentConfirmation)
		{
			<div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
				<div class="modal-dialog modal-dialog-centered">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title">Підтвердження видалення</h5>
							<button type="button" class="btn-close" @onclick="CancelDeleteAvailableEquipment"></button>
						</div>
						<div class="modal-body">
							<p>Ви впевнені, що хочете видалити обладнання "@(equipments.FirstOrDefault(e => e.equipment_id == availableEquipmentToDelete?.equipment_id)?.name)"?</p>
						</div>
						<div class="modal-footer">
							<button type="button" class="btn btn-secondary" @onclick="CancelDeleteAvailableEquipment">Скасувати</button>
							<button type="button" class="btn btn-danger" @onclick="DeleteAvailableEquipment">Видалити</button>
						</div>
					</div>
				</div>
			</div>
		}

	</Authorized>
	<NotAuthorized>
		<p>Ця функція доступна тільки для працівників складу.</p>
	</NotAuthorized>
</AuthorizeView>

@code {
	// Sorting parameters
	private string currentSortColumn = "";
	private bool isAscending = true;

	// Employee sorting parameters
	private string currentEmployeeSortColumn = "";
	private bool isEmployeeAscending = true;

	// Pagination parameters
	private int currentPage = 1;
	private int pageSize = 10;

	// Filter parameters
	private string nameFilter = "";
	private string addressFilter = "";
	private string phoneFilter = "";
	private DateTime? dateFilter = null;
	private bool showFilters = true;

	// Club data
	private List<Club> clubs = new();
	private Club? editingClub;
	private Club? clubToDelete;
	private bool showDeleteConfirmation = false;
	private bool showAddNewForm = false;
	private Club newClub = new() { CreateDatetime = DateTime.Now };
	private Club? selectedClub;
	private string activeTab = "employees";

	// Employee data
	private List<Employee> clubEmployees = new();
	private List<Domain.Entities.Position> positions = new();
	private Employee? editingEmployee;
	private Employee? employeeToDelete;
	private bool showDeleteEmployeeConfirmation = false;
	private bool showAddEmployeeForm = false;
	private int addEmployeeToClubId = 0;
	private Employee newEmployee = new() { CreateDatetime = DateTime.Now };

	// Equipment data
	private List<AvailableEquipment> availableEquipments = new();
	private List<Equipment> equipments = new();
	private AvailableEquipment? editingAvailableEquipment;
	private AvailableEquipment? availableEquipmentToDelete;
	private bool showDeleteAvailableEquipmentConfirmation = false;
	private bool showAddEquipmentForm = false;
	private int addEquipmentToClubId = 0;
	private AvailableEquipment newAvailableEquipment = new() { CreateDatetime = DateTime.Now };
	private List<Category> categories = new();
	private List<Brand> brands = new();
	private List<Domain.Entities.Type> types = new();
	// Equipment sorting parameters
	private string currentEquipmentSortColumn = "";
	private bool isEquipmentAscending = true;

	private IEnumerable<Club> FilteredClubs =>
		clubs.Where(c =>
			(string.IsNullOrWhiteSpace(nameFilter) ||
				c.name.Contains(nameFilter, StringComparison.OrdinalIgnoreCase)) &&
			(string.IsNullOrWhiteSpace(addressFilter) ||
				(c.address != null && c.address.Contains(addressFilter, StringComparison.OrdinalIgnoreCase))) &&
			(string.IsNullOrWhiteSpace(phoneFilter) ||
				(c.phone_number != null && c.phone_number.Contains(phoneFilter, StringComparison.OrdinalIgnoreCase))) &&
			(!dateFilter.HasValue ||
				(c.CreateDatetime.HasValue && c.CreateDatetime.Value.Date == dateFilter.Value.Date))
		);

	private IEnumerable<Club> SortedClubs(IEnumerable<Club> clubs)
	{
		if (string.IsNullOrEmpty(currentSortColumn))
			return clubs;

		return currentSortColumn switch
		{
			"name" => isAscending ? clubs.OrderBy(c => c.name) : clubs.OrderByDescending(c => c.name),
			"address" => isAscending ? clubs.OrderBy(c => c.address) : clubs.OrderByDescending(c => c.address),
			"phone" => isAscending ? clubs.OrderBy(c => c.phone_number) : clubs.OrderByDescending(c => c.phone_number),
			"employees" => isAscending ?
				clubs.OrderBy(c => clubEmployees.Count(e => e.club_id == c.club_id)) :
				clubs.OrderByDescending(c => clubEmployees.Count(e => e.club_id == c.club_id)),
			_ => clubs
		};
	}
	private IEnumerable<Employee> SortedEmployees(IEnumerable<Employee> employees)
	{
		if (string.IsNullOrEmpty(currentEmployeeSortColumn))
			return employees;

		return currentEmployeeSortColumn switch
		{
			"firstName" => isEmployeeAscending ? employees.OrderBy(e => e.first_name) : employees.OrderByDescending(e => e.first_name),
			"lastName" => isEmployeeAscending ? employees.OrderBy(e => e.last_name) : employees.OrderByDescending(e => e.last_name),
			"position" => isEmployeeAscending ?
				employees.OrderBy(e => GetPositionName(e.position_id)) :
				employees.OrderByDescending(e => GetPositionName(e.position_id)),
			_ => employees
		};
	}
	private void SortEquipmentTable(string columnName)
	{
		if (currentEquipmentSortColumn == columnName)
		{
			isEquipmentAscending = !isEquipmentAscending;
		}
		else
		{
			currentEquipmentSortColumn = columnName;
			isEquipmentAscending = true;
		}
	}

	private IEnumerable<Club> PaginatedClubs =>
		SortedClubs(FilteredClubs).Skip((currentPage - 1) * pageSize).Take(pageSize);

	private int TotalPages => (int)Math.Ceiling(FilteredClubs.Count() / (double)pageSize);

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	private void SortTable(string columnName)
	{
		if (currentSortColumn == columnName)
		{
			isAscending = !isAscending;
		}
		else
		{
			currentSortColumn = columnName;
			isAscending = true;
		}
	}

	private void SortEmployeeTable(string columnName)
	{
		if (currentEmployeeSortColumn == columnName)
		{
			isEmployeeAscending = !isEmployeeAscending;
		}
		else
		{
			currentEmployeeSortColumn = columnName;
			isEmployeeAscending = true;
		}
	}
	private IEnumerable<AvailableEquipment> SortedEquipments(IEnumerable<AvailableEquipment> equipment)
	{
		if (string.IsNullOrEmpty(currentEquipmentSortColumn))
			return equipment;

		return currentEquipmentSortColumn switch
		{
			"name" => isEquipmentAscending ?
				equipment.OrderBy(e => equipments.FirstOrDefault(eq => eq.equipment_id == e.equipment_id)?.name) :
				equipment.OrderByDescending(e => equipments.FirstOrDefault(eq => eq.equipment_id == e.equipment_id)?.name),
			"brand" => isEquipmentAscending ?
				equipment.OrderBy(e => brands.FirstOrDefault(b => b.brand_id == equipments.FirstOrDefault(eq => eq.equipment_id == e.equipment_id)?.brand_id)?.brand_name) :
				equipment.OrderByDescending(e => brands.FirstOrDefault(b => b.brand_id == equipments.FirstOrDefault(eq => eq.equipment_id == e.equipment_id)?.brand_id)?.brand_name),
			"type" => isEquipmentAscending ?
				equipment.OrderBy(e => types.FirstOrDefault(t => t.type_id == equipments.FirstOrDefault(eq => eq.equipment_id == e.equipment_id)?.type_id)?.type_name) :
				equipment.OrderByDescending(e => types.FirstOrDefault(t => t.type_id == equipments.FirstOrDefault(eq => eq.equipment_id == e.equipment_id)?.type_id)?.type_name),
			"category" => isEquipmentAscending ?
				equipment.OrderBy(e => categories.FirstOrDefault(c => c.category_id == equipments.FirstOrDefault(eq => eq.equipment_id == e.equipment_id)?.category_id)?.category_name) :
				equipment.OrderByDescending(e => categories.FirstOrDefault(c => c.category_id == equipments.FirstOrDefault(eq => eq.equipment_id == e.equipment_id)?.category_id)?.category_name),
			"model" => isEquipmentAscending ?
				equipment.OrderBy(e => equipments.FirstOrDefault(eq => eq.equipment_id == e.equipment_id)?.model) :
				equipment.OrderByDescending(e => equipments.FirstOrDefault(eq => eq.equipment_id == e.equipment_id)?.model),
			"quantity" => isEquipmentAscending ?
				equipment.OrderBy(e => e.available_quantity) :
				equipment.OrderByDescending(e => e.available_quantity),
			"price" => isEquipmentAscending ?
				equipment.OrderBy(e => e.rental_price) :
				equipment.OrderByDescending(e => e.rental_price),
			_ => equipment
		};
	}

	private async Task LoadData()
	{
		try
		{
			// Load clubs data
			var clubsResponse = await ApiFacade.ClubApiService.Get();
			if (!clubsResponse.IsSuccessStatusCode)
			{
				Snackbar.Add("Не вдалося завантажити дані клубів. Оновіть сторінку.", MudBlazor.Severity.Error);
				return;
			}
			clubs = clubsResponse.Content.ToList();

			// Load positions
			var positionsResponse = await ApiFacade.PositionApiService.Get();
			if (positionsResponse.IsSuccessStatusCode)
			{
				positions = positionsResponse.Content.ToList();
			}

			var categoriesResponse = await ApiFacade.CategoryApiService.Get();
			if (categoriesResponse.IsSuccessStatusCode)
			{
				categories = categoriesResponse.Content.ToList();
			}

			// Load brands
			var brandsResponse = await ApiFacade.BrandApiService.Get();
			if (brandsResponse.IsSuccessStatusCode)
			{
				brands = brandsResponse.Content.ToList();
			}

			// Load types
			var typesResponse = await ApiFacade.TypeApiService.Get();
			if (typesResponse.IsSuccessStatusCode)
			{
				types = typesResponse.Content.ToList();
			}

			// Load employees
			var employeesResponse = await ApiFacade.EmployeeApiService.Get();
			if (employeesResponse.IsSuccessStatusCode)
			{
				clubEmployees = employeesResponse.Content.ToList();
			}

			// Load equipment
			var equipmentsResponse = await ApiFacade.EquipmentApiService.Get();
			if (equipmentsResponse.IsSuccessStatusCode)
			{
				equipments = equipmentsResponse.Content.ToList();
			}

			// Load available equipment
			var availableEquipmentsResponse = await ApiFacade.AvailableEquipmentApiService.Get();
			if (availableEquipmentsResponse.IsSuccessStatusCode)
			{
				availableEquipments = availableEquipmentsResponse.Content.ToList();
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка завантаження даних: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	// Club management methods
	private void ToggleFilters() => showFilters = !showFilters;

	private void ToggleAddNewForm() => showAddNewForm = !showAddNewForm;

	private async Task AddNewClub()
	{
		try
		{
			newClub.CreateDatetime = DateTime.Now;
			var response = await ApiFacade.ClubApiService.Create(newClub);

			if (response.IsSuccessStatusCode)
			{
				Snackbar.Add("Клуб успішно додано!", MudBlazor.Severity.Success);
				newClub = new() { CreateDatetime = DateTime.Now };
				showAddNewForm = false;
				await LoadData();
			}
			else
			{
				Snackbar.Add($"Помилка при додаванні клубу: {response.Error}", MudBlazor.Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка при додаванні клубу: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	private void ClearFilters()
	{
		nameFilter = "";
		addressFilter = "";
		phoneFilter = "";
		dateFilter = null;
	}

	private void ToggleDetails(Club club)
	{
		if (selectedClub?.club_id == club.club_id)
		{
			// Already open, do nothing
			return;
		}

		selectedClub = club;
		activeTab = "employees";
	}

	private void CloseDetails() => selectedClub = null;

	private void EditClub(Club club)
	{
		editingClub = new Club
			{
				club_id = club.club_id,
				name = club.name,
				address = club.address,
				phone_number = club.phone_number,
				CreateDatetime = club.CreateDatetime,
				UpdateDatetime = DateTime.Now
			};
	}

	private async Task SaveClub()
	{
		if (editingClub == null) return;

		try
		{
			editingClub.UpdateDatetime = DateTime.Now;
			var response = await ApiFacade.ClubApiService.Update(editingClub.club_id, editingClub);

			if (response.IsSuccessStatusCode)
			{
				Snackbar.Add("Клуб успішно оновлено!", MudBlazor.Severity.Success);
				editingClub = null;
				await LoadData();
			}
			else
			{
				Snackbar.Add($"Помилка при оновленні клубу: {response.Error}", MudBlazor.Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка при оновленні клубу: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	private void CancelEditing() => editingClub = null;

	private void ConfirmDelete(Club club)
	{
		clubToDelete = club;
		showDeleteConfirmation = true;
	}

	private void CancelDelete()
	{
		clubToDelete = null;
		showDeleteConfirmation = false;
	}

	private async Task DeleteClub()
	{
		if (clubToDelete == null) return;

		try
		{
			var response = await ApiFacade.ClubApiService.Delete(clubToDelete.club_id);

			if (response.IsSuccessStatusCode)
			{
				Snackbar.Add("Клуб успішно видалено!", MudBlazor.Severity.Success);

				// Close details if the deleted club was selected
				if (selectedClub?.club_id == clubToDelete.club_id)
				{
					selectedClub = null;
				}

				CancelDelete();
				await LoadData();
			}
			else
			{
				Snackbar.Add($"Помилка при видаленні клубу: {response.Error}", MudBlazor.Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка при видаленні клубу: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	// Pagination methods
	private void GoToPage(int page)
	{
		currentPage = page;
	}

	// Employee management methods
	private void ShowAddEmployeeForm(int clubId)
	{
		addEmployeeToClubId = clubId;
		showAddEmployeeForm = true;
		newEmployee = new Employee
			{
				club_id = clubId,
				CreateDatetime = DateTime.Now
			};

		// Set a default position if available
		if (positions.Any())
		{
			newEmployee.position_id = positions.First().position_id;
		}
	}

	private void CancelAddEmployee()
	{
		showAddEmployeeForm = false;
		addEmployeeToClubId = 0;
	}

	private async Task AddNewEmployee()
	{
		try
		{
			newEmployee.CreateDatetime = DateTime.Now;
			var response = await ApiFacade.EmployeeApiService.Create(newEmployee);

			if (response.IsSuccessStatusCode)
			{
				Snackbar.Add("Працівника успішно додано!", MudBlazor.Severity.Success);
				showAddEmployeeForm = false;
				addEmployeeToClubId = 0;
				await LoadData();
			}
			else
			{
				Snackbar.Add($"Помилка при додаванні працівника: {response.Error}", MudBlazor.Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка при додаванні працівника: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	private void EditEmployee(Employee employee)
	{
		editingEmployee = new Employee
			{
				employee_id = employee.employee_id,
				first_name = employee.first_name,
				last_name = employee.last_name,
				position_id = employee.position_id,
				club_id = employee.club_id,
				CreateDatetime = employee.CreateDatetime,
				UpdateDatetime = DateTime.Now
			};
	}

	private async Task SaveEmployee()
	{
		if (editingEmployee == null) return;

		try
		{
			editingEmployee.UpdateDatetime = DateTime.Now;
			var response = await ApiFacade.EmployeeApiService.Update(editingEmployee.employee_id, editingEmployee);

			if (response.IsSuccessStatusCode)
			{
				Snackbar.Add("Працівника успішно оновлено!", MudBlazor.Severity.Success);
				editingEmployee = null;
				await LoadData();
			}
			else
			{
				Snackbar.Add($"Помилка при оновленні працівника: {response.Error}", MudBlazor.Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка при оновленні працівника: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	private void CancelEditingEmployee() => editingEmployee = null;

	private void ConfirmDeleteEmployee(Employee employee)
	{
		employeeToDelete = employee;
		showDeleteEmployeeConfirmation = true;
	}

	private void CancelDeleteEmployee()
	{
		employeeToDelete = null;
		showDeleteEmployeeConfirmation = false;
	}

	private async Task DeleteEmployee()
	{
		if (employeeToDelete == null) return;

		try
		{
			var response = await ApiFacade.EmployeeApiService.Delete(employeeToDelete.employee_id);

			if (response.IsSuccessStatusCode)
			{
				Snackbar.Add("Працівника успішно видалено!", MudBlazor.Severity.Success);
				CancelDeleteEmployee();
				await LoadData();
			}
			else
			{
				Snackbar.Add($"Помилка при видаленні працівника: {response.Error}", MudBlazor.Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка при видаленні працівника: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	private string GetPositionName(int positionId)
	{
		return positions.FirstOrDefault(p => p.position_id == positionId)?.position_name ?? "Невідома посада";
	}

	// Equipment management methods
	private void ShowAddEquipmentForm(int clubId)
	{
		addEquipmentToClubId = clubId;
		showAddEquipmentForm = true;
		newAvailableEquipment = new AvailableEquipment
			{
				club_id = clubId,
				available_quantity = 1,
				rental_price = 0,
				CreateDatetime = DateTime.Now
			};

		// Set a default equipment if available and not already assigned to this club
		var availableEquipmentIds = availableEquipments
			.Where(e => e.club_id == clubId)
			.Select(e => e.equipment_id)
			.ToList();

		var availableEquipment = equipments
			.FirstOrDefault(e => !availableEquipmentIds.Contains(e.equipment_id));

		if (availableEquipment != null)
		{
			newAvailableEquipment.equipment_id = availableEquipment.equipment_id;
		}
	}

	private void CancelAddEquipment()
	{
		showAddEquipmentForm = false;
		addEquipmentToClubId = 0;
	}

	private async Task AddNewAvailableEquipment()
	{
		try
		{
			newAvailableEquipment.CreateDatetime = DateTime.Now;
			var response = await ApiFacade.AvailableEquipmentApiService.Create(newAvailableEquipment);

			if (response.IsSuccessStatusCode)
			{
				Snackbar.Add("Обладнання успішно додано!", MudBlazor.Severity.Success);
				showAddEquipmentForm = false;
				addEquipmentToClubId = 0;
				await LoadData();
			}
			else
			{
				Snackbar.Add($"Помилка при додаванні обладнання: {response.Error}", MudBlazor.Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка при додаванні обладнання: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	private void EditAvailableEquipment(AvailableEquipment equipment)
	{
		editingAvailableEquipment = new AvailableEquipment
			{
				available_id = equipment.available_id,
				equipment_id = equipment.equipment_id,
				club_id = equipment.club_id,
				available_quantity = equipment.available_quantity,
				rental_price = equipment.rental_price,
				CreateDatetime = equipment.CreateDatetime,
				UpdateDatetime = DateTime.Now
			};
	}

	private async Task SaveAvailableEquipment()
	{
		if (editingAvailableEquipment == null) return;

		try
		{
			editingAvailableEquipment.UpdateDatetime = DateTime.Now;
			var response = await ApiFacade.AvailableEquipmentApiService.Update(editingAvailableEquipment.available_id, editingAvailableEquipment);

			if (response.IsSuccessStatusCode)
			{
				Snackbar.Add("Обладнання успішно оновлено!", MudBlazor.Severity.Success);
				editingAvailableEquipment = null;
				await LoadData();
			}
			else
			{
				Snackbar.Add($"Помилка при оновленні обладнання: {response.Error}", MudBlazor.Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка при оновленні обладнання: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	private void CancelEditingAvailableEquipment() => editingAvailableEquipment = null;

	private void ConfirmDeleteAvailableEquipment(AvailableEquipment equipment)
	{
		availableEquipmentToDelete = equipment;
		showDeleteAvailableEquipmentConfirmation = true;
	}

	private void CancelDeleteAvailableEquipment()
	{
		availableEquipmentToDelete = null;
		showDeleteAvailableEquipmentConfirmation = false;
	}

	private async Task DeleteAvailableEquipment()
	{
		if (availableEquipmentToDelete == null) return;

		try
		{
			var response = await ApiFacade.AvailableEquipmentApiService.Delete(availableEquipmentToDelete.available_id);

			if (response.IsSuccessStatusCode)
			{
				Snackbar.Add("Обладнання успішно видалено!", MudBlazor.Severity.Success);
				CancelDeleteAvailableEquipment();
				await LoadData();
			}
			else
			{
				Snackbar.Add($"Помилка при видаленні обладнання: {response.Error}", MudBlazor.Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка при видаленні обладнання: {ex.Message}", MudBlazor.Severity.Error);
		}
	}
}