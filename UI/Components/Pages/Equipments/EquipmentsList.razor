@page "/equipments"
@using Domain.Entities
@using UI.Components.Pages.SupplyOrders.Component
@using Services.ExternalApi.Facade
@using System.ComponentModel.DataAnnotations
@inject IApiFacade ApiFacade
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject MudBlazor.ISnackbar Snackbar

<h3>Обладнання пейнтбольних клубів</h3>

<div class="card mb-2">
	<div class="card-header p-2">
		<div class="d-flex justify-content-between align-items-center mb-1">
			<div class="d-flex align-items-center">
				<h5 class="mb-0 me-2">Фільтри</h5>
				<button class="btn btn-sm @(showFilters ? "btn-secondary" : "btn-outline-secondary")" @onclick="ToggleFilters">
					<i class="bi @(showFilters ? "bi-funnel-fill" : "bi-funnel")"></i>
				</button>
			</div>
			<button class="btn btn-success btn-sm" @onclick="ToggleAddNewForm">
				<i class="bi bi-plus-circle"></i> Додати обладнання
			</button>
		</div>

		@if (showFilters)
		{
			<div class="row g-1">
				<div class="col-md-3 col-lg-2">
					<div class="input-group input-group-sm">
						<span class="input-group-text">Назва</span>
						<input type="text" class="form-control" @bind="searchQuery" @bind:event="oninput"
							   placeholder="Фільтр за назвою">
					</div>
				</div>
				<div class="col-md-3 col-lg-2">
					<div class="input-group input-group-sm">
						<span class="input-group-text">Модель</span>
						<input type="text" class="form-control" @bind="modelFilter" @bind:event="oninput"
							   placeholder="Фільтр за моделлю">
					</div>
				</div>
				<div class="col-md-3 col-lg-2">
					<div class="input-group input-group-sm">
						<span class="input-group-text">Бренд</span>
						<select class="form-select form-select-sm" @bind="brandFilter">
							<option value="0">Всі бренди</option>
							@foreach (var brand in brands)
							{
								<option value="@brand.brand_id">@brand.brand_name</option>
							}
						</select>
					</div>
				</div>
				<div class="col-md-3 col-lg-2">
					<div class="input-group input-group-sm">
						<span class="input-group-text">Категорія</span>
						<select class="form-select form-select-sm" @bind="categoryFilter">
							<option value="0">Всі категорії</option>
							@foreach (var category in categories)
							{
								<option value="@category.category_id">@category.category_name</option>
							}
						</select>
					</div>
				</div>
				<div class="col-md-3 col-lg-2">
					<div class="input-group input-group-sm">
						<span class="input-group-text">Тип</span>
						<select class="form-select form-select-sm" @bind="typeFilter">
							<option value="0">Всі типи</option>
							@foreach (var type in types)
							{
								<option value="@type.type_id">@type.type_name</option>
							}
						</select>
					</div>
				</div>
				<div class="col-md-3 col-lg-2">
					<div class="input-group input-group-sm">
						<span class="input-group-text">Опис</span>
						<input type="text" class="form-control" @bind="descriptionFilter" @bind:event="oninput"
							   placeholder="Фільтр за описом">
					</div>
				</div>
				<div class="col-md-3 col-lg-2">
					<div class="input-group input-group-sm">
						<span class="input-group-text">Дата</span>
						<input type="date" class="form-control" @bind="dateFilter" @bind:format="yyyy-MM-dd">
					</div>
				</div>
				<div class="col-md-3 col-lg-2">
					<button class="btn btn-outline-secondary btn-sm w-100" @onclick="ClearFilters">
						Очистити фільтри
					</button>
				</div>
			</div>

			<div class="row mt-2">
				<div class="col-md-12">
					<div class="btn-group btn-group-sm">
						<span class="input-group-text">Сортування:</span>
						<button class="btn @(sortField == "name" ? (ascending ? "btn-primary" : "btn-secondary") : "btn-outline-secondary")"
								@onclick='() => ToggleSort(" name")'>
							Назва @(sortField == "name" ? (ascending ? "↑" : "↓") : "")
						</button>
						<button class="btn @(sortField == "brand" ? (ascending ? "btn-primary" : "btn-secondary") : "btn-outline-secondary")"
								@onclick='() => ToggleSort(" brand")'>
							Бренд @(sortField == "brand" ? (ascending ? "↑" : "↓") : "")
						</button>
						<button class="btn @(sortField == "category" ? (ascending ? "btn-primary" : "btn-secondary") : "btn-outline-secondary")"
								@onclick='() => ToggleSort(" category")'>
							Категорія @(sortField == "category" ? (ascending ? "↑" : "↓") : "")
						</button>
						<button class="btn @(sortField == "type" ? (ascending ? "btn-primary" : "btn-secondary") : "btn-outline-secondary")"
								@onclick='() => ToggleSort(" type")'>
							Тип @(sortField == "type" ? (ascending ? "↑" : "↓") : "")
						</button>
						<button class="btn @(sortField == "model" ? (ascending ? "btn-primary" : "btn-secondary") : "btn-outline-secondary")"
								@onclick='() => ToggleSort(" model")'>
							Модель @(sortField == "model" ? (ascending ? "↑" : "↓") : "")
						</button>
					</div>
				</div>
			</div>
		}
	</div>
</div>

@if (showAddNewForm)
{
	<div class="card mb-2">
		<div class="card-header p-2 d-flex justify-content-between align-items-center bg-light">
			<span><i class="bi bi-plus-circle me-1"></i>Додати обладнання</span>
			<button type="button" class="btn-close" @onclick="ToggleAddNewForm"></button>
		</div>
		<div class="card-body p-2">
			<EditForm Model="newEquipment" OnValidSubmit="AddNewEquipment">
				<DataAnnotationsValidator />

				<div class="row g-1">
					<div class="col-md-4 col-lg-3">
						<div class="mb-1">
							<label class="form-label small mb-0">Назва*</label>
							<InputText class="form-control form-control-sm py-1" @bind-Value="newEquipment.name" />
							<ValidationMessage For="@(() => newEquipment.name)" class="text-danger small" />
						</div>
					</div>

					<div class="col-md-4 col-lg-3">
						<div class="mb-1">
							<label class="form-label small mb-0">Модель*</label>
							<InputText class="form-control form-control-sm py-1" @bind-Value="newEquipment.model" />
							<ValidationMessage For="@(() => newEquipment.model)" class="text-danger small" />
						</div>
					</div>

					<div class="col-md-4 col-lg-2">
						<div class="mb-1">
							<label class="form-label small mb-0">Бренд*</label>
							<InputSelect class="form-select form-select-sm py-1" @bind-Value="newEquipment.brand_id">
								@foreach (var brand in brands)
								{
									<option value="@brand.brand_id">@brand.brand_name</option>
								}
							</InputSelect>
							<ValidationMessage For="@(() => newEquipment.brand_id)" class="text-danger small" />
						</div>
					</div>

					<div class="col-md-4 col-lg-2">
						<div class="mb-1">
							<label class="form-label small mb-0">Категорія*</label>
							<InputSelect class="form-select form-select-sm py-1" @bind-Value="newEquipment.category_id">
								@foreach (var category in categories)
								{
									<option value="@category.category_id">@category.category_name</option>
								}
							</InputSelect>
							<ValidationMessage For="@(() => newEquipment.category_id)" class="text-danger small" />
						</div>
					</div>

					<div class="col-md-4 col-lg-2">
						<div class="mb-1">
							<label class="form-label small mb-0">Тип*</label>
							<InputSelect class="form-select form-select-sm py-1" @bind-Value="newEquipment.type_id">
								@foreach (var type in types)
								{
									<option value="@type.type_id">@type.type_name</option>
								}
							</InputSelect>
							<ValidationMessage For="@(() => newEquipment.type_id)" class="text-danger small" />
						</div>
					</div>

					<div class="col-md-8 col-lg-10">
						<div class="mb-1">
							<label class="form-label small mb-0">Опис</label>
							<InputTextArea class="form-control form-control-sm py-1" @bind-Value="newEquipment.description" rows="1" />
							<ValidationMessage For="@(() => newEquipment.description)" class="text-danger small" />
						</div>
					</div>

					<div class="col-md-4 col-lg-2">
						<div class="d-flex justify-content-end gap-1 h-100 align-items-end">
							<button type="button" class="btn btn-outline-secondary btn-sm" @onclick="ToggleAddNewForm">Скасувати</button>
							<button type="submit" class="btn btn-primary btn-sm">Зберегти</button>
						</div>
					</div>
				</div>
			</EditForm>
		</div>
	</div>
}

<div class="row g-2" style="max-height: 490px; overflow-y: auto;">
	@foreach (var equipment in PaginatedEquipments)
	{
		<div class="col-md-4 col-lg-3 col-xl-2-4 mb-2">
			<div class="card h-100 shadow-sm">
				<div class="card-header p-2 d-flex justify-content-between">
					@if (editingEquipment?.equipment_id == equipment.equipment_id)
					{
						<EditForm Model="editingEquipment" OnValidSubmit="SaveEquipment" class="w-100">
							<DataAnnotationsValidator />
							<InputText class="form-control form-control-sm" @bind-Value="editingEquipment.name"
									   placeholder="Назва обладнання" />
							<ValidationMessage For="@(() => editingEquipment.name)" class="text-danger small" />
						</EditForm>
					}
					else
					{
						<h5 class="card-title mb-2 text-truncate">@equipment.name</h5>
					}
					<div class="btn-group btn-group-sm ms-2">
						@if (editingEquipment?.equipment_id == equipment.equipment_id)
						{
							<button class="btn btn-success btn-sm p-2" @onclick="SaveEquipment">
								<i class="bi bi-check"></i>
							</button>
							<button class="btn btn-secondary btn-sm p-2" @onclick="CancelEditing">
								<i class="bi bi-x"></i>
							</button>
						}
						else
						{
							<button class="btn btn-primary btn-sm p-2" @onclick="() => EditEquipment(equipment)">
								<i class="bi bi-pencil"></i>
							</button>
							<button class="btn btn-danger btn-sm p-2" @onclick="() => ConfirmDelete(equipment)">
								<i class="bi bi-trash"></i>
							</button>
						}
					</div>
				</div>
				<div class="card-body p-2">
					@if (editingEquipment?.equipment_id == equipment.equipment_id)
					{
						<EditForm Model="editingEquipment" OnValidSubmit="SaveEquipment">
							<DataAnnotationsValidator />
							<div class="mb-1">
								<label class="form-label small mb-0">Модель</label>
								<InputText class="form-control form-control-sm py-1" @bind-Value="editingEquipment.model" />
							</div>
							<div class="row g-1 mb-1">
								<div class="col-12 mb-1">
									<label class="form-label small mb-0">Бренд</label>
									<InputSelect class="form-select form-select-sm py-1" @bind-Value="editingEquipment.brand_id">
										@foreach (var brand in brands)
										{
											<option value="@brand.brand_id">@brand.brand_name</option>
										}
									</InputSelect>
								</div>
								<div class="col-6">
									<label class="form-label small mb-0">Категорія</label>
									<InputSelect class="form-select form-select-sm py-1" @bind-Value="editingEquipment.category_id">
										@foreach (var category in categories)
										{
											<option value="@category.category_id">@category.category_name</option>
										}
									</InputSelect>
								</div>
								<div class="col-6">
									<label class="form-label small mb-0">Тип</label>
									<InputSelect class="form-select form-select-sm py-1" @bind-Value="editingEquipment.type_id">
										@foreach (var type in types)
										{
											<option value="@type.type_id">@type.type_name</option>
										}
									</InputSelect>
								</div>
							</div>
							<div>
								<label class="form-label small mb-0">Опис</label>
								<InputTextArea class="form-control form-control-sm py-1" @bind-Value="editingEquipment.description" rows="2" />
							</div>
						</EditForm>
					}
					else
					{
						<div class="mb-1 d-flex">
							<span class="badge bg-primary me-1 fs-7">@GetBrandName(equipment.brand_id)</span>
							<span class="badge bg-secondary me-1 fs-7">@GetCategoryName(equipment.category_id)</span>
							<span class="badge bg-info text-dark fs-7">@GetTypeName(equipment.type_id)</span>
						</div>
						@if (!string.IsNullOrEmpty(equipment.model))
						{
							<p class="card-text fs-6 mb-1"><strong>Модель:</strong> @equipment.model</p>
						}
						@if (!string.IsNullOrEmpty(equipment.description))
						{
							<p class="card-text fs-6 mb-1 text-truncate" title="@equipment.description">@equipment.description</p>
						}

						@if (equipmentCounts.ContainsKey(equipment.equipment_id))
						{
							var count = equipmentCounts[equipment.equipment_id];
							<div class="mt-2">
								<button class="btn btn-sm btn-outline-info w-100" @onclick="() => ToggleEquipmentInfo(equipment.equipment_id)">
									Кількість: @count.TotalCount шт.
									<i class="bi @(selectedEquipmentId == equipment.equipment_id ? "bi-chevron-up" : "bi-chevron-down")"></i>
								</button>

								@if (selectedEquipmentId == equipment.equipment_id)
								{
									<div class="card mt-1 p-1 bg-light">
										@if (count.ClubCounts.Any())
										{
											<div class="list-group list-group-flush small">
												@foreach (var clubCount in count.ClubCounts.OrderByDescending(c => c.Count))
												{
													<div class="list-group-item py-1 px-2 d-flex justify-content-between">
														<span title="@clubCount.ClubName" class="text-truncate">@clubCount.ClubName</span>
														<span class="ms-1">
															<strong>@clubCount.Count</strong> шт. /
															<span class="text-success">@clubCount.RentalPrice.ToString("F2") грн</span>
														</span>
													</div>
												}
											</div>
										}
										else
										{
											<div class="text-center p-2 small">Немає в наявності в клубах</div>
										}
									</div>
								}
							</div>
						}
					}
				</div>
			</div>
		</div>
	}
</div>

@if (equipments.Count == 0)
{
	<div class="alert alert-info">Обладнання не знайдено.</div>
}
else if (FilteredEquipments.Count() == 0)
{
	<div class="alert alert-info">За вказаними фільтрами обладнання не знайдено.</div>
}

<div class="mt-3">
	<PaginationControl CurrentPage="currentPage"
					   PageSize="pageSize"
					   TotalItems="FilteredEquipments.Count()"
					   TotalPages="TotalPages"
					   OnPageChanged="GoToPage"
					   OnPageSizeChanged="(size) => { pageSize = size; currentPage = 1; }" />
</div>

@if (showDeleteConfirmation)
{
	<div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Підтвердження видалення</h5>
					<button type="button" class="btn-close" @onclick="CancelDelete"></button>
				</div>
				<div class="modal-body">
					<p>Ви впевнені, що хочете видалити обладнання "@equipmentToDelete?.name"?</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="CancelDelete">Скасувати</button>
					<button type="button" class="btn btn-danger" @onclick="DeleteEquipment">Видалити</button>
				</div>
			</div>
		</div>
	</div>
}

@code {
	// Pagination parameters
	private int currentPage = 1;
	private int pageSize = 10;

	// Додайте після змінних фільтрації
	private string sortField = "name";
	private bool ascending = true;

	// Filter parameters
	private string searchQuery = "";
	private string modelFilter = "";
	private string descriptionFilter = "";
	private int brandFilter = 0;
	private int categoryFilter = 0;
	private int typeFilter = 0;
	private DateTime? dateFilter = null;
	private bool showFilters = true;

	private List<Equipment> equipments = new();
	private List<Brand> brands = new();
	private List<Category> categories = new();
	private List<Domain.Entities.Type> types = new();
	private Equipment? editingEquipment;
	private Equipment? equipmentToDelete;
	private bool showDeleteConfirmation = false;
	private bool showAddNewForm = false;
	private Equipment newEquipment = new() { CreateDatetime = DateTime.Now };

	private Dictionary<int, EquipmentCount> equipmentCounts = new();
	private List<Club> clubs = new();
	private List<AvailableEquipment> availableEquipments = new();
	private int? selectedEquipmentId = null;

	private void ToggleEquipmentInfo(int equipmentId)
	{
		if (selectedEquipmentId == equipmentId)
			selectedEquipmentId = null;
		else
			selectedEquipmentId = equipmentId;
	}

	private class EquipmentCount
	{
		public int TotalCount { get; set; }
		public List<ClubEquipmentCount> ClubCounts { get; set; } = new();
	}

	private class ClubEquipmentCount
	{
		public int ClubId { get; set; }
		public string ClubName { get; set; } = "";
		public int Count { get; set; }
		public decimal RentalPrice { get; set; }
	}

	private IEnumerable<Equipment> FilteredEquipments =>
		equipments.Where(e =>
			(string.IsNullOrWhiteSpace(searchQuery) ||
				e.name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
			(string.IsNullOrWhiteSpace(modelFilter) ||
				(e.model != null && e.model.Contains(modelFilter, StringComparison.OrdinalIgnoreCase))) &&
			(string.IsNullOrWhiteSpace(descriptionFilter) ||
				(e.description != null && e.description.Contains(descriptionFilter, StringComparison.OrdinalIgnoreCase))) &&
			(brandFilter == 0 || e.brand_id == brandFilter) &&
			(categoryFilter == 0 || e.category_id == categoryFilter) &&
			(typeFilter == 0 || e.type_id == typeFilter) &&
			(!dateFilter.HasValue ||
				(e.CreateDatetime.HasValue && e.CreateDatetime.Value.Date == dateFilter.Value.Date))
		).OrderBy(e => sortField switch
		{
			"name" => ascending ? e.name : null,
			"brand" => ascending ? GetBrandName(e.brand_id) : null,
			"category" => ascending ? GetCategoryName(e.category_id) : null,
			"type" => ascending ? GetTypeName(e.type_id) : null,
			"model" => ascending ? e.model : null,
			_ => e.name
		}).ThenBy(e => e.name)
		.OrderByDescending(e => sortField switch
		{
			"name" => !ascending ? e.name : null,
			"brand" => !ascending ? GetBrandName(e.brand_id) : null,
			"category" => !ascending ? GetCategoryName(e.category_id) : null,
			"type" => !ascending ? GetTypeName(e.type_id) : null,
			"model" => !ascending ? e.model : null,
			_ => null
		});

	private IEnumerable<Equipment> PaginatedEquipments =>
		FilteredEquipments.Skip((currentPage - 1) * pageSize).Take(pageSize);

	private int TotalPages => (int)Math.Ceiling(FilteredEquipments.Count() / (double)pageSize);

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	private void ToggleSort(string field)
{
    if (sortField == field)
    {
        ascending = !ascending;
    }
    else
    {
        sortField = field;
        ascending = true;
    }
}

	private async Task LoadData()
	{
		try
		{
			// Load equipment data
			var equipmentsResponse = await ApiFacade.EquipmentApiService.Get();
			if (!equipmentsResponse.IsSuccessStatusCode)
			{
				Snackbar.Add("Не вдалося завантажити дані обладнання. Оновіть сторінку.", MudBlazor.Severity.Error);
				return;
			}
			equipments = equipmentsResponse.Content.ToList();

			// Load brands
			var brandsResponse = await ApiFacade.BrandApiService.Get();
			if (brandsResponse.IsSuccessStatusCode)
			{
				brands = brandsResponse.Content.ToList();
			}

			// Load categories
			var categoriesResponse = await ApiFacade.CategoryApiService.Get();
			if (categoriesResponse.IsSuccessStatusCode)
			{
				categories = categoriesResponse.Content.ToList();
			}

			// Load types
			var typesResponse = await ApiFacade.TypeApiService.Get();
			if (typesResponse.IsSuccessStatusCode)
			{
				types = typesResponse.Content.ToList();
			}

			var clubsResponse = await ApiFacade.ClubApiService.Get();
			if (clubsResponse.IsSuccessStatusCode)
			{
				clubs = clubsResponse.Content.ToList();
			}

			// Load available equipment
			var availableResponse = await ApiFacade.AvailableEquipmentApiService.Get();
			if (availableResponse.IsSuccessStatusCode)
			{
				availableEquipments = availableResponse.Content.ToList();
				CalculateEquipmentCounts();
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка завантаження даних: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	private void CalculateEquipmentCounts()
	{
		equipmentCounts.Clear();

		foreach (var equipment in equipments)
		{
			equipmentCounts[equipment.equipment_id] = new EquipmentCount();
		}

		foreach (var available in availableEquipments)
		{
			if (!equipmentCounts.ContainsKey(available.equipment_id))
				continue;

			var count = equipmentCounts[available.equipment_id];
			count.TotalCount += available.available_quantity;

			var club = clubs.FirstOrDefault(c => c.club_id == available.club_id);
			if (club != null)
			{
				count.ClubCounts.Add(new ClubEquipmentCount
					{
						ClubId = available.club_id,
						ClubName = club.name,
						Count = available.available_quantity,
						RentalPrice = available.rental_price
					});
			}
		}
	}

	private string GetBrandName(int brandId)
	{
		return brands.FirstOrDefault(b => b.brand_id == brandId)?.brand_name ?? "Невідомий бренд";
	}

	private string GetCategoryName(int categoryId)
	{
		return categories.FirstOrDefault(c => c.category_id == categoryId)?.category_name ?? "Невідома категорія";
	}

	private string GetTypeName(int typeId)
	{
		return types.FirstOrDefault(t => t.type_id == typeId)?.type_name ?? "Невідомий тип";
	}

	private void GoToPage(int page)
	{
		if (page < 1 || page > TotalPages)
			return;
		currentPage = page;
	}

	private void EditEquipment(Equipment equipment)
	{
		editingEquipment = new Equipment
			{
				equipment_id = equipment.equipment_id,
				name = equipment.name,
				description = equipment.description,
				brand_id = equipment.brand_id,
				category_id = equipment.category_id,
				type_id = equipment.type_id,
				model = equipment.model,
				CreateDatetime = equipment.CreateDatetime,
				UpdateDatetime = DateTime.Now
			};
	}

	private void CancelEditing()
	{
		editingEquipment = null;
	}

	private async Task SaveEquipment()
	{
		if (editingEquipment == null) return;

		try
		{
			editingEquipment.UpdateDatetime = DateTime.Now;
			var response = await ApiFacade.EquipmentApiService.Update(editingEquipment.equipment_id, editingEquipment);
			if (response.IsSuccessStatusCode)
			{
				// Update the local list
				var index = equipments.FindIndex(e => e.equipment_id == editingEquipment.equipment_id);
				if (index >= 0)
				{
					equipments[index] = editingEquipment;
				}
				Snackbar.Add("Обладнання успішно оновлено", MudBlazor.Severity.Success);
				editingEquipment = null;
			}
			else
			{
				Snackbar.Add($"Не вдалось оновити обладнання: {response.Error}", MudBlazor.Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка оновлення обладнання: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	private void ConfirmDelete(Equipment equipment)
	{
		equipmentToDelete = equipment;
		showDeleteConfirmation = true;
	}

	private void CancelDelete()
	{
		equipmentToDelete = null;
		showDeleteConfirmation = false;
	}

	private async Task DeleteEquipment()
	{
		if (equipmentToDelete == null) return;
		try
		{
			var response = await ApiFacade.EquipmentApiService.Delete(equipmentToDelete.equipment_id);
			if (response.IsSuccessStatusCode)
			{
				equipments.RemoveAll(e => e.equipment_id == equipmentToDelete.equipment_id);
				Snackbar.Add("Обладнання успішно видалено", MudBlazor.Severity.Success);
			}
			else
			{
				Snackbar.Add($"Не вдалось видалити обладнання: {response.Error}", MudBlazor.Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка видалення обладнання: {ex.Message}", MudBlazor.Severity.Error);
		}
		finally
		{
			equipmentToDelete = null;
			showDeleteConfirmation = false;
		}
	}

	private void ToggleAddNewForm()
	{
		showAddNewForm = !showAddNewForm;
		if (showAddNewForm)
		{
			// Reset new equipment object
			newEquipment = new Equipment { CreateDatetime = DateTime.Now };

			// Set default values if lists are loaded
			if (brands.Any())
			{
				newEquipment.brand_id = brands.First().brand_id;
			}
			if (categories.Any())
			{
				newEquipment.category_id = categories.First().category_id;
			}
			if (types.Any())
			{
				newEquipment.type_id = types.First().type_id;
			}
		}
	}

	private void ToggleFilters()
	{
		showFilters = !showFilters;
	}

	private void ClearFilters()
	{
		searchQuery = "";
		modelFilter = "";
		descriptionFilter = "";
		brandFilter = 0;
		categoryFilter = 0;
		typeFilter = 0;
		dateFilter = null;
	}

	private async Task AddNewEquipment()
	{
		try
		{
			newEquipment.CreateDatetime = DateTime.Now;
			var response = await ApiFacade.EquipmentApiService.Create(newEquipment);
			if (response.IsSuccessStatusCode)
			{
				// Add the new equipment to the list
				equipments.Add(response.Content);
				Snackbar.Add("Обладнання успішно додано", MudBlazor.Severity.Success);
				showAddNewForm = false;
			}
			else
			{
				Snackbar.Add($"Не вдалось додати обладнання: {response.Error}", MudBlazor.Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка додавання обладнання: {ex.Message}", MudBlazor.Severity.Error);
		}
	}
}

<style>
	.col-xl-2-4 {
		flex: 0 0 auto;
		width: 20%;
	}

	.fs-7 {
		font-size: 0.85rem !important;
	}
</style>