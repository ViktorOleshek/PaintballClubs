@using Domain.Entities
@using static UI.Components.Pages.SupplyOrders.SupplyOrdersList
@inject Services.ExternalApi.Facade.IApiFacade ApiFacade

<div class="order-details-panel">
    <div class="order-details-header">
        <h4>Order #@Order.SupplyOrderNumber Details</h4>
        <button type="button" class="btn-close" @onclick="OnClose"></button>
    </div>

    <div class="order-details-body">
        <div class="row g-2">
            <!-- First row with 2 cards in one row -->
            <div class="col-md-4">
                <div class="card card-compact mb-2">
                    <div class="card-header bg-info text-white py-1">
                        <h6 class="mb-0">Supplier Information</h6>
                    </div>
                    <div class="card-body p-2">
                        <div class="row g-1">
                            <div class="col-md-12 mb-1">
                                <label class="form-label-sm mb-0">Supplier</label>
                                <select class="form-select form-select-sm" @bind="Order.SupplierId">
                                    @foreach (var supplier in Suppliers)
                                    {
                                        <option value="@supplier.supplier_id">@supplier.name</option>
                                    }
                                </select>
                            </div>
                            @if (selectedSupplier != null)
                            {
                                <div class="col-md-12 mb-1">
                                    <label class="form-label-sm mb-0">Contact</label>
                                    <div class="d-flex">
                                        <span class="badge bg-light text-dark me-1">@selectedSupplier.phone_number</span>
                                        <span class="badge bg-light text-dark">@selectedSupplier.email</span>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <label class="form-label-sm mb-0">Address</label>
                                    <p class="small mb-0 text-muted">@selectedSupplier.address</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card card-compact mb-2">
                    <div class="card-header bg-success text-white py-1">
                        <h6 class="mb-0">Employee Information</h6>
                    </div>
                    <div class="card-body p-2">
                        <div class="row g-1">
                            <div class="col-md-12 mb-1">
                                <label class="form-label-sm mb-0">Employee</label>
                                <select class="form-select form-select-sm" @bind="Order.EmployeeId">
                                    @foreach (var employee in Employees)
                                    {
                                        <option value="@employee.employee_id">@($"{employee.first_name} {employee.last_name}")</option>
                                    }
                                </select>
                            </div>
                            @if (selectedEmployee != null)
                            {
                                <div class="col-md-6 mb-1">
                                    <label class="form-label-sm mb-0">Position</label>
                                    <span class="badge bg-light text-dark">@GetPositionName(selectedEmployee.position_id)</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Product Placements -->
        <div class="card card-compact mb-2">
            <div class="card-header bg-warning text-dark py-1 d-flex justify-content-between align-items-center">
                <h6 class="mb-0">Product Placements</h6>
                <button class="btn btn-sm btn-link p-0 text-dark" type="button" data-bs-toggle="collapse" data-bs-target="#placementCollapse">
                    <i class="bi bi-chevron-down"></i>
                </button>
            </div>
            <div class="collapse" id="placementCollapse">
                <div class="card-body p-2">
                    @if (relatedProductPlacements.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm table-bordered table-compact mb-0">
                                <thead>
                                    <tr>
                                        <th class="small">Date</th>
                                        <th class="small">Qty</th>
                                        <th class="small">Employee</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var placement in relatedProductPlacements)
                                    {
                                        <tr>
                                            <td class="small">@placement.placement_date.ToShortDateString()</td>
                                            <td class="small">@placement.quantity</td>
                                            <td class="small">@GetEmployeeName(placement.employee_id)</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info py-1 mb-0 small">No product placements found for this order.</div>
                    }
                </div>
            </div>
        </div>

        <!-- Supplied Equipment -->
        <div class="card card-compact">
            <div class="card-header bg-secondary text-white py-1 d-flex justify-content-between align-items-center">
                <h6 class="mb-0">Supplied Equipment</h6>
                <button class="btn btn-sm btn-light py-0 px-1" @onclick="AddEquipmentItem">
                    <i class="bi bi-plus-circle"></i> Add
                </button>
            </div>
            <div class="card-body p-2">
                <div class="table-responsive">
                    <table class="table table-sm table-compact mb-0">
                        <thead>
                            <tr>
                                <th style="width: 30%;" class="small">Equipment</th>
                                <th style="width: 15%;" class="small">Category</th>
                                <th style="width: 15%;" class="small">Qty</th>
                                <th style="width: 15%;" class="small">Price</th>
                                <th style="width: 15%;" class="small">Total</th>
                                <th style="width: 10%;" class="small"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Order.SuppliedEquipmentItems)
                            {
                                var equipment = EquipmentList.FirstOrDefault(e => e.equipment_id == item.EquipmentId);
                                <tr>
                                    <td>
                                        <select class="form-select form-select-sm py-0" @bind="item.EquipmentId">
                                            @foreach (var equip in EquipmentList)
                                            {
                                                <option value="@equip.equipment_id">@equip.name</option>
                                            }
                                        </select>
                                    </td>
                                    <td class="small">
                                        @if (equipment != null)
                                        {
                                            @GetCategoryName(equipment.category_id)
                                        }
                                    </td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm py-0" @bind="item.Quantity" min="1" />
                                    </td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm py-0" @bind="item.Price" step="0.01" min="0" />
                                    </td>
                                    <td class="small">@((item.Quantity * item.Price).ToString("C2"))</td>
                                    <td>
                                        <button class="btn btn-sm btn-danger py-0 px-1" @onclick="() => RemoveEquipmentItem(item)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="4" class="text-end fw-bold small">Total Order Amount:</td>
                                <td colspan="2" class="fw-bold small">@Order.SuppliedEquipmentItems.Sum(i => i.Quantity * i.Price).ToString("C2")</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-end mt-2">
            <button class="btn btn-sm btn-secondary me-2" @onclick="OnClose">Cancel</button>
            <button class="btn btn-sm btn-primary" @onclick="SaveChanges">Save Changes</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public SupplyOrderViewModel Order { get; set; } = null!;

    [Parameter]
    public List<Supplier> Suppliers { get; set; } = new();

    [Parameter]
    public List<SupplyOrderStatus> Statuses { get; set; } = new();

    [Parameter]
    public List<Employee> Employees { get; set; } = new();

    [Parameter]
    public List<Equipment> EquipmentList { get; set; } = new();

    [Parameter]
    public List<Domain.Entities.Position> Positions { get; set; } = new();

    [Parameter]
    public List<Category> Categories { get; set; } = new();

    [Parameter]
    public List<ProductPlacement> ProductPlacements { get; set; } = new();

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private Supplier? selectedSupplier => Suppliers.FirstOrDefault(s => s.supplier_id == Order.SupplierId);
    private Employee? selectedEmployee => Employees.FirstOrDefault(e => e.employee_id == Order.EmployeeId);
    private List<ProductPlacement> relatedProductPlacements => ProductPlacements
        .Where(p => Order.SuppliedEquipmentItems.Any(se => se.SuppliedEquipmentId == p.supplied_equipment_id))
        .ToList();

    private string GetPositionName(int positionId)
    {
        return Positions.FirstOrDefault(p => p.position_id == positionId)?.position_name ?? "Unknown";
    }

    private string GetCategoryName(int categoryId)
    {
        return Categories.FirstOrDefault(c => c.category_id == categoryId)?.category_name ?? "Unknown";
    }

    private string GetEmployeeName(int employeeId)
    {
        var employee = Employees.FirstOrDefault(e => e.employee_id == employeeId);
        return employee != null ? $"{employee.first_name} {employee.last_name}" : "Unknown";
    }

    private async Task SaveChanges()
    {
        // Update total amount based on supplied equipment items
        Order.TotalAmount = Order.SuppliedEquipmentItems.Sum(item => item.Quantity * item.Price);

        await OnSave.InvokeAsync();
    }

    private void AddEquipmentItem()
    {
        var newItem = new SuppliedEquipmentViewModel
            {
                SuppliedEquipmentId = 0,
                SupplyOrderId = Order.SupplyOrderId,
                EquipmentId = EquipmentList.FirstOrDefault()?.equipment_id ?? 0,
                EquipmentName = EquipmentList.FirstOrDefault()?.name ?? "",
                Quantity = 1,
                Price = 0
            };

        Order.SuppliedEquipmentItems.Add(newItem);
    }

    private void RemoveEquipmentItem(SuppliedEquipmentViewModel item)
    {
        Order.SuppliedEquipmentItems.Remove(item);
    }
}

<style>
    .order-details-panel {
        background-color: #f8f9fa;
        border: 1px solid #ddd;
        border-radius: 0px 0px 4px 4px;
        padding: 0.75rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .order-details-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
        padding-bottom: 0.25rem;
        border-bottom: 1px solid #dee2e6;
    }

    .order-details-body {
        max-height: 650px;
        overflow-y: auto;
    }

    .card-compact .card-header {
        padding: 0.25rem 0.5rem;
    }

    .card-compact .card-body {
        padding: 0.5rem;
    }

    .form-label-sm {
        font-size: 0.8rem;
        margin-bottom: 0.1rem;
    }

    .table-compact th,
    .table-compact td {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }

    /* Reduce spacing in tables */
    .table-sm td, .table-sm th {
        padding: 0.25rem;
    }

    /* Reduce form control sizes */
    .form-control-sm, .form-select-sm {
        padding: 0.125rem 0.25rem;
        font-size: 0.875rem;
    }
</style>