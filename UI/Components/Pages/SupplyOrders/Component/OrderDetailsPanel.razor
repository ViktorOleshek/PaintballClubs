@using Domain.Constants
@using Domain.Entities
@using static UI.Components.Pages.SupplyOrders.SupplyOrdersList
@inject Services.ExternalApi.Facade.IApiFacade ApiFacade
@inject MudBlazor.ISnackbar Snackbar
@inject IDialogService DialogService

<div class="order-details-panel">
	<div class="order-details-header">
		<h4>Деталі Замовлення #@Order.SupplyOrderNumber</h4>
		<button type="button" class="btn-close position-fixed top-0 end-0 m-3" @onclick="OnClose"></button>
	</div>

	<div class="order-details-body">
		<EditForm Model="@Order" OnValidSubmit="SaveChanges">
			<DataAnnotationsValidator />

			<div class="row g-2">
				<!-- Перший ряд з картками -->
				<div class="col-md-4">
					<div class="card card-compact mb-2">
						<div class="card-header bg-info text-white py-1">
							<h6 class="mb-0">Інформація про постачальника</h6>
						</div>
						<div class="card-body p-2">
							<div class="row g-1">
								<div class="col-md-12 mb-1">
									<label class="form-label-sm mb-0">Постачальник</label>
									<InputSelect class="form-select form-select-sm" @bind-Value="Order.SupplierId">
										@foreach (var supplier in Suppliers)
										{
											<option value="@supplier.supplier_id">@supplier.name</option>
										}
									</InputSelect>
									<ValidationMessage For="@(() => Order.SupplierId)" />
								</div>
								@if (selectedSupplier != null)
								{
									<div class="col-md-12 mb-1">
										<label class="form-label-sm mb-0">Контакти</label>
										<div class="d-flex">
											@if (!string.IsNullOrEmpty(selectedSupplier.phone_number))
											{
												<span class="badge bg-light text-dark me-1">📞 @selectedSupplier.phone_number</span>
											}
											@if (!string.IsNullOrEmpty(selectedSupplier.email))
											{
												<span class="badge bg-light text-dark">✉️ @selectedSupplier.email</span>
											}
										</div>
									</div>
									<div class="col-md-12">
										<label class="form-label-sm mb-0">Адреса</label>
										<p class="small mb-0 text-muted">@(string.IsNullOrEmpty(selectedSupplier.address) ? "Адреса не вказана" : selectedSupplier.address)</p>
									</div>
								}
							</div>
						</div>
					</div>
				</div>

				<div class="col-md-4">
					<div class="card card-compact mb-2">
						<div class="card-header bg-success text-white py-1">
							<h6 class="mb-0">Інформація про співробітника</h6>
						</div>
						<div class="card-body p-2">
							<div class="row g-1">
								<div class="col-md-12 mb-1">
									<label class="form-label-sm mb-0">Співробітник</label>
									<InputSelect class="form-select form-select-sm" @bind-Value="Order.EmployeeId">
										@foreach (var employee in Employees)
										{
											<option value="@employee.employee_id">@($"{employee.first_name} {employee.last_name}")</option>
										}
									</InputSelect>
									<ValidationMessage For="@(() => Order.EmployeeId)" />
								</div>
								@if (selectedEmployee != null)
								{
									<div class="col-md-6 mb-1">
										<label class="form-label-sm mb-0">Посада</label>
										<span class="badge bg-light text-dark">@GetPositionName(selectedEmployee.position_id)</span>
									</div>
									<div class="col-md-12">
										<label class="form-label-sm mb-0">Клуб</label>
										<span class="badge bg-light text-dark">@GetClubName(selectedEmployee.club_id)</span>
									</div>
								}
							</div>
						</div>
					</div>
				</div>
			</div>

			<!-- Об'єднаний розділ обладнання -->
			<div class="card card-compact">
				<div class="card-header bg-secondary text-white py-1 d-flex justify-content-between align-items-center">
					<h6 class="mb-0">Управління обладнанням</h6>
					<div>
						<button type="button" class="btn btn-sm btn-success py-0 px-1 me-1" @onclick="AddPlacementItem"
								disabled="@(tempNewPlacement != null || tempNewItem != null || !availableItemsForPlacement.Any() || IsOrderReadOnly)">
							<i class="bi bi-box-arrow-right"></i> Нове розміщення
						</button>
						<button type="button" class="btn btn-sm btn-light py-0 px-1" @onclick="AddEquipmentItem"
								disabled="@(hasMaxEquipment || tempNewItem != null || tempNewPlacement != null || IsOrderReadOnly)">
							<i class="bi bi-plus-circle"></i> Додати обладнання
						</button>
					</div>
				</div>
				<div class="card-body p-2">
					<!-- Форма нового обладнання -->
					@if (tempNewItem != null)
					{
						<div class="mb-3 border p-2 bg-light">
							<h6 class="small fw-bold">Додати нове обладнання</h6>
							<div class="row g-2">
								<div class="col-md-3">
									<label class="form-label-sm mb-0">Обладнання</label>
									<select class="form-select form-select-sm" @bind="tempNewItem.EquipmentId" @bind:after="UpdateEquipmentDetails">
										<option value="0">-- Оберіть обладнання --</option>
										@foreach (var equip in EquipmentList)
										{
											<option value="@equip.equipment_id">@equip.name</option>
										}
									</select>
								</div>
								<div class="col-md-3">
									<label class="form-label-sm mb-0">Категорія</label>
									<input type="text" class="form-control form-control-sm" value="@GetCategoryName(tempSelectedEquipment?.category_id ?? 0)" disabled />
								</div>
								<div class="col-md-2">
									<label class="form-label-sm mb-0">Тип</label>
									<input type="text" class="form-control form-control-sm" value="@GetTypeName(tempSelectedEquipment?.type_id ?? 0)" disabled />
								</div>
								<div class="col-md-2">
									<label class="form-label-sm mb-0">Бренд</label>
									<input type="text" class="form-control form-control-sm" value="@GetBrandName(tempSelectedEquipment?.brand_id ?? 0)" disabled />
								</div>
								<div class="col-md-1">
									<label class="form-label-sm mb-0">Кількість</label>
									<input type="number" class="form-control form-control-sm" @bind="tempNewItem.Quantity" min="1" />
								</div>
								<div class="col-md-1">
									<label class="form-label-sm mb-0">Ціна</label>
									<input type="number" class="form-control form-control-sm" @bind="tempNewItem.Price" step="0.01" min="0" />
								</div>
							</div>
							<div class="d-flex justify-content-end mt-2">
								<button type="button" class="btn btn-sm btn-danger me-2" @onclick="CancelAddEquipment">
									<i class="bi bi-x"></i> Скасувати
								</button>

								<button type="button" class="btn btn-sm btn-success" @onclick="ConfirmAddEquipment"
										disabled="@(tempNewItem.EquipmentId == 0 || tempNewItem.Quantity <= 0 || tempNewItem.Price <= 0)">
									<i class="bi bi-check"></i> Підтвердити
								</button>
							</div>
						</div>
					}

					<!-- Форма нового розміщення -->
					@if (tempNewPlacement != null)
					{
						<div class="mb-3 border p-2 bg-info bg-opacity-10">
							<h6 class="small fw-bold">Створити нове розміщення</h6>
							<div class="row g-2">
								<div class="col-md-3">
									<label class="form-label-sm mb-0">Обладнання</label>
									<select class="form-select form-select-sm" @bind="tempNewPlacement.SuppliedEquipmentId" @bind:after="UpdatePlacementDetails">
										<option value="0">-- Оберіть обладнання --</option>
										@foreach (var item in availableItemsForPlacement)
										{
											var equipment = EquipmentList.FirstOrDefault(e => e.equipment_id == item.EquipmentId);
											<option value="@item.SuppliedEquipmentId">@item.EquipmentName (@GetRemainingQuantity(item) доступно)</option>
										}
									</select>
								</div>
								<div class="col-md-2">
									<label class="form-label-sm mb-0">Кількість</label>
									<input type="number" class="form-control form-control-sm" @bind="tempNewPlacement.Quantity"
										   min="1" max="@tempMaxPlacementQuantity" />
								</div>
								<div class="col-md-3">
									<label class="form-label-sm mb-0">Клуб</label>
									<select class="form-select form-select-sm" @bind="tempNewPlacement.ClubId">
										<option value="0">-- Оберіть клуб --</option>
										@foreach (var club in Clubs)
										{
											<option value="@club.club_id">@club.name</option>
										}
									</select>
								</div>
								<div class="col-md-3">
									<label class="form-label-sm mb-0">Співробітник</label>
									<select class="form-select form-select-sm" @bind="tempNewPlacement.EmployeeId">
										<option value="0">-- Оберіть співробітника --</option>
										@foreach (var employee in Employees.Where(e => tempNewPlacement.ClubId == 0 || e.club_id == tempNewPlacement.ClubId))
										{
											<option value="@employee.employee_id">@($"{employee.first_name} {employee.last_name}")</option>
										}
									</select>
								</div>
								<div class="col-md-1">
									<label class="form-label-sm mb-0">Дата</label>
									<input type="date" class="form-control form-control-sm" @bind="tempNewPlacement.PlacementDate" />
								</div>
							</div>
							<div class="d-flex justify-content-end mt-2">
								<button type="button" class="btn btn-sm btn-danger me-2" @onclick="CancelAddPlacement">
									<i class="bi bi-x"></i> Скасувати
								</button>
								<button type="button" class="btn btn-sm btn-success" @onclick="ConfirmAddPlacement"
										disabled="@(!IsValidPlacement())">
									<i class="bi bi-check"></i> Підтвердити
								</button>
							</div>
						</div>
					}

					<div class="table-responsive">
						<table class="table table-sm table-compact mb-0">
							<thead>
								<tr>
									<th style="width: 20%;" class="small">Обладнання</th>
									<th style="width: 10%;" class="small">Категорія</th>
									<th style="width: 10%;" class="small">Бренд</th>
									<th style="width: 8%;" class="small">Кількість</th>
									<th style="width: 8%;" class="small">Ціна</th>
									<th style="width: 8%;" class="small">Усього</th>
									<th style="width: 20%;" class="small">Статус розміщення</th>
									<th style="width: 16%;" class="small">Дії</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var item in Order.SuppliedEquipmentItems)
								{
									var equipment = EquipmentList.FirstOrDefault(e => e.equipment_id == item.EquipmentId);
									var placements = relatedProductPlacements.Where(p => p.supplied_equipment_id == item.SuppliedEquipmentId).ToList();
									var placedQty = placements.Sum(p => p.quantity);
									var remainingQty = item.Quantity - placedQty;
									var canDelete = !item.IsExisting || (item.IsExisting && placedQty == 0);
									var canEdit = !item.IsExisting || (item.IsExisting && placedQty == 0);
									var hasPlacement = placements.Any();

									<tr class="@(item.IsExisting ? (hasPlacement ? "table-light" : "") : "")">
										<td>
											<div class="small fw-medium">
												@if (equipment != null)
												{
													@equipment.name
												}
												else
												{
													@item.EquipmentName
												}
											</div>
											<div class="small text-muted">@(equipment?.model ?? "")</div>
										</td>
										<td class="small">
											@if (equipment != null)
											{
												@GetCategoryName(equipment.category_id)
											}
										</td>
										<td class="small">
											@if (equipment != null)
											{
												@GetBrandName(equipment.brand_id)
											}
										</td>
										<td>
											@if (canEdit && !IsOrderReadOnly)
											{
												<InputNumber class="form-control form-control-sm py-0"
															 @bind-Value="item.Quantity"
															 min="1"
															 @onchange="() => ValidatePositiveNumber(item)" />
											}
											else
											{
												<span class="small">@item.Quantity</span>
											}
										</td>
										<td>
											@if (canEdit && !IsOrderReadOnly)
											{
												<InputNumber class="form-control form-control-sm py-0"
															 @bind-Value="item.Price"
															 step="0.01" min="0.01"
															 @onchange="() => ValidatePositivePrice(item)" />
											}
											else
											{
												<span class="small">@item.Price.ToString("C2")</span>
											}
										</td>
										<td class="small">@((item.Quantity * item.Price).ToString("C2"))</td>
										<td class="small">
											@if (item.IsExisting)
											{
												@if (placedQty == 0)
												{
													<span class="badge bg-warning text-dark">Очікується</span>
												}
												else if (placedQty < item.Quantity)
												{
													<div class="d-flex flex-column">
														<span class="badge bg-info">Частково розміщено (@placedQty / @item.Quantity)</span>
														<span class="text-muted small mt-1">Залишилось розмістити: @remainingQty</span>
													</div>
												}
												else
												{
													<span class="badge bg-success">Повністю розміщено (@placedQty / @item.Quantity)</span>
												}
											}
											else
											{
												<span class="badge bg-secondary">Новий</span>
											}
										</td>
										<td>
											<div class="d-flex flex-column gap-1">
												@if (remainingQty > 0 && item.IsExisting && !IsOrderReadOnly)
												{
													<button type="button" class="btn btn-sm btn-success py-0 px-1"
															@onclick="() => InitPlacement(item)" title="Створити розміщення">
														<i class="bi bi-box-arrow-right"></i> Розмістити
													</button>
												}

												@if (item.IsExisting && placements.Any())
												{
													<button type="button" class="btn btn-sm btn-info py-0 px-1"
															@onclick="() => ToggleDetails(item.SuppliedEquipmentId)" title="Переглянути розміщення">
														<i class="bi bi-info-circle"></i> Деталі
													</button>
												}

												@if (canDelete && !IsOrderReadOnly)
												{
													<button type="button" class="btn btn-sm btn-danger py-0 px-1"
															@onclick="() => ConfirmRemoveEquipmentItem(item)" title="Видалити">
														<i class="bi bi-trash"></i> Видалити
													</button>
												}
											</div>
										</td>
									</tr>
									@if (item.IsExisting && placements.Any())
									{
										<tr class="@(IsExpanded(item.SuppliedEquipmentId) ? "d-table-row" : "d-none")">
											<td colspan="8" class="p-0">
												<div class="bg-light p-2 border-top position-relative">
													<button type="button" class="btn-close position-absolute top-0 end-0 mt-1 me-1"
															@onclick="() => ToggleDetails(item.SuppliedEquipmentId)"
															aria-label="Закрити">
													</button>
													<h6 class="small mb-1">Деталі розміщення:</h6>
													<div class="table-responsive">
														<table class="table table-sm mb-0">
															<thead>
																<tr>
																	<th class="small">Дата</th>
																	<th class="small">Кількість</th>
																	<th class="small">Співробітник</th>
																	<th class="small">Клуб</th>
																	<th class="small">Дії</th>
																</tr>
															</thead>
															<tbody>
																@foreach (var placement in placements)
																{
																	var employee = Employees.FirstOrDefault(e => e.employee_id == placement.employee_id);

																	<tr>
																		<td class="small">@placement.placement_date.ToString("yyyy-MM-dd HH:mm")</td>
																		<td class="small">@placement.quantity одиниць</td>
																		<td class="small">@GetEmployeeName(placement.employee_id)</td>
																		<td class="small">
																			@if (employee != null)
																			{
																				@GetClubName(employee.club_id)
																			}
																		</td>
																		<td>
																			@if (!IsOrderReadOnly)
																			{
																				<button type="button" class="btn btn-sm btn-outline-danger py-0 px-1"
																						@onclick="() => ConfirmRemovePlacement(placement)" title="Видалити розміщення">
																					<i class="bi bi-trash"></i> Видалити
																				</button>
																			}
																		</td>
																	</tr>
																}
															</tbody>
														</table>
													</div>
													@if (remainingQty > 0 && !IsOrderReadOnly)
													{
														<div class="mt-1">
															<button type="button" class="btn btn-sm btn-outline-success py-0 px-1"
																	@onclick="() => InitPlacement(item)" title="Додати більше розміщень">
																<i class="bi bi-plus-circle"></i> Додати розміщення (залишилось @remainingQty одиниць)
															</button>
														</div>
													}
												</div>
											</td>
										</tr>
									}
								}
							</tbody>
							<tfoot>
								<tr>
									<td colspan="5" class="text-end fw-bold small">Загальна сума замовлення:</td>
									<td colspan="3" class="fw-bold small">@Order.SuppliedEquipmentItems.Sum(i => i.Quantity * i.Price).ToString("C2")</td>
								</tr>
							</tfoot>
						</table>
					</div>
				</div>
			</div>
		</EditForm>
	</div>

	<!-- Фіксовані кнопки внизу -->
	<div class="position-fixed bottom-0 end-0 p-3 bg-light border-top w-100 d-flex justify-content-end">
		<button type="button" class="btn btn-sm btn-secondary me-2" @onclick="OnClose">Скасувати</button>
		<button type="button" class="btn btn-sm btn-primary" @onclick="SaveChanges">Зберегти зміни</button>
	</div>
</div>

@code {
	[Parameter]
	public string OrderStatus { get; set; } = "";

	// Helper properties
	private bool IsOrderReadOnly => OrderStatus == SupplyOrderStatuses.Cancelled || OrderStatus == SupplyOrderStatuses.Completed;

	// Temporary storage for new placement
	private PlacementViewModel? tempNewPlacement = null;
	private int tempMaxPlacementQuantity = 0;

	// List of supplied equipment items that can be placed
	private List<SuppliedEquipmentViewModel> availableItemsForPlacement =>
		Order.SuppliedEquipmentItems
			.Where(item => item.IsExisting && GetRemainingQuantity(item) > 0)
			.ToList();

	private class PlacementViewModel
	{
		public int PlacementId { get; set; }
		public int SuppliedEquipmentId { get; set; }
		public int AvailableId { get; set; }
		public int EmployeeId { get; set; }
		public int ClubId { get; set; }
		public int Quantity { get; set; }
		public DateTime PlacementDate { get; set; } = DateTime.Today;
	}

	// Track expanded details
	private Dictionary<int, bool> expandedDetails = new();

	private string confirmDeleteMessage = "";
	private Func<Task>? deleteAction;
	[Parameter]
	public SupplyOrderViewModel Order { get; set; } = null!;

	[Parameter]
	public List<Supplier> Suppliers { get; set; } = new();

	[Parameter]
	public List<SupplyOrderStatus> Statuses { get; set; } = new();

	[Parameter]
	public List<Employee> Employees { get; set; } = new();

	[Parameter]
	public List<Equipment> EquipmentList { get; set; } = new();

	[Parameter]
	public List<Domain.Entities.Position> Positions { get; set; } = new();

	[Parameter]
	public List<Category> Categories { get; set; } = new();

	[Parameter]
	public List<ProductPlacement> ProductPlacements { get; set; } = new();

	[Parameter]
	public List<AvailableEquipment> AvailableEquipmentList { get; set; } = new();

	[Parameter]
	public List<Club> Clubs { get; set; } = new();

	[Parameter]
	public List<Domain.Entities.Type> Types { get; set; } = new();

	[Parameter]
	public List<Brand> Brands { get; set; } = new();

	[Parameter]
	public EventCallback OnSave { get; set; }

	[Parameter]
	public EventCallback OnClose { get; set; }

	private Supplier? selectedSupplier => Suppliers.FirstOrDefault(s => s.supplier_id == Order.SupplierId);
	private Employee? selectedEmployee => Employees.FirstOrDefault(e => e.employee_id == Order.EmployeeId);
	private List<ProductPlacement> relatedProductPlacements => ProductPlacements
		.Where(p => Order.SuppliedEquipmentItems.Any(se => se.SuppliedEquipmentId == p.supplied_equipment_id))
		.ToList();

	private bool hasMaxEquipment => Order.SuppliedEquipmentItems.Count(i => !i.IsExisting) >= 5;

	// Temporary storage for new equipment item being added
	private SuppliedEquipmentViewModel? tempNewItem = null;
	private Equipment? tempSelectedEquipment = null;

	private string GetPositionName(int positionId)
	{
		return Positions.FirstOrDefault(p => p.position_id == positionId)?.position_name ?? "Невідомо";
	}

	private string GetCategoryName(int categoryId)
	{
		return Categories.FirstOrDefault(c => c.category_id == categoryId)?.category_name ?? "Невідомо";
	}

	private string GetBrandName(int brandId)
	{
		return Brands.FirstOrDefault(b => b.brand_id == brandId)?.brand_name ?? "Невідомо";
	}

	private string GetTypeName(int typeId)
	{
		return Types.FirstOrDefault(t => t.type_id == typeId)?.type_name ?? "Невідомо";
	}

	private string GetClubName(int clubId)
	{
		return Clubs.FirstOrDefault(c => c.club_id == clubId)?.name ?? "Невідомо";
	}

	private string GetEmployeeName(int employeeId)
	{
		var employee = Employees.FirstOrDefault(e => e.employee_id == employeeId);
		return employee != null ? $"{employee.first_name} {employee.last_name}" : "Невідомо";
	}

	private int GetEmployeeClubId(int employeeId)
	{
		var employee = Employees.FirstOrDefault(e => e.employee_id == employeeId);
		return employee?.club_id ?? 0;
	}

	private async Task SaveChanges()
	{
		try
		{
			// Validate that all new equipment items have equipment selected
			foreach (var item in Order.SuppliedEquipmentItems.Where(i => !i.IsExisting))
			{
				if (item.EquipmentId <= 0)
				{
					Snackbar.Add("Будь ласка, виберіть обладнання для всіх нових товарів", MudBlazor.Severity.Warning);
					return;
				}

				if (item.Quantity <= 0 || item.Price < 0)
				{
					Snackbar.Add("Кількість обладнання має бути додатною, а ціна – невід’ємною", MudBlazor.Severity.Warning);
					return;
				}
			}

			// Update total amount based on supplied equipment items
			Order.TotalAmount = Order.SuppliedEquipmentItems.Sum(item => item.Quantity * item.Price);

			await OnSave.InvokeAsync();
			Snackbar.Add("Дані замовлення успішно збережено", MudBlazor.Severity.Success);
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка збереження змін", MudBlazor.Severity.Error);
		}
	}

	private void AddEquipmentItem()
	{
		if (hasMaxEquipment)
		{
			Snackbar.Add("Ви можете додати максимум 5 нових предметів спорядження одночасно", MudBlazor.Severity.Warning);
			return;
		}

		// Initialize temporary item with default values
		tempNewItem = new SuppliedEquipmentViewModel
			{
				SuppliedEquipmentId = 0,
				SupplyOrderId = Order.SupplyOrderId,
				EquipmentId = 0,  // No selection by default
				Quantity = 1,
				Price = 0
			};
	}

	private void UpdateEquipmentDetails()
	{
		if (tempNewItem != null && tempNewItem.EquipmentId > 0)
		{
			tempSelectedEquipment = EquipmentList.FirstOrDefault(e => e.equipment_id == tempNewItem.EquipmentId);
			if (tempSelectedEquipment != null)
			{
				tempNewItem.EquipmentName = tempSelectedEquipment.name;
			}
		}
		else
		{
			tempSelectedEquipment = null;
		}
	}

	private void ConfirmAddEquipment()
	{
		if (tempNewItem != null && tempNewItem.EquipmentId > 0 && tempNewItem.Quantity > 0)
		{
			Order.SuppliedEquipmentItems.Add(tempNewItem);
			tempNewItem = null;
			tempSelectedEquipment = null;
		}
		else
		{
			Snackbar.Add("Будь ласка, виберіть обладнання та вкажіть кількість", MudBlazor.Severity.Warning);
		}
	}

	private void CancelAddEquipment()
	{
		tempNewItem = null;
		tempSelectedEquipment = null;
	}

	private async Task RemoveEquipmentItem(SuppliedEquipmentViewModel item)
	{
		if (IsOrderReadOnly)
		{
			Snackbar.Add("Замовлення виконано або скасовано і не може бути змінено", MudBlazor.Severity.Warning);
			return;
		}

		// Check if item can be removed (not existing or no placements)
		var placements = relatedProductPlacements.Where(p => p.supplied_equipment_id == item.SuppliedEquipmentId).ToList();

		if (!item.IsExisting || (item.IsExisting && !placements.Any()))
		{
			Order.SuppliedEquipmentItems.Remove(item);
			Snackbar.Add("Обладнання успішно вилучено", MudBlazor.Severity.Success);
		}
		else
		{
			Snackbar.Add("Не можна знімати обладнання, яке було розміщено", MudBlazor.Severity.Error);
		}
	}


	private void ToggleDetails(int suppliedEquipmentId)
	{
		if (expandedDetails.ContainsKey(suppliedEquipmentId))
			expandedDetails[suppliedEquipmentId] = !expandedDetails[suppliedEquipmentId];
		else
			expandedDetails[suppliedEquipmentId] = true;
	}

	private void ValidatePositiveNumber(SuppliedEquipmentViewModel item)
	{
		if (item.Quantity <= 0)
		{
			item.Quantity = 1;
			Snackbar.Add("Кількість має бути більшою за 0", MudBlazor.Severity.Warning);
		}
	}

	private void ValidatePositivePrice(SuppliedEquipmentViewModel item)
	{
		if (item.Price <= 0)
		{
			item.Price = 0.01m;
			Snackbar.Add("Ціна має бути більшою за 0", MudBlazor.Severity.Warning);
		}
	}

	private bool IsExpanded(int suppliedEquipmentId)
	{
		return expandedDetails.ContainsKey(suppliedEquipmentId) && expandedDetails[suppliedEquipmentId];
	}

	private int GetRemainingQuantity(SuppliedEquipmentViewModel item)
	{
		var placements = relatedProductPlacements.Where(p => p.supplied_equipment_id == item.SuppliedEquipmentId).ToList();
		var placedQty = placements.Sum(p => p.quantity);
		return item.Quantity - placedQty;
	}

	private async Task ConfirmRemoveEquipmentItem(SuppliedEquipmentViewModel item)
	{
		if (IsOrderReadOnly)
		{
			Snackbar.Add("Замовлення виконано або скасовано і не може бути змінено", MudBlazor.Severity.Warning);
			return;
		}

		// Check if item can be removed (not existing or no placements)
		var placements = relatedProductPlacements.Where(p => p.supplied_equipment_id == item.SuppliedEquipmentId).ToList();

		if (!item.IsExisting || (item.IsExisting && !placements.Any()))
		{
			// Display confirmation dialog without JavaScript
			var result = await DialogService.ShowMessageBox(
				"Підтвердження видалення",
				$"Ви впевнені, що хочете видалити {item.EquipmentName} з цього замовлення?",
				yesText: "Так",
				noText: "Ні");

			if (result == true)
			{
				await RemoveEquipmentItem(item);
			}
		}
		else
		{
			Snackbar.Add("Не можна знімати обладнання, яке було розміщено", MudBlazor.Severity.Error);
		}
	}

	private async Task ExecuteDelete()
	{
		if (deleteAction != null)
		{
			await deleteAction();
			deleteAction = null;
		}
	}

	// Placement management methods
	private void AddPlacementItem()
	{
		if (IsOrderReadOnly)
		{
			Snackbar.Add("Замовлення виконано або скасовано і не може бути змінено", MudBlazor.Severity.Warning);
			return;
		}

		if (!availableItemsForPlacement.Any())
		{
			Snackbar.Add("Немає обладнання для розміщення", MudBlazor.Severity.Warning);
			return;
		}

		tempNewPlacement = new PlacementViewModel
			{
				PlacementId = 0,
				SuppliedEquipmentId = 0,
				ClubId = 0,
				EmployeeId = 0,
				Quantity = 1,
				PlacementDate = DateTime.Today
			};
	}

	private void InitPlacement(SuppliedEquipmentViewModel item)
	{
		if (IsOrderReadOnly)
		{
			Snackbar.Add("Замовлення виконано або скасовано і не може бути змінено", MudBlazor.Severity.Warning);
			return;
		}

		var remainingQty = GetRemainingQuantity(item);
		if (remainingQty <= 0)
		{
			Snackbar.Add("Немає залишків для розміщення", MudBlazor.Severity.Warning);
			return;
		}

		tempNewPlacement = new PlacementViewModel
			{
				PlacementId = 0,
				SuppliedEquipmentId = item.SuppliedEquipmentId,
				ClubId = 0,
				EmployeeId = 0,
				Quantity = 1,
				PlacementDate = DateTime.Today
			};

		UpdatePlacementDetails();
	}

	private void UpdatePlacementDetails()
	{
		if (tempNewPlacement != null && tempNewPlacement.SuppliedEquipmentId > 0)
		{
			var selectedItem = Order.SuppliedEquipmentItems.FirstOrDefault(se => se.SuppliedEquipmentId == tempNewPlacement.SuppliedEquipmentId);
			if (selectedItem != null)
			{
				tempMaxPlacementQuantity = GetRemainingQuantity(selectedItem);
				if (tempNewPlacement.Quantity > tempMaxPlacementQuantity)
				{
					tempNewPlacement.Quantity = tempMaxPlacementQuantity > 0 ? tempMaxPlacementQuantity : 1;
				}
			}
		}
	}

	private bool IsValidPlacement()
	{
		if (tempNewPlacement == null) return false;

		return tempNewPlacement.SuppliedEquipmentId > 0 &&
						tempNewPlacement.ClubId > 0 &&
						tempNewPlacement.EmployeeId > 0 &&
						tempNewPlacement.Quantity > 0 &&
						tempNewPlacement.Quantity <= tempMaxPlacementQuantity &&
						tempNewPlacement.PlacementDate != default;
	}

	private async Task ConfirmAddPlacement()
	{
		if (IsOrderReadOnly)
		{
			Snackbar.Add("Замовлення виконано або скасовано і не може бути змінено", MudBlazor.Severity.Warning);
			return;
		}
		if (!IsValidPlacement())
		{
			Snackbar.Add("Будь ласка, заповніть усі обов'язкові поля розміщення", MudBlazor.Severity.Warning);
			return;
		}
		try
		{
			// Get the item we're placing
			var suppliedItem = Order.SuppliedEquipmentItems
				.FirstOrDefault(se => se.SuppliedEquipmentId == tempNewPlacement.SuppliedEquipmentId);
			if (suppliedItem == null)
			{
				Snackbar.Add("Поставлене обладнання не знайдено", MudBlazor.Severity.Error);
				return;
			}

			// ВАЖНО: Получаем или создаем запись AvailableEquipment только один раз
			int availableId = await CreateOrGetAvailableEquipment(tempNewPlacement);

			// Проверим, не существует ли уже такое размещение
			bool placementExists = ProductPlacements.Any(p =>
				p.supplied_equipment_id == tempNewPlacement.SuppliedEquipmentId &&
				p.available_id == availableId &&
				p.placement_date == tempNewPlacement.PlacementDate &&
				p.quantity == tempNewPlacement.Quantity &&
				p.employee_id == tempNewPlacement.EmployeeId);

			if (placementExists)
			{
				Snackbar.Add("Це місце розташування вже існує", MudBlazor.Severity.Warning);
				tempNewPlacement = null;
				return;
			}

			// Create a new ProductPlacement entity
			var newPlacement = new ProductPlacement
				{
					placement_id = 0, // Will be assigned by database
					placement_date = tempNewPlacement.PlacementDate,
					quantity = tempNewPlacement.Quantity,
					employee_id = tempNewPlacement.EmployeeId,
					supplied_equipment_id = tempNewPlacement.SuppliedEquipmentId,
					available_id = availableId, // Используем полученный available_id
												// Добавляем поля для отслеживания создания и обновления
					CreateDatetime = DateTime.Now,
					UpdateDatetime = DateTime.Now
				};

			// Add to the list только если это новое размещение
			// Добавляем в локальный список только если мы еще не добавили его
			if (!ProductPlacements.Any(p => p.placement_id == 0 &&
											p.supplied_equipment_id == newPlacement.supplied_equipment_id &&
											p.available_id == newPlacement.available_id))
			{
				ProductPlacements.Add(newPlacement);
			}

			// Also add to the item's placements collection for tracking
			var newPlacementViewModel = new UI.Components.Pages.SupplyOrders.SupplyOrdersList.PlacementViewModel
				{
					PlacementId = 0, // Will be assigned after save
					PlacementDate = tempNewPlacement.PlacementDate,
					Quantity = tempNewPlacement.Quantity,
					EmployeeId = tempNewPlacement.EmployeeId,
					ClubId = tempNewPlacement.ClubId,
					ClubName = GetClubName(tempNewPlacement.ClubId),
					EmployeeName = GetEmployeeName(tempNewPlacement.EmployeeId),
					AvailableId = availableId,
					IsExisting = false // Will be set to true after save
				};

			// Добавляем к визуальной модели только если такого размещения еще нет
			if (suppliedItem.Placements == null)
				suppliedItem.Placements = new List<UI.Components.Pages.SupplyOrders.SupplyOrdersList.PlacementViewModel>();

			if (!suppliedItem.Placements.Any(p =>
				p.EmployeeId == newPlacementViewModel.EmployeeId &&
				p.ClubId == newPlacementViewModel.ClubId &&
				p.Quantity == newPlacementViewModel.Quantity &&
				p.PlacementDate == newPlacementViewModel.PlacementDate))
			{
				suppliedItem.Placements.Add(newPlacementViewModel);
			}

			tempNewPlacement = null;
			Snackbar.Add("Розміщення успішно створено", MudBlazor.Severity.Success);
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка розміщення обладнання", MudBlazor.Severity.Error);
		}
	}
	private async Task<int> CreateOrGetAvailableEquipment(PlacementViewModel placement)
	{
		if (placement == null)
			throw new ArgumentNullException(nameof(placement));

		// Находим поставленное оборудование, чтобы узнать какой equipment_id использовать
		var suppliedEquipment = Order.SuppliedEquipmentItems
			.FirstOrDefault(se => se.SuppliedEquipmentId == placement.SuppliedEquipmentId);

		if (suppliedEquipment == null)
			throw new InvalidOperationException("Supplied equipment not found");

		// Поиск существующей записи available_equipment для данного equipment_id и club_id
		var existingAvailable = AvailableEquipmentList
			.FirstOrDefault(ae => ae.equipment_id == suppliedEquipment.EquipmentId && ae.club_id == placement.ClubId);

		// Если запись уже существует
		if (existingAvailable != null)
		{
			// Обновляем количество
			existingAvailable.available_quantity += placement.Quantity;

			try
			{
				// Обновляем запись
				var response = await ApiFacade.AvailableEquipmentApiService.Update(existingAvailable.available_id, existingAvailable);
				if (!response.IsSuccessStatusCode)
				{
					throw new Exception($"Failed to update available equipment: {response.StatusCode}");
				}
				return existingAvailable.available_id;
			}
			catch (Exception ex)
			{
				Snackbar.Add($"Error updating available equipment: {ex.Message}", MudBlazor.Severity.Error);
				throw;
			}
		}
		else
		{
			// Создаем новую запись available_equipment
			var newAvailable = new AvailableEquipment
				{
					equipment_id = suppliedEquipment.EquipmentId,
					club_id = placement.ClubId,
					available_quantity = placement.Quantity,
					rental_price = suppliedEquipment.Price * 1.5m, // Наценка для аренды
					CreateDatetime = DateTime.Now,
					UpdateDatetime = DateTime.Now
				};

			try
			{
				// Добавляем новую запись
				var response = await ApiFacade.AvailableEquipmentApiService.Create(newAvailable);
				if (!response.IsSuccessStatusCode || response.Content == null)
				{
					throw new Exception($"Failed to create available equipment: {response.StatusCode}");
				}

				// Добавляем в локальный кэш
				AvailableEquipmentList.Add(response.Content);
				return response.Content.available_id;
			}
			catch (Exception ex)
			{
				Snackbar.Add($"Error creating available equipment: {ex.Message}", MudBlazor.Severity.Error);
				throw;
			}
		}
	}
	private void CancelAddPlacement()
	{
		tempNewPlacement = null;
		tempMaxPlacementQuantity = 0;
	}

	private async Task ConfirmRemovePlacement(ProductPlacement placement)
	{
		var availableEquipment = AvailableEquipmentList
			.FirstOrDefault(ae => ae.available_id == placement.available_id);

		var equipment = EquipmentList
			.FirstOrDefault(e => e.equipment_id == availableEquipment?.equipment_id);

		if (equipment != null)
		{
			var result = await DialogService.ShowMessageBox(
				"Підтвердження видалення",
				$"Ви впевнені, що хочете видалити це місце розташування для {equipment.name}?",
				yesText: "Так",
				noText: "Ні");

			if (result == true)
			{
				await RemovePlacement(placement);
			}
		}
		else
		{
			Snackbar.Add("Обладнання для цього розміщення не знайдено.", MudBlazor.Severity.Error);
		}
	}
	private async Task RemovePlacement(ProductPlacement placement)
	{
		try
		{
			// Знаходимо відповідне доступне обладнання
			var availableEquipment = AvailableEquipmentList
				.FirstOrDefault(ae => ae.available_id == placement.available_id);

			if (availableEquipment != null)
			{
				// Зменшуємо кількість
				availableEquipment.available_quantity -= placement.quantity;

				// Оновлюємо запис в базі даних
				if (availableEquipment.available_quantity > 0)
				{
					var updateResponse = await ApiFacade.AvailableEquipmentApiService.Update(
						availableEquipment.available_id, availableEquipment);

					if (!updateResponse.IsSuccessStatusCode)
					{
						Snackbar.Add("Не вдалося оновити доступне обладнання.", MudBlazor.Severity.Error);
						return;
					}
				}
				else
				{
					// Якщо кількість стала нульовою або від'ємною, видаляємо запис
					var deleteResponse = await ApiFacade.AvailableEquipmentApiService.Delete(
						availableEquipment.available_id);

					if (!deleteResponse.IsSuccessStatusCode)
					{
						Snackbar.Add("Не вдалося видалити запис доступного обладнання.", MudBlazor.Severity.Error);
						return;
					}

					// Видаляємо з локальної колекції
					AvailableEquipmentList.Remove(availableEquipment);
				}
			}

			// Видаляємо розміщення з бази даних
			if (placement.placement_id > 0)
			{
				var deletePlacementResponse = await ApiFacade.ProductPlacementApiService.Delete(placement.placement_id);

				if (!deletePlacementResponse.IsSuccessStatusCode)
				{
					Snackbar.Add("Не вдалося видалити розміщення.", MudBlazor.Severity.Error);
					return;
				}
			}

			// Оновлюємо локальні колекції
			var suppliedItem = Order.SuppliedEquipmentItems
				.FirstOrDefault(se => se.SuppliedEquipmentId == placement.supplied_equipment_id);

			if (suppliedItem != null && suppliedItem.Placements != null)
			{
				var placementViewModel = suppliedItem.Placements
					.FirstOrDefault(p => p.PlacementId == placement.placement_id);

				if (placementViewModel != null)
				{
					suppliedItem.Placements.Remove(placementViewModel);
				}
			}

			// Видаляємо розміщення з локальної колекції
			ProductPlacements.Remove(placement);

			await OnSave.InvokeAsync();
			Snackbar.Add("Розміщення успішно видалено", MudBlazor.Severity.Success);
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка при видаленні розміщення: {ex.Message}", MudBlazor.Severity.Error);
		}
	}
}

<style>
	.order-details-panel {
		background-color: #f8f9fa;
		border: 1px solid #ddd;
		border-radius: 0px 0px 4px 4px;
		padding: 0.75rem;
		box-shadow: 0 2px 4px rgba(0,0,0,0.1);
		margin-bottom: 60px; /* Space for fixed button bar */
	}

	.order-details-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 0.5rem;
		padding-bottom: 0.25rem;
		border-bottom: 1px solid #dee2e6;
	}

	.order-details-body {
		max-height: 650px;
		overflow-y: auto;
		padding-bottom: 20px;
	}

	.card-compact .card-header {
		padding: 0.25rem 0.5rem;
	}

	.card-compact .card-body {
		padding: 0.5rem;
	}

	.form-label-sm {
		font-size: 0.8rem;
		margin-bottom: 0.1rem;
	}

	.table-compact th,
	.table-compact td {
		padding: 0.25rem 0.5rem;
		font-size: 0.875rem;
	}

	/* Reduce spacing in tables */
	.table-sm td, .table-sm th {
		padding: 0.25rem;
	}

	/* Reduce form control sizes */
	.form-control-sm, .form-select-sm {
		padding: 0.125rem 0.25rem;
		font-size: 0.875rem;
	}
</style>