@using Domain.Entities
@using MudBlazor
@inherits OwningComponentBase

<MudGrid>
	<MudItem xs="12" sm="6" md="3">
		<MudTextField @bind-Value="SearchQuery"
					  Label="Пошук"
					  Icon="@Icons.Material.Filled.Search"
					  Immediate="true" />
	</MudItem>
	<MudItem xs="12" sm="6" md="3">
		<MudSelect T="int" @bind-Value="StatusFilter" Label="Статус">
			<MudSelectItem T="int" Value="0">Усі</MudSelectItem>
			@foreach (var status in Statuses)
			{
				<MudSelectItem T="int" Value="@status.status_id">@status.status_name</MudSelectItem>
			}
		</MudSelect>
	</MudItem>
	<MudItem xs="12" sm="6" md="3">
		<MudSelect T="int" @bind-Value="SupplierFilter" Label="Постачальник">
			<MudSelectItem T="int" Value="0">Усі</MudSelectItem>
			@foreach (var supplier in Suppliers)
			{
				<MudSelectItem T="int" Value="@supplier.supplier_id">@supplier.name</MudSelectItem>
			}
		</MudSelect>
	</MudItem>
	<MudItem xs="12" sm="6" md="3">
		<MudSelect T="int" @bind-Value="EmployeeFilter" Label="Співробітник">
			<MudSelectItem T="int" Value="0">Усі</MudSelectItem>
			@foreach (var employee in Employees)
			{
				<MudSelectItem T="int" Value="@employee.employee_id">@employee.first_name @employee.last_name</MudSelectItem>
			}
		</MudSelect>
	</MudItem>
	<MudItem xs="12" sm="6" md="3">
		<MudDatePicker @bind-Date="DateFromFilter" Label="Дата з" />
	</MudItem>
	<MudItem xs="12" sm="6" md="3">
		<MudDatePicker @bind-Date="DateToFilter" Label="Дата по" />
	</MudItem>
</MudGrid>

@code {
	[Parameter]
	public string SearchQuery
	{
		get => _searchQuery;
		set
		{
			if (_searchQuery != value)
			{
				_searchQuery = value;
				OnSearchChanged.InvokeAsync(value);
			}
		}
	}
	private string _searchQuery;

	[Parameter]
	public int StatusFilter
	{
		get => _statusFilter;
		set
		{
			if (_statusFilter != value)
			{
				_statusFilter = value;
				OnStatusFilterChanged.InvokeAsync(value);
			}
		}
	}
	private int _statusFilter;

	[Parameter]
	public int SupplierFilter
	{
		get => _supplierFilter;
		set
		{
			if (_supplierFilter != value)
			{
				_supplierFilter = value;
				OnSupplierFilterChanged.InvokeAsync(value);
			}
		}
	}
	private int _supplierFilter;

	[Parameter]
	public int EmployeeFilter
	{
		get => _employeeFilter;
		set
		{
			if (_employeeFilter != value)
			{
				_employeeFilter = value;
				OnEmployeeFilterChanged.InvokeAsync(value);
			}
		}
	}
	private int _employeeFilter;

	[Parameter]
	public DateTime? DateFromFilter
	{
		get => _dateFromFilter;
		set
		{
			if (_dateFromFilter != value)
			{
				_dateFromFilter = value;
				OnDateFromFilterChanged.InvokeAsync(value);
			}
		}
	}
	private DateTime? _dateFromFilter;

	[Parameter]
	public DateTime? DateToFilter
	{
		get => _dateToFilter;
		set
		{
			if (_dateToFilter != value)
			{
				_dateToFilter = value;
				OnDateToFilterChanged.InvokeAsync(value);
			}
		}
	}
	private DateTime? _dateToFilter;

	[Parameter] public EventCallback<string> OnSearchChanged { get; set; }
	[Parameter] public EventCallback<int> OnStatusFilterChanged { get; set; }
	[Parameter] public EventCallback<int> OnSupplierFilterChanged { get; set; }
	[Parameter] public EventCallback<int> OnEmployeeFilterChanged { get; set; }
	[Parameter] public EventCallback<DateTime?> OnDateFromFilterChanged { get; set; }
	[Parameter] public EventCallback<DateTime?> OnDateToFilterChanged { get; set; }

	[Parameter] public List<Supplier> Suppliers { get; set; }
	[Parameter] public List<SupplyOrderStatus> Statuses { get; set; }
	[Parameter] public List<Employee> Employees { get; set; }
}