<div class="d-flex justify-content-between align-items-center mt-3">
    <div>
        <span>Показано від @((CurrentPage - 1) * PageSize + 1) до @Math.Min(CurrentPage * PageSize, TotalItems) з @TotalItems записів</span>
    </div>
    <div>
        <select class="form-select form-select-sm d-inline-block me-2" style="width: auto;" @bind="selectedPageSize">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="25">25</option>
            <option value="50">50</option>
            <option value="50">100</option>
        </select>
        <ul class="pagination pagination-sm d-inline-flex mb-0">
            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => OnPageClicked(1)" disabled="@(CurrentPage == 1)">Перша</button>
            </li>
            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => OnPageClicked(CurrentPage - 1)" disabled="@(CurrentPage == 1)">Попередня</button>
            </li>

            @for (int i = Math.Max(1, CurrentPage - 2); i <= Math.Min(TotalPages, CurrentPage + 2); i++)
            {
                int pageNumber = i;
                <li class="page-item @(CurrentPage == pageNumber ? "active" : "")">
                    <button class="page-link" @onclick="() => OnPageClicked(pageNumber)">@pageNumber</button>
                </li>
            }

            <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => OnPageClicked(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">Наступна</button>
            </li>
            <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => OnPageClicked(TotalPages)" disabled="@(CurrentPage == TotalPages)">Остання</button>
            </li>
        </ul>
    </div>
</div>

@code {
    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public int PageSize { get; set; } = 10;

    [Parameter]
    public int TotalItems { get; set; }

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    [Parameter]
    public EventCallback<int> OnPageSizeChanged { get; set; }

    private int selectedPageSize
    {
        get => PageSize;
        set
        {
            if (PageSize != value)
            {
                PageSize = value;
                OnPageSizeChanged.InvokeAsync(value);
            }
        }
    }

    private async Task OnPageClicked(int page)
    {
        if (page < 1 || page > TotalPages)
            return;

        CurrentPage = page;
        await OnPageChanged.InvokeAsync(page);
    }
}