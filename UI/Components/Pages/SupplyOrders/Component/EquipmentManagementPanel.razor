@* @using Domain.Entities
@using Domain.Constants
@using static UI.Components.Pages.SupplyOrders.SupplyOrdersList
@inject MudBlazor.ISnackbar Snackbar
@inject IDialogService DialogService


<div class="card card-compact">
	<div class="card-header bg-secondary text-white py-1 d-flex justify-content-between align-items-center">
		<h6 class="mb-0">Equipment Management</h6>
		<div>
			<button type="button" class="btn btn-sm btn-success py-0 px-1 me-1" @onclick="AddPlacementItem"
					disabled="@(tempNewPlacement != null || tempNewItem != null || !availableItemsForPlacement.Any() || IsOrderReadOnly)">
				<i class="bi bi-box-arrow-right"></i> New Placement
			</button>
			<button type="button" class="btn btn-sm btn-light py-0 px-1" @onclick="AddEquipmentItem"
					disabled="@(hasMaxEquipment || tempNewItem != null || tempNewPlacement != null || IsOrderReadOnly)">
				<i class="bi bi-plus-circle"></i> Add Equipment
			</button>
		</div>
	</div>
	<div class="card-body p-2">
		<!-- New Equipment Form -->
		@if (tempNewItem != null)
		{
			<div class="mb-3 border p-2 bg-light">
				<h6 class="small fw-bold">Add New Equipment</h6>
				<div class="row g-2">
					<div class="col-md-3">
						<label class="form-label-sm mb-0">Equipment</label>
						<select class="form-select form-select-sm" @bind="tempNewItem.EquipmentId" @bind:after="UpdateEquipmentDetails">
							<option value="0">-- Select Equipment --</option>
							@foreach (var equip in EquipmentList)
							{
								<option value="@equip.equipment_id">@equip.name</option>
							}
						</select>
					</div>
					<div class="col-md-3">
						<label class="form-label-sm mb-0">Category</label>
						<input type="text" class="form-control form-control-sm" value="@GetCategoryName(tempSelectedEquipment?.category_id ?? 0)" disabled />
					</div>
					<div class="col-md-2">
						<label class="form-label-sm mb-0">Type</label>
						<input type="text" class="form-control form-control-sm" value="@GetTypeName(tempSelectedEquipment?.type_id ?? 0)" disabled />
					</div>
					<div class="col-md-2">
						<label class="form-label-sm mb-0">Brand</label>
						<input type="text" class="form-control form-control-sm" value="@GetBrandName(tempSelectedEquipment?.brand_id ?? 0)" disabled />
					</div>
					<div class="col-md-1">
						<label class="form-label-sm mb-0">Quantity</label>
						<input type="number" class="form-control form-control-sm" @bind="tempNewItem.Quantity" min="1" />
					</div>
					<div class="col-md-1">
						<label class="form-label-sm mb-0">Price</label>
						<input type="number" class="form-control form-control-sm" @bind="tempNewItem.Price" step="0.01" min="0" />
					</div>
				</div>
				<div class="d-flex justify-content-end mt-2">
					<button type="button" class="btn btn-sm btn-danger me-2" @onclick="CancelAddEquipment">
						<i class="bi bi-x"></i> Cancel
					</button>

					<button type="button" class="btn btn-sm btn-success" @onclick="ConfirmAddEquipment"
							disabled="@(tempNewItem.EquipmentId == 0 || tempNewItem.Quantity <= 0 || tempNewItem.Price <= 0)">
						<i class="bi bi-check"></i> Confirm
					</button>
				</div>
			</div>
		}

		<!-- New Placement Form -->
		@if (tempNewPlacement != null)
		{
			<div class="mb-3 border p-2 bg-info bg-opacity-10">
				<h6 class="small fw-bold">Create New Placement</h6>
				<div class="row g-2">
					<div class="col-md-3">
						<label class="form-label-sm mb-0">Equipment</label>
						<select class="form-select form-select-sm" @bind="tempNewPlacement.SuppliedEquipmentId" @bind:after="UpdatePlacementDetails">
							<option value="0">-- Select Equipment --</option>
							@foreach (var item in availableItemsForPlacement)
							{
								var equipment = EquipmentList.FirstOrDefault(e => e.equipment_id == item.EquipmentId);
								<option value="@item.SuppliedEquipmentId">@item.EquipmentName (@GetRemainingQuantity(item) available)</option>
							}
						</select>
					</div>
					<div class="col-md-2">
						<label class="form-label-sm mb-0">Quantity</label>
						<input type="number" class="form-control form-control-sm" @bind="tempNewPlacement.Quantity"
							   min="1" max="@tempMaxPlacementQuantity" />
					</div>
					<div class="col-md-3">
						<label class="form-label-sm mb-0">Club</label>
						<select class="form-select form-select-sm" @bind="tempNewPlacement.ClubId">
							<option value="0">-- Select Club --</option>
							@foreach (var club in Clubs)
							{
								<option value="@club.club_id">@club.name</option>
							}
						</select>
					</div>
					<div class="col-md-3">
						<label class="form-label-sm mb-0">Employee</label>
						<select class="form-select form-select-sm" @bind="tempNewPlacement.EmployeeId">
							<option value="0">-- Select Employee --</option>
							@foreach (var employee in Employees.Where(e => tempNewPlacement.ClubId == 0 || e.club_id == tempNewPlacement.ClubId))
							{
								<option value="@employee.employee_id">@($"{employee.first_name} {employee.last_name}")</option>
							}
						</select>
					</div>
					<div class="col-md-1">
						<label class="form-label-sm mb-0">Date</label>
						<input type="date" class="form-control form-control-sm" @bind="tempNewPlacement.PlacementDate" />
					</div>
				</div>
				<div class="d-flex justify-content-end mt-2">
					<button type="button" class="btn btn-sm btn-danger me-2" @onclick="CancelAddPlacement">
						<i class="bi bi-x"></i> Cancel
					</button>
					<button type="button" class="btn btn-sm btn-success" @onclick="ConfirmAddPlacement"
							disabled="@(!IsValidPlacement())">
						<i class="bi bi-check"></i> Confirm
					</button>
				</div>
			</div>
		}

		<div class="table-responsive">
			<table class="table table-sm table-compact mb-0">
				<thead>
					<tr>
						<th style="width: 20%;" class="small">Equipment</th>
						<th style="width: 10%;" class="small">Category</th>
						<th style="width: 10%;" class="small">Brand</th>
						<th style="width: 8%;" class="small">Quantity</th>
						<th style="width: 8%;" class="small">Price</th>
						<th style="width: 8%;" class="small">Total</th>
						<th style="width: 20%;" class="small">Placement Status</th>
						<th style="width: 16%;" class="small">Actions</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in Order.SuppliedEquipmentItems)
					{
						var equipment = EquipmentList.FirstOrDefault(e => e.equipment_id == item.EquipmentId);
						var placements = relatedProductPlacements.Where(p => p.supplied_equipment_id == item.SuppliedEquipmentId).ToList();
						var placedQty = placements.Sum(p => p.quantity);
						var remainingQty = item.Quantity - placedQty;
						var canDelete = !item.IsExisting || (item.IsExisting && placedQty == 0);
						var canEdit = !item.IsExisting || (item.IsExisting && placedQty == 0);
						var hasPlacement = placements.Any();

						<tr class="@(item.IsExisting ? (hasPlacement ? "table-light" : "") : "")">
							<td>
								<div class="small fw-medium">
									@if (equipment != null)
									{
										@equipment.name
									}
									else
									{
										@item.EquipmentName
									}
								</div>
								<div class="small text-muted">@(equipment?.model ?? "")</div>
							</td>
							<td class="small">
								@if (equipment != null)
								{
									@GetCategoryName(equipment.category_id)
								}
							</td>
							<td class="small">
								@if (equipment != null)
								{
									@GetBrandName(equipment.brand_id)
								}
							</td>
							<td>
								@if (canEdit && !IsOrderReadOnly)
								{
									<InputNumber class="form-control form-control-sm py-0"
												 @bind-Value="item.Quantity"
												 min="1"
												 @onchange="() => ValidatePositiveNumber(item)" />
								}
								else
								{
									<span class="small">@item.Quantity</span>
								}
							</td>
							<td>
								@if (canEdit && !IsOrderReadOnly)
								{
									<InputNumber class="form-control form-control-sm py-0"
												 @bind-Value="item.Price"
												 step="0.01" min="0.01"
												 @onchange="() => ValidatePositivePrice(item)" />
								}
								else
								{
									<span class="small">@item.Price.ToString("C2")</span>
								}
							</td>
							<td class="small">@((item.Quantity * item.Price).ToString("C2"))</td>
							<td class="small">
								@if (item.IsExisting)
								{
									@if (placedQty == 0)
									{
										<span class="badge bg-warning text-dark">Pending</span>
									}
									else if (placedQty < item.Quantity)
									{
										<div class="d-flex flex-column">
											<span class="badge bg-info">Partially Placed (@placedQty / @item.Quantity)</span>
											<span class="text-muted small mt-1">@remainingQty left to place</span>
										</div>
									}
									else
									{
										<span class="badge bg-success">Fully Placed (@placedQty / @item.Quantity)</span>
									}
								}
								else
								{
									<span class="badge bg-secondary">New</span>
								}
							</td>
							<td>
								<div class="d-flex flex-column gap-1">
									@if (remainingQty > 0 && item.IsExisting && !IsOrderReadOnly)
									{
										<button type="button" class="btn btn-sm btn-success py-0 px-1"
												@onclick="() => InitPlacement(item)" title="Create Placement">
											<i class="bi bi-box-arrow-right"></i> Place
										</button>
									}

									@if (item.IsExisting && placements.Any())
									{
										<button type="button" class="btn btn-sm btn-info py-0 px-1"
												@onclick="() => ToggleDetails(item.SuppliedEquipmentId)" title="View Placements">
											<i class="bi bi-info-circle"></i> Details
										</button>
									}

									@if (canDelete && !IsOrderReadOnly)
									{
										<button type="button" class="btn btn-sm btn-danger py-0 px-1"
												@onclick="() => ConfirmRemoveEquipmentItem(item)" title="Delete">
											<i class="bi bi-trash"></i> Delete
										</button>
									}
								</div>
							</td>
						</tr>
						@if (item.IsExisting && placements.Any())
						{
							<tr class="@(IsExpanded(item.SuppliedEquipmentId) ? "d-table-row" : "d-none")">
								<td colspan="8" class="p-0">
									<div class="bg-light p-2 border-top position-relative">
										<button type="button" class="btn-close position-absolute top-0 end-0 mt-1 me-1"
												@onclick="() => ToggleDetails(item.SuppliedEquipmentId)"
												aria-label="Close">
										</button>
										<h6 class="small mb-1">Placement Details:</h6>
										<div class="table-responsive">
											<table class="table table-sm mb-0">
												<thead>
													<tr>
														<th class="small">Date</th>
														<th class="small">Quantity</th>
														<th class="small">Employee</th>
														<th class="small">Club</th>
														<th class="small">Actions</th>
													</tr>
												</thead>
												<tbody>
													@foreach (var placement in placements)
													{
														var employee = Employees.FirstOrDefault(e => e.employee_id == placement.employee_id);

														<tr>
															<td class="small">@placement.placement_date.ToString("yyyy-MM-dd HH:mm")</td>
															<td class="small">@placement.quantity units</td>
															<td class="small">@GetEmployeeName(placement.employee_id)</td>
															<td class="small">
																@if (employee != null)
																{
																	@GetClubName(employee.club_id)
																}
															</td>
															<td>
																@if (!IsOrderReadOnly)
																{
																	<button type="button" class="btn btn-sm btn-outline-danger py-0 px-1"
																			@onclick="() => ConfirmRemovePlacement(placement)" title="Delete Placement">
																		<i class="bi bi-trash"></i> Remove
																	</button>
																}
															</td>
														</tr>
													}
												</tbody>
											</table>
										</div>
										@if (remainingQty > 0 && !IsOrderReadOnly)
										{
											<div class="mt-1">
												<button type="button" class="btn btn-sm btn-outline-success py-0 px-1"
														@onclick="() => InitPlacement(item)" title="Add More Placement">
													<i class="bi bi-plus-circle"></i> Add Placement (@remainingQty units remaining)
												</button>
											</div>
										}
									</div>
								</td>
							</tr>
						}
					}
				</tbody>
				<tfoot>
					<tr>
						<td colspan="5" class="text-end fw-bold small">Total Order Amount:</td>
						<td colspan="3" class="fw-bold small">@Order.SuppliedEquipmentItems.Sum(i => i.Quantity * i.Price).ToString("C2")</td>
					</tr>
				</tfoot>
			</table>
		</div>
	</div>
</div>

<!-- Confirm Delete Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Confirm Delete</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<p>@confirmDeleteMessage</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-danger" @onclick="ExecuteDelete" data-bs-dismiss="modal">Delete</button>
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public SupplyOrderViewModel Order { get; set; } = null!;

	[Parameter]
	public List<Supplier> Suppliers { get; set; } = new();

	[Parameter]
	public List<Employee> Employees { get; set; } = new();

	[Parameter]
	public List<Equipment> EquipmentList { get; set; } = new();

	[Parameter]
	public List<Category> Categories { get; set; } = new();

	[Parameter]
	public List<ProductPlacement> ProductPlacements { get; set; } = new();

	[Parameter]
	public List<AvailableEquipment> AvailableEquipmentList { get; set; } = new();

	[Parameter]
	public List<Club> Clubs { get; set; } = new();

	[Parameter]
	public List<Domain.Entities.Type> Types { get; set; } = new();

	[Parameter]
	public List<Brand> Brands { get; set; } = new();

	[Parameter]
	public EventCallback OnItemsChanged { get; set; }

	[Parameter]
	public string OrderStatus { get; set; } = "";

	// Helper properties
	private bool IsOrderReadOnly => OrderStatus == SupplyOrderStatuses.Cancelled || OrderStatus == SupplyOrderStatuses.Completed;

	private List<ProductPlacement> relatedProductPlacements => ProductPlacements
		.Where(p => Order.SuppliedEquipmentItems.Any(se => se.SuppliedEquipmentId == p.supplied_equipment_id))
		.ToList();

	private bool hasMaxEquipment => Order.SuppliedEquipmentItems.Count(i => !i.IsExisting) >= 5;

	// Temporary storage for new equipment item being added
	private SuppliedEquipmentViewModel? tempNewItem = null;
	private Equipment? tempSelectedEquipment = null;

	// Temporary storage for new placement
	private PlacementViewModel? tempNewPlacement = null;
	private int tempMaxPlacementQuantity = 0;

	// Delete confirmation
	private string confirmDeleteMessage = "";
	private Func<Task>? deleteAction;

	// List of supplied equipment items that can be placed
	private List<SuppliedEquipmentViewModel> availableItemsForPlacement =>
		Order.SuppliedEquipmentItems
			.Where(item => item.IsExisting && GetRemainingQuantity(item) > 0)
			.ToList();

	private class PlacementViewModel
	{
		public int PlacementId { get; set; }
		public int SuppliedEquipmentId { get; set; }
		public int AvailableId { get; set; }
		public int EmployeeId { get; set; }
		public int ClubId { get; set; }
		public int Quantity { get; set; }
		public DateTime PlacementDate { get; set; } = DateTime.Today;
	}

	// Додайте це до @code блоку
	private Dictionary<int, bool> expandedDetails = new();

	private void ToggleDetails(int suppliedEquipmentId)
	{
		if (expandedDetails.ContainsKey(suppliedEquipmentId))
			expandedDetails[suppliedEquipmentId] = !expandedDetails[suppliedEquipmentId];
		else
			expandedDetails[suppliedEquipmentId] = true;
	}
	private void ValidatePositiveNumber(SuppliedEquipmentViewModel item)
	{
		if (item.Quantity <= 0)
		{
			item.Quantity = 1;
			Snackbar.Add("Quantity must be greater than 0", MudBlazor.Severity.Warning);
		}
	}

	private void ValidatePositivePrice(SuppliedEquipmentViewModel item)
	{
		if (item.Price <= 0)
		{
			item.Price = 0.01m;
			Snackbar.Add("Price must be greater than 0", MudBlazor.Severity.Warning);
		}
	}

	private bool IsExpanded(int suppliedEquipmentId)
	{
		return expandedDetails.ContainsKey(suppliedEquipmentId) && expandedDetails[suppliedEquipmentId];
	}

	private string GetCategoryName(int categoryId)
	{
		return Categories.FirstOrDefault(c => c.category_id == categoryId)?.category_name ?? "Unknown";
	}

	private string GetBrandName(int brandId)
	{
		return Brands.FirstOrDefault(b => b.brand_id == brandId)?.brand_name ?? "Unknown";
	}

	private string GetTypeName(int typeId)
	{
		return Types.FirstOrDefault(t => t.type_id == typeId)?.type_name ?? "Unknown";
	}

	private string GetClubName(int clubId)
	{
		return Clubs.FirstOrDefault(c => c.club_id == clubId)?.name ?? "Unknown";
	}

	private string GetEmployeeName(int employeeId)
	{
		var employee = Employees.FirstOrDefault(e => e.employee_id == employeeId);
		return employee != null ? $"{employee.first_name} {employee.last_name}" : "Unknown";
	}

	private int GetEmployeeClubId(int employeeId)
	{
		var employee = Employees.FirstOrDefault(e => e.employee_id == employeeId);
		return employee?.club_id ?? 0;
	}

	private int GetRemainingQuantity(SuppliedEquipmentViewModel item)
	{
		var placements = relatedProductPlacements.Where(p => p.supplied_equipment_id == item.SuppliedEquipmentId).ToList();
		var placedQty = placements.Sum(p => p.quantity);
		return item.Quantity - placedQty;
	}

	// Equipment management methods
	private void AddEquipmentItem()
	{
		if (IsOrderReadOnly)
		{
			Snackbar.Add("Order is completed or cancelled and cannot be modified", MudBlazor.Severity.Warning);
			return;
		}

		if (hasMaxEquipment)
		{
			Snackbar.Add("You can add at most 5 new equipment items at once", MudBlazor.Severity.Warning);
			return;
		}

		// Initialize temporary item with default values
		tempNewItem = new SuppliedEquipmentViewModel
			{
				SuppliedEquipmentId = 0,
				SupplyOrderId = Order.SupplyOrderId,
				EquipmentId = 0,  // No selection by default
				Quantity = 1,
				Price = 0
			};
	}

	private void UpdateEquipmentDetails()
	{
		if (tempNewItem != null && tempNewItem.EquipmentId > 0)
		{
			tempSelectedEquipment = EquipmentList.FirstOrDefault(e => e.equipment_id == tempNewItem.EquipmentId);
			if (tempSelectedEquipment != null)
			{
				tempNewItem.EquipmentName = tempSelectedEquipment.name;
			}
		}
		else
		{
			tempSelectedEquipment = null;
		}
	}

	private async Task ConfirmAddEquipment()
	{
		if (IsOrderReadOnly)
		{
			Snackbar.Add("Order is completed or cancelled and cannot be modified", MudBlazor.Severity.Warning);
			return;
		}

		if (tempNewItem == null || tempNewItem.EquipmentId == 0)
		{
			Snackbar.Add("Please select equipment", MudBlazor.Severity.Warning);
			return;
		}

		if (tempNewItem.Quantity <= 0)
		{
			Snackbar.Add("Quantity must be greater than 0", MudBlazor.Severity.Warning);
			return;
		}

		if (tempNewItem.Price <= 0)
		{
			Snackbar.Add("Price must be greater than 0", MudBlazor.Severity.Warning);
			return;
		}

		Order.SuppliedEquipmentItems.Add(tempNewItem);
		tempNewItem = null;
		tempSelectedEquipment = null;
		await OnItemsChanged.InvokeAsync();
		Snackbar.Add("Equipment added successfully", MudBlazor.Severity.Success);
	}

	private void CancelAddEquipment()
	{
		tempNewItem = null;
		tempSelectedEquipment = null;
	}

	private async Task ConfirmRemoveEquipmentItem(SuppliedEquipmentViewModel item)
	{
		if (IsOrderReadOnly)
		{
			Snackbar.Add("Order is completed or cancelled and cannot be modified", MudBlazor.Severity.Warning);
			return;
		}

		// Check if item can be removed (not existing or no placements)
		var placements = relatedProductPlacements.Where(p => p.supplied_equipment_id == item.SuppliedEquipmentId).ToList();

		if (!item.IsExisting || (item.IsExisting && !placements.Any()))
		{
			// Display confirmation dialog without JavaScript
			var result = await DialogService.ShowMessageBox(
				"Confirm Delete",
				$"Are you sure you want to remove {item.EquipmentName} from this order?",
				yesText: "Yes",
				noText: "No");

			if (result == true)
			{
				await RemoveEquipmentItem(item);
			}
		}
		else
		{
			Snackbar.Add("Cannot remove equipment that has been placed", MudBlazor.Severity.Error);
		}
	}

	private async Task ExecuteDelete()
	{
		if (deleteAction != null)
		{
			await deleteAction();
			deleteAction = null;
		}
	}

	private async Task RemoveEquipmentItem(SuppliedEquipmentViewModel item)
	{
		if (IsOrderReadOnly)
		{
			Snackbar.Add("Order is completed or cancelled and cannot be modified", MudBlazor.Severity.Warning);
			return;
		}

		// Check if item can be removed (not existing or no placements)
		var placements = relatedProductPlacements.Where(p => p.supplied_equipment_id == item.SuppliedEquipmentId).ToList();

		if (!item.IsExisting || (item.IsExisting && !placements.Any()))
		{
			Order.SuppliedEquipmentItems.Remove(item);
			await OnItemsChanged.InvokeAsync();
			Snackbar.Add("Equipment removed successfully", MudBlazor.Severity.Success);
		}
		else
		{
			Snackbar.Add("Cannot remove equipment that has been placed", MudBlazor.Severity.Error);
		}
	}

	// Placement management methods
	private void AddPlacementItem()
	{
		if (IsOrderReadOnly)
		{
			Snackbar.Add("Order is completed or cancelled and cannot be modified", MudBlazor.Severity.Warning);
			return;
		}

		if (!availableItemsForPlacement.Any())
		{
			Snackbar.Add("No equipment items available for placement", MudBlazor.Severity.Warning);
			return;
		}

		tempNewPlacement = new PlacementViewModel
			{
				PlacementId = 0,
				SuppliedEquipmentId = 0,
				ClubId = 0,
				EmployeeId = 0,
				Quantity = 1,
				PlacementDate = DateTime.Today
			};
	}

	private void InitPlacement(SuppliedEquipmentViewModel item)
	{
		if (IsOrderReadOnly)
		{
			Snackbar.Add("Order is completed or cancelled and cannot be modified", MudBlazor.Severity.Warning);
			return;
		}

		var remainingQty = GetRemainingQuantity(item);
		if (remainingQty <= 0)
		{
			Snackbar.Add("No quantity remaining for placement", MudBlazor.Severity.Warning);
			return;
		}

		tempNewPlacement = new PlacementViewModel
			{
				PlacementId = 0,
				SuppliedEquipmentId = item.SuppliedEquipmentId,
				ClubId = 0,
				EmployeeId = 0,
				Quantity = 1,
				PlacementDate = DateTime.Today
			};

		UpdatePlacementDetails();
	}

	private void UpdatePlacementDetails()
	{
		if (tempNewPlacement != null && tempNewPlacement.SuppliedEquipmentId > 0)
		{
			var selectedItem = Order.SuppliedEquipmentItems.FirstOrDefault(se => se.SuppliedEquipmentId == tempNewPlacement.SuppliedEquipmentId);
			if (selectedItem != null)
			{
				tempMaxPlacementQuantity = GetRemainingQuantity(selectedItem);
				if (tempNewPlacement.Quantity > tempMaxPlacementQuantity)
				{
					tempNewPlacement.Quantity = tempMaxPlacementQuantity > 0 ? tempMaxPlacementQuantity : 1;
				}
			}
		}
	}

	private bool IsValidPlacement()
	{
		if (tempNewPlacement == null) return false;

		return tempNewPlacement.SuppliedEquipmentId > 0 &&
						tempNewPlacement.ClubId > 0 &&
						tempNewPlacement.EmployeeId > 0 &&
						tempNewPlacement.Quantity > 0 &&
						tempNewPlacement.Quantity <= tempMaxPlacementQuantity &&
						tempNewPlacement.PlacementDate != default;
	}

	private async Task ConfirmAddPlacement()
	{
		if (IsOrderReadOnly)
		{
			Snackbar.Add("Order is completed or cancelled and cannot be modified", MudBlazor.Severity.Warning);
			return;
		}

		if (!IsValidPlacement())
		{
			Snackbar.Add("Please fill in all required placement fields", MudBlazor.Severity.Warning);
			return;
		}

		try
		{
			// Get the item we're placing
			var suppliedItem = Order.SuppliedEquipmentItems
				.FirstOrDefault(se => se.SuppliedEquipmentId == tempNewPlacement.SuppliedEquipmentId);

			if (suppliedItem == null)
			{
				Snackbar.Add("Supplied equipment not found", MudBlazor.Severity.Error);
				return;
			}

			// Create a new ProductPlacement entity
			var newPlacement = new ProductPlacement
				{
					placement_id = 0, // Will be assigned by database
					placement_date = tempNewPlacement.PlacementDate,
					quantity = tempNewPlacement.Quantity,
					employee_id = tempNewPlacement.EmployeeId,
					supplied_equipment_id = tempNewPlacement.SuppliedEquipmentId,
					// We need to find existing AvailableEquipment or create a new one
					available_id = await CreateOrGetAvailableEquipment(tempNewPlacement)
				};

			// Add to the list
			ProductPlacements.Add(newPlacement);

			// Also add to the item's placements collection for tracking
			var newPlacementViewModel = new UI.Components.Pages.SupplyOrders.SupplyOrdersList.PlacementViewModel
				{
					PlacementId = 0, // Will be assigned after save
					PlacementDate = tempNewPlacement.PlacementDate,
					Quantity = tempNewPlacement.Quantity,
					EmployeeId = tempNewPlacement.EmployeeId,
					ClubId = tempNewPlacement.ClubId,
					ClubName = GetClubName(tempNewPlacement.ClubId),
					EmployeeName = GetEmployeeName(tempNewPlacement.EmployeeId),
					AvailableId = newPlacement.available_id,
					IsExisting = false // Will be set to true after save
				};

			// Add to the item's placements
			if (suppliedItem.Placements == null)
				suppliedItem.Placements = new List<UI.Components.Pages.SupplyOrders.SupplyOrdersList.PlacementViewModel>();

			suppliedItem.Placements.Add(newPlacementViewModel);

			tempNewPlacement = null;
			await OnItemsChanged.InvokeAsync();
			Snackbar.Add("Placement created successfully", MudBlazor.Severity.Success);
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error creating placement: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	private async Task<int> CreateOrGetAvailableEquipment(PlacementViewModel placement)
	{
		// In a real implementation, you would create or find an available equipment entry
		// For now, we'll simulate this by using a placeholder value or existing one

		// Find supplied equipment
		var suppliedItem = Order.SuppliedEquipmentItems
			.FirstOrDefault(se => se.SuppliedEquipmentId == placement.SuppliedEquipmentId);

		if (suppliedItem == null)
		{
			throw new Exception("Supplied equipment not found");
		}

		// Find existing available equipment at the club for this equipment type
		var existingAvailable = AvailableEquipmentList
			.FirstOrDefault(ae => ae.equipment_id == suppliedItem.EquipmentId && ae.club_id == placement.ClubId);

		if (existingAvailable != null)
		{
			// Update existing available equipment
			existingAvailable.available_quantity += placement.Quantity;
			return existingAvailable.available_id;
		}
		else
		{
			// Create new available equipment
			var newAvailableId = AvailableEquipmentList.Any() ?
				AvailableEquipmentList.Max(ae => ae.available_id) + 1 : 1;

			var newAvailable = new AvailableEquipment
				{
					available_id = newAvailableId,
					equipment_id = suppliedItem.EquipmentId,
					club_id = placement.ClubId,
					available_quantity = placement.Quantity,
					rental_price = suppliedItem.Price * 1.2m, // Example markup
					CreateDatetime = DateTime.Now
				};

			AvailableEquipmentList.Add(newAvailable);
			return newAvailableId;
		}
	}

	private void CancelAddPlacement()
	{
		tempNewPlacement = null;
		tempMaxPlacementQuantity = 0;
	}

	private async Task ConfirmRemovePlacement(ProductPlacement placement)
	{
		var availableEquipment = AvailableEquipmentList
			.FirstOrDefault(ae => ae.available_id == placement.available_id);

		var equipment = EquipmentList
			.FirstOrDefault(e => e.equipment_id == availableEquipment?.equipment_id);

		if (equipment != null)
		{
			var result = await DialogService.ShowMessageBox(
				"Confirm Delete",
				$"Are you sure you want to remove this placement for {equipment.name}?",
				yesText: "Yes",
				noText: "No");

			if (result == true)
			{
				await RemovePlacement(placement);
			}
		}
		else
		{
			Snackbar.Add("Equipment not found for this placement.", MudBlazor.Severity.Error);
		}
	}

	private async Task RemovePlacement(ProductPlacement placement)
	{
		try
		{
			// Find and update the corresponding available equipment
			var availableEquipment = AvailableEquipmentList
				.FirstOrDefault(ae => ae.available_id == placement.available_id);

			if (availableEquipment != null)
			{
				availableEquipment.available_quantity -= placement.quantity;

				// If quantity becomes zero or negative, we might want to remove it entirely
				if (availableEquipment.available_quantity <= 0)
				{
					AvailableEquipmentList.Remove(availableEquipment);
				}
			}

			// Remove from the related item's placements collection
			var suppliedItem = Order.SuppliedEquipmentItems
				.FirstOrDefault(se => se.SuppliedEquipmentId == placement.supplied_equipment_id);

			if (suppliedItem != null && suppliedItem.Placements != null)
			{
				var placementViewModel = suppliedItem.Placements
					.FirstOrDefault(p => p.PlacementId == placement.placement_id);

				if (placementViewModel != null)
				{
					suppliedItem.Placements.Remove(placementViewModel);
				}
			}

			// Remove the placement
			ProductPlacements.Remove(placement);
			await OnItemsChanged.InvokeAsync();
			Snackbar.Add("Placement removed successfully", MudBlazor.Severity.Success);
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error removing placement: {ex.Message}", MudBlazor.Severity.Error);
		}
	}
} *@