@using Domain.Entities
@using static UI.Components.Pages.SupplyOrders.SupplyOrdersList
@inject Services.ExternalApi.Facade.IApiFacade ApiFacade

<div class="equipment-editor p-2">
    <div class="equipment-items-container">
        @foreach (var item in SuppliedEquipmentItems)
        {
            var equipment = EquipmentList.FirstOrDefault(e => e.equipment_id == item.EquipmentId);
            var equipmentName = equipment != null ? equipment.name : "Unknown Equipment";
            var totalPriceForItem = item.Quantity * item.Price;

            <div class="equipment-item mb-2 p-2 border rounded">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="equipment-name">
                        <select class="form-select" @bind="item.EquipmentId">
                            @foreach (var equip in EquipmentList)
                            {
                                <option value="@equip.equipment_id">@equip.name</option>
                            }
                            <option value="-1">-- Add New Equipment --</option>
                        </select>
                        @if (item.EquipmentId == -1)
                        {
                            <div class="mt-2">
                                <div class="input-group input-group-sm">
                                    <input type="text" class="form-control" placeholder="New equipment name" @bind="newEquipmentName" />
                                    <button class="btn btn-primary btn-sm" @onclick="() => AddNewEquipment(item)">Add</button>
                                    <button class="btn btn-secondary btn-sm" @onclick="CancelNewEquipment">Cancel</button>
                                </div>
                            </div>
                        }
                    </div>
                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveEquipmentItem(item)">×</button>
                </div>

                <div class="d-flex">
                    <div class="me-2">
                        <label>Quantity</label>
                        <input type="number" class="form-control" @bind="item.Quantity" min="1" />
                    </div>
                    <div class="me-2">
                        <label>Price (per unit)</label>
                        <input type="number" class="form-control" @bind="item.Price" step="0.01" min="0" />
                    </div>
                    <div>
                        <label>Total</label>
                        <div class="form-control bg-light" readonly>@totalPriceForItem.ToString("0.00")</div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Total Order Price -->
    <div class="text-end fw-bold mt-3 me-1">
        Total Order Price: @SuppliedEquipmentItems.Sum(i => i.Quantity * i.Price).ToString("0.00")
    </div>

    <!-- Buttons -->
    <div class="buttons-container" style="position: sticky; bottom: 0; background-color: white; padding-top: 10px; border-top: 1px solid #ddd;">
        <button class="btn btn-sm btn-outline-primary" @onclick="AddEquipmentItem">Add Equipment</button>
        <div class="mt-2 d-flex justify-content-end">
            <button class="btn btn-primary btn-sm" @onclick="OnSaveChanges">Save</button>
            <button class="btn btn-secondary btn-sm ms-2" @onclick="OnCancel">Close</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<SuppliedEquipmentViewModel> SuppliedEquipmentItems { get; set; } = new();

    [Parameter]
    public List<Equipment> EquipmentList { get; set; } = new();

    [Parameter]
    public EventCallback OnSaveChanges { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private string newEquipmentName = "";

    private void AddEquipmentItem()
    {
        var newItem = new SuppliedEquipmentViewModel
            {
                SuppliedEquipmentId = 0,
                SupplyOrderId = SuppliedEquipmentItems.FirstOrDefault()?.SupplyOrderId ?? 0,
                EquipmentId = EquipmentList.FirstOrDefault()?.equipment_id ?? 0,
                EquipmentName = EquipmentList.FirstOrDefault()?.name ?? "",
                Quantity = 1,
                Price = 0
            };

        SuppliedEquipmentItems.Add(newItem);
    }

    private void RemoveEquipmentItem(SuppliedEquipmentViewModel item)
    {
        SuppliedEquipmentItems.Remove(item);
    }

    private async Task AddNewEquipment(SuppliedEquipmentViewModel item)
    {
        if (string.IsNullOrWhiteSpace(newEquipmentName)) return;

        var newEquipment = new Equipment
            {
                name = newEquipmentName,
                CreateDatetime = DateTime.Now,
                UpdateDatetime = DateTime.Now
            };

        var response = await ApiFacade.EquipmentApiService.Create(newEquipment);
        if (response.IsSuccessStatusCode)
        {
            // Refresh equipment list
            var equipmentResponse = await ApiFacade.EquipmentApiService.Get();
            if (equipmentResponse.IsSuccessStatusCode)
            {
                EquipmentList.Clear();
                foreach (var equipment in equipmentResponse.Content)
                {
                    EquipmentList.Add(equipment);
                }

                var createdEquipment = EquipmentList.FirstOrDefault(e => e.name == newEquipmentName);
                if (createdEquipment != null)
                {
                    item.EquipmentId = createdEquipment.equipment_id;
                    item.EquipmentName = createdEquipment.name;
                }
            }
        }

        newEquipmentName = "";
    }

    private void CancelNewEquipment()
    {
        newEquipmentName = "";
        foreach (var item in SuppliedEquipmentItems)
        {
            if (item.EquipmentId == -1)
                item.EquipmentId = EquipmentList.FirstOrDefault()?.equipment_id ?? 0;
        }
    }
}

<style>
    .equipment-editor {
        background-color: #f8f9fa;
        border-radius: 4px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.15);
        max-height: 400px;
        overflow-y: auto;
        width: 400px;
        z-index: 1000;
    }

    .equipment-item {
        background-color: white;
    }
</style>