@page "/supply-orders"
@using BlazorDownloadFile
@using Domain.Constants
@using Domain.Entities
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components.Authorization
@using Services.Export
@using Services.Export.Model
@using Services.ExternalApi.Facade
@using UI.Components.Pages.SupplyOrders.Component
@using System.ComponentModel.DataAnnotations

@inject IApiFacade ApiFacade
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject IExportService ExportService

<AuthorizeView Policy=@Policies.OfficeManagerAndWarehouseWorker>
	<Authorized>

		<h3 class="mb-4">Управління замовленнями на постачання</h3>

		<OrderListFilters SearchQuery="@searchQuery"
						  OnSearchChanged="(val) => { searchQuery = val; }"
						  StatusFilter="@statusFilter"
						  SupplierFilter="@supplierFilter"
						  EmployeeFilter="@employeeFilter"
						  DateFromFilter="@dateFromFilter"
						  DateToFilter="@dateToFilter"
						  OnStatusFilterChanged="(val) => { statusFilter = val; }"
						  OnSupplierFilterChanged="(val) => { supplierFilter = val; }"
						  OnEmployeeFilterChanged="(val) => { employeeFilter = val; }"
						  OnDateFromFilterChanged="(val) => { dateFromFilter = val; }"
						  OnDateToFilterChanged="(val) => { dateToFilter = val; }"
						  Statuses="@statuses"
						  Suppliers="@suppliers"
						  Employees="@employees" />

		<AddSupplyOrderForm Statuses="@statuses"
							Suppliers="@suppliers"
							Employees="@employees"
							Equipments="@equipmentList"
							Brands="@brands"
							Clubs="@clubs"
							OnOrderCreated="LoadData" />

		<PaginationControl CurrentPage="currentPage"
						   PageSize="pageSize"
						   TotalItems="FilteredOrders.Count()"
						   TotalPages="TotalPages"
						   OnPageChanged="GoToPage"
						   OnPageSizeChanged="(size) => { pageSize = size; currentPage = 1; }" />

	</Authorized>
	<NotAuthorized>
		<p>Ця функція доступна тільки для працівників складу та офіс-менеджерів.</p>
	</NotAuthorized>
</AuthorizeView>

@code {
	private const string OrderNumberField = "OrderNumber";
	private const string OrderDateField = "OrderDate";
	private const string SupplierField = "Supplier";
	private const string StatusField = "Status";
	private const string EmployeeField = "Employee";

	private string searchQuery = "";
	private int statusFilter = 0;
	private int supplierFilter = 0;
	private int employeeFilter = 0;
	private DateTime? dateFromFilter = null;
	private DateTime? dateToFilter = null;
	private List<SupplyOrderViewModel> orders = new();
	private List<Supplier> suppliers = new();
	private List<SupplyOrderStatus> statuses = new();
	private List<Employee> employees = new();
	private List<Equipment> equipmentList = new();
	private List<SuppliedEquipment> suppliedEquipments = new();
	private List<Domain.Entities.Position> positions = new();
	private List<Category> categories = new();
	private List<ProductPlacement> productPlacements = new();
	private List<AvailableEquipment> availableEquipments = new();
	private List<Club> clubs = new();
	private List<Domain.Entities.Type> types = new();
	private List<Brand> brands = new();

	private SupplyOrderViewModel? selectedOrder;
	private int editingOrderId = -1;
	private string editingField = "";
	private bool isProcessing = false;

	// Pagination parameters
	private int currentPage = 1;
	private int pageSize = 10;

	private IEnumerable<SupplyOrderViewModel> FilteredOrders =>
	orders.Where(o =>
	(string.IsNullOrWhiteSpace(searchQuery) ||
	o.SupplyOrderNumber.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
	o.SupplierName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
	o.StatusName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
	o.EmployeeName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
	(statusFilter == 0 || o.StatusId == statusFilter) &&
	(supplierFilter == 0 || o.SupplierId == supplierFilter) &&
	(employeeFilter == 0 || o.EmployeeId == employeeFilter) &&
	(!dateFromFilter.HasValue || o.OrderDate.Date >= dateFromFilter.Value.Date) &&
	(!dateToFilter.HasValue || o.OrderDate.Date <= dateToFilter.Value.Date)
	);

	private IEnumerable<SupplyOrderViewModel> PaginatedOrders =>
	FilteredOrders.Skip((currentPage - 1) * pageSize).Take(pageSize);

	private int TotalPages => (int)Math.Ceiling(FilteredOrders.Count() / (double)pageSize);

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	private void GoToPage(int page)
	{
		if (page < 1 || page > TotalPages)
			return;

		currentPage = page;
	}

	// Add these variables to the @code section
	private bool showExportForm = false;
	private ExportFormat exportFormat = ExportFormat.CSV;
	private string exportScope = "filtered";
	private string exportDetailLevel = "basic";
	private bool isExporting = false;

	private async Task LoadData()
	{
		try
		{
			var supplyOrdersResponse = await ApiFacade.SupplyOrdersApiService.Get();
			var suppliersResponse = await ApiFacade.SuppliersApiService.Get();
			var statusesResponse = await ApiFacade.SupplyOrderStatusApiService.Get();
			var employeesResponse = await ApiFacade.EmployeeApiService.Get();
			var equipmentResponse = await ApiFacade.EquipmentApiService.Get();
			var suppliedEquipmentsResponse = await ApiFacade.SuppliedEquipmentApiService.Get();
			var positionsResponse = await ApiFacade.PositionApiService.Get();
			var categoriesResponse = await ApiFacade.CategoryApiService.Get();
			var productPlacementsResponse = await ApiFacade.ProductPlacementApiService.Get();
			var availableEquipmentsResponse = await ApiFacade.AvailableEquipmentApiService.Get();
			var clubsResponse = await ApiFacade.ClubApiService.Get();
			var typesResponse = await ApiFacade.TypeApiService.Get();
			var brandsResponse = await ApiFacade.BrandApiService.Get();

			if (!supplyOrdersResponse.IsSuccessStatusCode ||
			!suppliersResponse.IsSuccessStatusCode ||
			!statusesResponse.IsSuccessStatusCode ||
			!employeesResponse.IsSuccessStatusCode ||
			!equipmentResponse.IsSuccessStatusCode ||
			!suppliedEquipmentsResponse.IsSuccessStatusCode ||
			!positionsResponse.IsSuccessStatusCode ||
			!categoriesResponse.IsSuccessStatusCode ||
			!productPlacementsResponse.IsSuccessStatusCode ||
			!availableEquipmentsResponse.IsSuccessStatusCode ||
			!clubsResponse.IsSuccessStatusCode ||
			!typesResponse.IsSuccessStatusCode ||
			!brandsResponse.IsSuccessStatusCode)
			{
				Snackbar.Add("Не вдалося завантажити деякі дані. Будь ласка, оновіть сторінку.", MudBlazor.Severity.Error);
				return;
			}

			var supplyOrders = supplyOrdersResponse.Content;
			suppliers = suppliersResponse.Content.ToList();
			statuses = statusesResponse.Content.ToList();
			employees = employeesResponse.Content.ToList();
			equipmentList = equipmentResponse.Content.ToList();
			suppliedEquipments = suppliedEquipmentsResponse.Content.ToList();
			positions = positionsResponse.Content.ToList();
			categories = categoriesResponse.Content.ToList();
			productPlacements = productPlacementsResponse.Content.ToList();
			availableEquipments = availableEquipmentsResponse.Content.ToList();
			clubs = clubsResponse.Content.ToList();
			types = typesResponse.Content.ToList();
			brands = brandsResponse.Content.ToList();

			orders = supplyOrders.Select(o => new SupplyOrderViewModel
				{
					SupplyOrderId = o.supply_order_id,
					SupplyOrderNumber = o.supply_order_number,
					OrderDate = o.order_date,
					SupplierId = o.supplier_id,
					SupplierName = suppliers.FirstOrDefault(s => s.supplier_id == o.supplier_id)?.name ?? "Unknown",
					StatusId = o.status_id,
					StatusName = statuses.FirstOrDefault(s => s.status_id == o.status_id)?.status_name ?? "Unknown",
					EmployeeId = o.employee_id,
					EmployeeName = GetEmployeeName(o.employee_id),
					TotalAmount = o.total_amount,
					SuppliedEquipmentItems = GetSuppliedEquipmentItems(o.supply_order_id)
				}).ToList();

			// Reset to first page when data is loaded or refreshed
			currentPage = 1;

			// Reset selectedOrder to ensure it has the fresh data
			if (selectedOrder != null)
			{
				var updatedOrder = orders.FirstOrDefault(o => o.SupplyOrderId == selectedOrder.SupplyOrderId);
				if (updatedOrder != null)
				{
					selectedOrder = updatedOrder;
				}
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Не вдалось загрузити дані", MudBlazor.Severity.Error);
		}
	}

	private string GetEmployeeName(int employeeId)
	{
		var employee = employees.FirstOrDefault(e => e.employee_id == employeeId);
		return employee != null ? $"{employee.first_name} {employee.last_name}" : "Невідомо";
	}

	private List<SuppliedEquipmentViewModel> GetSuppliedEquipmentItems(int supplyOrderId)
	{
		var equipmentItems = suppliedEquipments
		.Where(se => se.supply_order_id == supplyOrderId)
		.Select(se => new SuppliedEquipmentViewModel
			{
				SuppliedEquipmentId = se.supplied_equipment_id,
				SupplyOrderId = se.supply_order_id,
				EquipmentId = se.equipment_id,
				EquipmentName = equipmentList.FirstOrDefault(e => e.equipment_id == se.equipment_id)?.name ?? "Невідомо",
				Quantity = se.quantity,
				Price = se.price,
				IsExisting = true,
				Placements = GetPlacements(se.supplied_equipment_id)
			}).ToList();

		return equipmentItems;
	}

	private List<PlacementViewModel> GetPlacements(int suppliedEquipmentId)
	{
		return productPlacements
		.Where(pp => pp.supplied_equipment_id == suppliedEquipmentId)
		.Select(pp =>
		{
			var availableEquipment = availableEquipments.FirstOrDefault(ae => ae.available_id == pp.available_id);
			return new PlacementViewModel
				{
					PlacementId = pp.placement_id,
					PlacementDate = pp.placement_date,
					Quantity = pp.quantity,
					EmployeeId = pp.employee_id,
					EmployeeName = GetEmployeeName(pp.employee_id),
					ClubId = availableEquipment?.club_id ?? 0,
					ClubName = clubs.FirstOrDefault(c => c.club_id == availableEquipment?.club_id)?.name ?? "Unknown",
					AvailableId = pp.available_id,
					IsExisting = true
				};
		}).ToList();
	}

	private string GetStatusBadgeClass(string statusName)
	{
		return statusName switch
		{
			SupplyOrderStatuses.Pending => "badge bg-warning text-dark",
			SupplyOrderStatuses.Confirmed => "badge bg-info text-dark",
			SupplyOrderStatuses.Processing => "badge bg-primary",
			SupplyOrderStatuses.Completed => "badge bg-success",
			SupplyOrderStatuses.Cancelled => "badge bg-danger",
			_ => "badge bg-secondary"
		};
	}

	private string GetStatusRowClass(string statusName)
	{
		return statusName switch
		{
			SupplyOrderStatuses.Pending => "table-warning",
			SupplyOrderStatuses.Confirmed => "table-info",
			SupplyOrderStatuses.Processing => "table-primary",
			SupplyOrderStatuses.Completed => "table-success",
			SupplyOrderStatuses.Cancelled => "table-danger",
			_ => "table-secondary"
		};
	}

	private void StartEditing(int orderId, string field)
	{
		editingOrderId = orderId;
		editingField = field;
		StateHasChanged();
	}

	private async Task HandleKeyDown(KeyboardEventArgs e, SupplyOrderViewModel order, string field)
	{
		if (e.Key == "Enter")
		{
			StopEditing();
			await SaveRowChanges(order);
		}
		else if (e.Key == "Escape")
		{
			StopEditing();
		}
	}

	private void StopEditing()
	{
		editingOrderId = -1;
		editingField = "";
	}

	private async Task UpdateOrderField(SupplyOrderViewModel order, string field, object value)
	{
		try
		{
			switch (field)
			{
				case "OrderNumber":
					order.SupplyOrderNumber = value?.ToString() ?? "";
					break;
				case "OrderDate":
					if (DateTime.TryParse(value?.ToString(), out DateTime date))
					{
						order.OrderDate = date;
					}
					break;
				case "Supplier":
					if (int.TryParse(value?.ToString(), out int supplierId))
					{
						order.SupplierId = supplierId;
						order.SupplierName = suppliers.FirstOrDefault(s => s.supplier_id == supplierId)?.name ?? "Невідомо";

						// Update details in selected order if it's the same order
						if (selectedOrder != null && selectedOrder.SupplyOrderId == order.SupplyOrderId)
						{
							selectedOrder.SupplierId = supplierId;
							selectedOrder.SupplierName = order.SupplierName;
						}
					}
					break;
				case "Status":
					if (int.TryParse(value?.ToString(), out int statusId))
					{
						order.StatusId = statusId;
						order.StatusName = statuses.FirstOrDefault(s => s.status_id == statusId)?.status_name ?? "Невідомо";

						// Update details in selected order if it's the same order
						if (selectedOrder != null && selectedOrder.SupplyOrderId == order.SupplyOrderId)
						{
							selectedOrder.StatusId = statusId;
							selectedOrder.StatusName = order.StatusName;
						}
					}
					break;
				case "Employee":
					if (int.TryParse(value?.ToString(), out int employeeId))
					{
						order.EmployeeId = employeeId;
						order.EmployeeName = GetEmployeeName(employeeId);

						// Update details in selected order if it's the same order
						if (selectedOrder != null && selectedOrder.SupplyOrderId == order.SupplyOrderId)
						{
							selectedOrder.EmployeeId = employeeId;
							selectedOrder.EmployeeName = order.EmployeeName;
						}
					}
					break;
			}

			await SaveRowChanges(order);
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка загрузки даних", MudBlazor.Severity.Error);
		}
	}

	private async Task SaveRowChanges(SupplyOrderViewModel order)
	{
		if (isProcessing) return;

		isProcessing = true;
		try
		{
			var supplyOrder = new SupplyOrder
				{
					supply_order_id = order.SupplyOrderId,
					supply_order_number = order.SupplyOrderNumber,
					order_date = order.OrderDate,
					supplier_id = order.SupplierId,
					status_id = order.StatusId,
					employee_id = order.EmployeeId,
					total_amount = order.TotalAmount,
					UpdateDatetime = DateTime.Now
				};

			var updateResponse = await ApiFacade.SupplyOrdersApiService.Update(supplyOrder.supply_order_id, supplyOrder);

			if (updateResponse.IsSuccessStatusCode)
			{
				Snackbar.Add("Замовлення успішно оновлено!", MudBlazor.Severity.Success);
			}
			else
			{
				Snackbar.Add("Не вдалося оновити замовлення.", MudBlazor.Severity.Error);
				await LoadData(); // Reload data to reset changes
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка збереження змін", MudBlazor.Severity.Error);
			await LoadData(); // Reload data to reset changes
		}
		finally
		{
			isProcessing = false;
		}
	}

	private void ToggleOrderDetails(SupplyOrderViewModel order)
	{
		if (selectedOrder?.SupplyOrderId == order.SupplyOrderId)
		{
			selectedOrder = null;
		}
		else
		{
			selectedOrder = order;
		}
	}

	private void CloseOrderDetails()
	{
		selectedOrder = null;
	}
	private int GetEmployeeClubId(int employeeId)
	{
		var employee = employees.FirstOrDefault(e => e.employee_id == employeeId);
		return employee?.club_id ?? 0;
	}

	private async Task SaveOrderDetails()
	{
		if (selectedOrder != null)
		{
			try
			{
				// Save base order information
				var supplyOrder = new SupplyOrder
					{
						supply_order_id = selectedOrder.SupplyOrderId,
						supply_order_number = selectedOrder.SupplyOrderNumber,
						order_date = selectedOrder.OrderDate,
						supplier_id = selectedOrder.SupplierId,
						status_id = selectedOrder.StatusId,
						employee_id = selectedOrder.EmployeeId,
						total_amount = selectedOrder.TotalAmount,
						UpdateDatetime = DateTime.Now
					};

				var updateResponse = await ApiFacade.SupplyOrdersApiService.Update(supplyOrder.supply_order_id, supplyOrder);

				if (!updateResponse.IsSuccessStatusCode)
				{
					Snackbar.Add("Не вдалося оновити замовлення.", MudBlazor.Severity.Error);
					return;
				}

				// Process deleted items
				var currentEquipmentIds = selectedOrder.SuppliedEquipmentItems
				.Where(i => i.IsExisting)
				.Select(i => i.SuppliedEquipmentId)
				.ToList();

				var itemsToDelete = suppliedEquipments
				.Where(se => se.supply_order_id == selectedOrder.SupplyOrderId)
				.Where(se => !currentEquipmentIds.Contains(se.supplied_equipment_id))
				.ToList();

				foreach (var item in itemsToDelete)
				{
					// Check if this item has any placements first
					var hasPlacement = productPlacements.Any(p => p.supplied_equipment_id == item.supplied_equipment_id);
					if (hasPlacement)
					{
						Snackbar.Add($"Неможливо видалити обладнання з місцями розташування", MudBlazor.Severity.Warning);
						continue;
					}

					await ApiFacade.SuppliedEquipmentApiService.Delete(item.supplied_equipment_id);
				}

				// Save supplied equipment items
				foreach (var item in selectedOrder.SuppliedEquipmentItems)
				{
					var suppliedEquipment = new SuppliedEquipment
						{
							supplied_equipment_id = item.SuppliedEquipmentId,
							supply_order_id = item.SupplyOrderId,
							equipment_id = item.EquipmentId,
							quantity = item.Quantity,
							price = item.Price,
							UpdateDatetime = DateTime.Now
						};

					if (item.SuppliedEquipmentId > 0 && item.IsExisting)
					{
						var response = await ApiFacade.SuppliedEquipmentApiService.Update(suppliedEquipment.supplied_equipment_id, suppliedEquipment);
						if (response.IsSuccessStatusCode)
						{
							Snackbar.Add("Успішно оновлено запис обладнання у замовленні", MudBlazor.Severity.Success);
						}
						else
						{
							Snackbar.Add("Не вдалося створити запис обладнання у замовленні", MudBlazor.Severity.Error);
							continue;
						}
					}
					else if (!item.IsExisting)
					{
						// For new items
						suppliedEquipment.CreateDatetime = DateTime.Now;
						var createResponse = await ApiFacade.SuppliedEquipmentApiService.Create(suppliedEquipment);
						if (createResponse.IsSuccessStatusCode && createResponse.Content != null)
						{
							item.SuppliedEquipmentId = createResponse.Content.supplied_equipment_id;
							item.IsExisting = true;
						}
					}

					// Process placement items
					if (item.Placements != null && item.Placements.Any())
					{
						foreach (var placement in item.Placements)
						{
							if (!placement.IsExisting)
							{
								// If there's no available equipment record for this club and equipment, create one
								var availableEquipment = availableEquipments.FirstOrDefault(ae =>
								ae.equipment_id == item.EquipmentId && ae.club_id == placement.ClubId);

								if (availableEquipment == null)
								{
									// Create new available equipment record
									var newAvailable = new AvailableEquipment
										{
											equipment_id = item.EquipmentId,
											club_id = placement.ClubId,
											available_quantity = placement.Quantity,
											rental_price = item.Price * 1.5m, // Default markup for rental
											CreateDatetime = DateTime.Now,
											UpdateDatetime = DateTime.Now
										};

									var availableResponse = await ApiFacade.AvailableEquipmentApiService.Create(newAvailable);
									if (availableResponse.IsSuccessStatusCode && availableResponse.Content != null)
									{
										availableEquipment = availableResponse.Content;
										availableEquipments.Add(availableEquipment); // Add to local cache
									}
									else
									{
										Snackbar.Add("Не вдалося створити запис про доступне обладнання", MudBlazor.Severity.Error);
										continue;
									}
								}
								else
								{
									// Update existing available equipment quantity
									availableEquipment.available_quantity += placement.Quantity;
									var availableResponse = await ApiFacade.AvailableEquipmentApiService.Update(availableEquipment.available_id, availableEquipment);
									if (availableResponse.IsSuccessStatusCode)
									{
									}
									else
									{
										Snackbar.Add("Не вдалося створити запис про доступне обладнання", MudBlazor.Severity.Error);
										continue;
									}
								}

								// Create product placement record
								var newPlacement = new ProductPlacement
									{
										placement_date = placement.PlacementDate,
										quantity = placement.Quantity,
										employee_id = placement.EmployeeId,
										available_id = availableEquipment.available_id,
										supplied_equipment_id = item.SuppliedEquipmentId,
										CreateDatetime = DateTime.Now,
										UpdateDatetime = DateTime.Now
									};

								var placementResponse = await ApiFacade.ProductPlacementApiService.Create(newPlacement);
								if (placementResponse.IsSuccessStatusCode && placementResponse.Content != null)
								{
									productPlacements.Add(placementResponse.Content); // Add to local cache
									placement.PlacementId = placementResponse.Content.placement_id;
									placement.IsExisting = true;
								}
							}
						}
					}

					// Process placements from EquipmentManagementPanel
					var panelPlacements = productPlacements
					.Where(p => p.supplied_equipment_id == item.SuppliedEquipmentId &&
					!p.CreateDatetime.HasValue)
					.ToList();

					foreach (var placement in panelPlacements)
					{
						// Check if this is a new placement (not yet saved to database)
						if (placement.placement_id <= 0 || !placement.CreateDatetime.HasValue)
						{
							// Get available equipment
							var availableEquipment = availableEquipments.FirstOrDefault(ae => ae.available_id == placement.available_id);

							if (availableEquipment == null)
							{
								// Create new available equipment record
								var newAvailable = new AvailableEquipment
									{
										equipment_id = item.EquipmentId,
										club_id = GetEmployeeClubId(placement.employee_id),
										available_quantity = placement.quantity,
										rental_price = item.Price * 1.5m, // Default markup for rental
										CreateDatetime = DateTime.Now,
										UpdateDatetime = DateTime.Now
									};

								var availableResponse = await ApiFacade.AvailableEquipmentApiService.Create(newAvailable);
								if (availableResponse.IsSuccessStatusCode && availableResponse.Content != null)
								{
									availableEquipment = availableResponse.Content;
									availableEquipments.Add(availableEquipment); // Add to local cache
									placement.available_id = availableEquipment.available_id;
								}
								else
								{
									Snackbar.Add("Не вдалося створити запис про доступне обладнання", MudBlazor.Severity.Error);
									continue;
								}
							}
							else
							{
								// Update existing available equipment quantity
								availableEquipment.available_quantity += placement.quantity;
								await ApiFacade.AvailableEquipmentApiService.Update(availableEquipment.available_id, availableEquipment);
							}

							// Set creation datetime
							placement.CreateDatetime = DateTime.Now;
							placement.UpdateDatetime = DateTime.Now;

							// Create the placement in database
							var placementResponse = await ApiFacade.ProductPlacementApiService.Create(placement);
							if (!placementResponse.IsSuccessStatusCode)
							{
								Snackbar.Add("Не вдалося зберегти місце розташування.", MudBlazor.Severity.Error);
							}
						}
					}
				}

				// Update the main list item to reflect changes
				var mainListItem = orders.FirstOrDefault(o => o.SupplyOrderId == selectedOrder.SupplyOrderId);
				if (mainListItem != null)
				{
					// Update basic information
					mainListItem.SupplyOrderNumber = selectedOrder.SupplyOrderNumber;
					mainListItem.OrderDate = selectedOrder.OrderDate;
					mainListItem.SupplierId = selectedOrder.SupplierId;
					mainListItem.SupplierName = selectedOrder.SupplierName;
					mainListItem.StatusId = selectedOrder.StatusId;
					mainListItem.StatusName = selectedOrder.StatusName;
					mainListItem.EmployeeId = selectedOrder.EmployeeId;
					mainListItem.EmployeeName = selectedOrder.EmployeeName;
					mainListItem.TotalAmount = selectedOrder.TotalAmount;

					// Update equipment items count
					mainListItem.SuppliedEquipmentItems = selectedOrder.SuppliedEquipmentItems;
				}

				await LoadData();
				Snackbar.Add("Замовлення успішно оновлено!", MudBlazor.Severity.Success);
			}
			catch (Exception ex)
			{
				Snackbar.Add($"Помилка збереження замовлення", MudBlazor.Severity.Error);
			}
		}
	}

	private async Task DeleteOrder(int orderId, MouseEventArgs e)
	{
		bool confirmed = await JSRuntime.InvokeAsync<bool>("підтвердити", "Ви впевнені, що хочете видалити це замовлення та все пов'язане з ним обладнання?");
		if (confirmed)
		{
			try
			{
				// First delete all supplied equipment items
				var itemsToDelete = suppliedEquipments.Where(se => se.supply_order_id == orderId);
				foreach (var item in itemsToDelete)
				{
					await ApiFacade.SuppliedEquipmentApiService.Delete(item.supplied_equipment_id);
				}

				// Then delete the order
				var response = await ApiFacade.SupplyOrdersApiService.Delete(orderId);

				if (response.IsSuccessStatusCode)
				{
					// If we were viewing details of this order, close it
					if (selectedOrder?.SupplyOrderId == orderId)
					{
						selectedOrder = null;
					}

					Snackbar.Add("Замовлення успішно видалено!", MudBlazor.Severity.Success);
					await LoadData();
				}
				else
				{
					Snackbar.Add("Не вдалося видалити замовлення.", MudBlazor.Severity.Error);
				}
			}
			catch (Exception ex)
			{
				Snackbar.Add($"Помилка видалення замовлення", MudBlazor.Severity.Error);
			}
		}
	}

	public class SupplyOrderViewModel
	{
		[Required]
		public int SupplyOrderId { get; set; }
		[Required(ErrorMessage = "Номер замовлення є обов'язковим")]
		[StringLength(50, ErrorMessage = "Номер замовлення не може перевищувати 50 символів")]
		public string SupplyOrderNumber { get; set; } = string.Empty;
		[Required(ErrorMessage = "Дата замовлення є обов'язковою")]
		public DateTime OrderDate { get; set; }
		[Required(ErrorMessage = "Постачальник є обов'язковим")]
		public int SupplierId { get; set; }
		public string SupplierName { get; set; } = "";
		[Required(ErrorMessage = "Статус є обов'язковим")]
		public int StatusId { get; set; }
		public string StatusName { get; set; } = "";
		[Required(ErrorMessage = "Співробітник є обов'язковим")]
		public int EmployeeId { get; set; }
		public string EmployeeName { get; set; } = "";
		[Required]
		[Range(0, double.MaxValue, ErrorMessage = "Загальна сума має бути додатнім числом")]
		public decimal TotalAmount { get; set; }
		public List<SuppliedEquipmentViewModel> SuppliedEquipmentItems { get; set; } = new();
	}
	public class SuppliedEquipmentViewModel
	{
		public int SuppliedEquipmentId { get; set; }
		public int SupplyOrderId { get; set; }
		[Required(ErrorMessage = "Обладнання є обов'язковим")]
		public int EquipmentId { get; set; }
		public string EquipmentName { get; set; } = "";
		[Required(ErrorMessage = "Кількість є обов'язковою")]
		[Range(1, int.MaxValue, ErrorMessage = "Кількість має бути не менше 1")]
		public int Quantity { get; set; }
		[Required(ErrorMessage = "Ціна є обов'язковою")]
		[Range(0, double.MaxValue, ErrorMessage = "Ціна має бути додатнім числом")]
		public decimal Price { get; set; }
		public bool IsExisting { get; set; }
		public List<PlacementViewModel> Placements { get; set; } = new();
	}
	public class PlacementViewModel
	{
		public int PlacementId { get; set; }
		public DateTime PlacementDate { get; set; } = DateTime.Today;
		public int Quantity { get; set; }
		public int EmployeeId { get; set; }
		public int ClubId { get; set; }
		public string ClubName { get; set; } = "";
		public string EmployeeName { get; set; } = "";
		public int AvailableId { get; set; }
		public bool IsExisting { get; set; }
	}
}

<style>
	.table-container {
		max-height: 550px;
		overflow-y: auto;
		margin-bottom: 1rem;
	}

	.sticky-header {
		position: sticky;
		top: 0;
		z-index: 10;
		background-color: #f8f9fa;
	}

	.order-details-container {
		border-top: none !important;
	}
</style>
