@page "/supply-orders"
@using Domain.Constants
@using Domain.Entities
@using System.Collections.Generic
@using Services.ExternalApi.Facade
@using UI.Components.Pages.SupplyOrders.Component
@inject IApiFacade ApiFacade
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3 class="mb-4">Supply Orders Management</h3>

<div class="row mb-3">
	<div class="col-md-4">
		<input type="text" class="form-control" placeholder="Search orders..." @bind-value="searchQuery" @bind-value:event="oninput" />
	</div>
	<div class="col">
		<button class="btn btn-success" @onclick="CreateNewOrder">
			<i class="bi bi-plus-circle me-1"></i> New Order
		</button>
	</div>
</div>

<div class="table-container">
	<div class="table-responsive">
		<table class="table table-bordered table-hover">
			<thead class="table-light sticky-header">
				<tr>
					<th>Order Number</th>
					<th>Order Date</th>
					<th>Supplier</th>
					<th>Status</th>
					<th>Employee</th>
					<th>Equipment Items</th>
					<th>Total Amount</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var order in PaginatedOrders)
				{
					<tr>
						<td class="text-end">@order.SupplyOrderNumber</td>
						<td @onclick="() => BeginEdit(order, nameof(order.OrderDate))">
							@if (editingOrder?.SupplyOrderId == order.SupplyOrderId && editingField == nameof(order.OrderDate))
							{
								<input type="date" class="form-control" @bind-value="order.OrderDate" @onblur="() => EndEdit()" @onclick:stopPropagation="true" />
							}
							else
							{
								@order.OrderDate.ToShortDateString()
							}
						</td>
						<td @onclick="() => BeginEdit(order, nameof(order.SupplierName))">
							@if (editingOrder?.SupplyOrderId == order.SupplyOrderId && editingField == nameof(order.SupplierName))
							{
								<div class="dropdown-container">
									<select class="form-select" @bind="order.SupplierId" @onblur="() => EndEdit()" @onclick:stopPropagation="true">
										@foreach (var supplier in suppliers)
										{
											<option value="@supplier.supplier_id">@supplier.name</option>
										}
										<option value="-1">-- Add New Supplier --</option>
									</select>
									@if (order.SupplierId == -1)
									{
										<div class="mt-2">
											<div class="input-group input-group-sm">
												<input type="text" class="form-control" placeholder="New supplier name" @bind="newSupplierName" @onclick:stopPropagation="true" />
												<button class="btn btn-primary btn-sm" @onclick="() => AddNewSupplier()" @onclick:stopPropagation="true">Add</button>
												<button class="btn btn-secondary btn-sm" @onclick="() => CancelNewItem()" @onclick:stopPropagation="true">Cancel</button>
											</div>
										</div>
									}
								</div>
							}
							else
							{
								@order.SupplierName
							}
						</td>
						<td @onclick="() => BeginEdit(order, nameof(order.StatusName))">
							@if (editingOrder?.SupplyOrderId == order.SupplyOrderId && editingField == nameof(order.StatusName))
							{
								<div class="dropdown-container">
									<select class="form-select" @bind="order.StatusId" @onblur="() => EndEdit()" @onclick:stopPropagation="true">
										@foreach (var status in statuses)
										{
											<option value="@status.status_id">@status.status_name</option>
										}
										<option value="-1">-- Add New Status --</option>
									</select>
									@if (order.StatusId == -1)
									{
										<div class="mt-2">
											<div class="input-group input-group-sm">
												<input type="text" class="form-control" placeholder="New status name" @bind="newStatusName" @onclick:stopPropagation="true" />
												<button class="btn btn-primary btn-sm" @onclick="() => AddNewStatus()" @onclick:stopPropagation="true">Add</button>
												<button class="btn btn-secondary btn-sm" @onclick="() => CancelNewItem()" @onclick:stopPropagation="true">Cancel</button>
											</div>
										</div>
									}
								</div>
							}
							else
							{
								<span class="@GetStatusBadgeClass(order.StatusName)">@order.StatusName</span>
							}
						</td>
						<td @onclick="() => BeginEdit(order, nameof(order.EmployeeName))">
							@if (editingOrder?.SupplyOrderId == order.SupplyOrderId && editingField == nameof(order.EmployeeName))
							{
								<div class="dropdown-container">
									<select class="form-select" @bind="order.EmployeeId" @onblur="() => EndEdit()" @onclick:stopPropagation="true">
										@foreach (var employee in employees)
										{
											<option value="@employee.employee_id">@($"{employee.first_name} {employee.last_name}")</option>
										}
										<option value="-1">-- Add New Employee --</option>
									</select>
									@if (order.EmployeeId == -1)
									{
										<div class="mt-2">
											<div class="input-group input-group-sm mb-1">
												<input type="text" class="form-control" placeholder="First name" @bind="newEmployeeFirstName" @onclick:stopPropagation="true" />
											</div>
											<div class="input-group input-group-sm mb-1">
												<input type="text" class="form-control" placeholder="Last name" @bind="newEmployeeLastName" @onclick:stopPropagation="true" />
											</div>
											<div>
												<button class="btn btn-primary btn-sm" @onclick="() => AddNewEmployee()" @onclick:stopPropagation="true">Add</button>
												<button class="btn btn-secondary btn-sm" @onclick="() => CancelNewItem()" @onclick:stopPropagation="true">Cancel</button>
											</div>
										</div>
									}
								</div>
							}
							else
							{
								@order.EmployeeName
							}
						</td>
						<td @onclick="() => BeginEdit(order, nameof(order.SuppliedEquipmentItems))">
							@if (editingOrder?.SupplyOrderId == order.SupplyOrderId && editingField == nameof(order.SuppliedEquipmentItems))
							{
								<SuppliedEquipmentEditor SuppliedEquipmentItems="order.SuppliedEquipmentItems"
														 EquipmentList="equipmentList"
														 OnSaveChanges="() => SaveEquipmentChanges(order)"
														 OnCancel="CancelEdit" />
							}
							else
							{
								<button class="btn btn-sm btn-outline-secondary" @onclick="() => BeginEdit(order, nameof(order.SuppliedEquipmentItems))">
									View (@order.SuppliedEquipmentItems.Count items)
								</button>
							}
						</td>
						<td class="text-end">@order.TotalAmount.ToString("C2")</td>
						<td>
							<div class="d-flex justify-content-around">
								<button class="btn btn-sm btn-danger" @onclick="() => DeleteOrder(order.SupplyOrderId)">
									<i class="bi bi-trash"></i>
								</button>
							</div>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>

<PaginationControl CurrentPage="currentPage"
				   PageSize="pageSize"
				   TotalItems="FilteredOrders.Count()"
				   TotalPages="TotalPages"
				   OnPageChanged="GoToPage"
				   OnPageSizeChanged="(size) => { pageSize = size; currentPage = 1; }" />

@code {
	private string searchQuery = "";
	private List<SupplyOrderViewModel> orders = new();
	private List<Supplier> suppliers = new();
	private List<SupplyOrderStatus> statuses = new();
	private List<Employee> employees = new();
	private List<Equipment> equipmentList = new();
	private List<SuppliedEquipment> suppliedEquipments = new();

	private SupplyOrderViewModel? editingOrder;
	private string? editingField;

	// For new item entry
	private string newSupplierName = "";
	private string newStatusName = "";
	private string newEmployeeFirstName = "";
	private string newEmployeeLastName = "";
	private string newEquipmentName = "";

	// Pagination parameters
	private int currentPage = 1;
	private int pageSize = 10;

	private IEnumerable<SupplyOrderViewModel> FilteredOrders =>
		string.IsNullOrWhiteSpace(searchQuery)
			? orders
			: orders.Where(o => o.SupplyOrderId.ToString().Contains(searchQuery) ||
										o.SupplierName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
										o.StatusName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
										o.EmployeeName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));

	private IEnumerable<SupplyOrderViewModel> PaginatedOrders =>
		FilteredOrders.Skip((currentPage - 1) * pageSize).Take(pageSize);

	private int TotalPages => (int)Math.Ceiling(FilteredOrders.Count() / (double)pageSize);

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	private void GoToPage(int page)
	{
		if (page < 1 || page > TotalPages)
			return;

		currentPage = page;
	}

	private async Task LoadData()
	{
		var supplyOrdersResponse = await ApiFacade.SupplyOrdersApiService.Get();
		var suppliersResponse = await ApiFacade.SuppliersApiService.Get();
		var statusesResponse = await ApiFacade.SupplyOrderStatusApiService.Get();
		var employeesResponse = await ApiFacade.EmployeeApiService.Get();
		var equipmentResponse = await ApiFacade.EquipmentApiService.Get();
		var suppliedEquipmentsResponse = await ApiFacade.SuppliedEquipmentApiService.Get();

		if (!supplyOrdersResponse.IsSuccessStatusCode ||
			!suppliersResponse.IsSuccessStatusCode ||
			!statusesResponse.IsSuccessStatusCode ||
			!employeesResponse.IsSuccessStatusCode ||
			!equipmentResponse.IsSuccessStatusCode ||
			!suppliedEquipmentsResponse.IsSuccessStatusCode)
		{
			return;
		}

		var supplyOrders = supplyOrdersResponse.Content;
		suppliers = suppliersResponse.Content.ToList();
		statuses = statusesResponse.Content.ToList();
		employees = employeesResponse.Content.ToList();
		equipmentList = equipmentResponse.Content.ToList();
		suppliedEquipments = suppliedEquipmentsResponse.Content.ToList();

		orders = supplyOrders.Select(o => new SupplyOrderViewModel
			{
				SupplyOrderId = o.supply_order_id,
				// SupplyOrderNumber = o.supply_order_number,
				OrderDate = o.order_date,
				SupplierId = o.supplier_id,
				SupplierName = suppliers.FirstOrDefault(s => s.supplier_id == o.supplier_id)?.name ?? "Unknown",
				StatusId = o.status_id,
				StatusName = statuses.FirstOrDefault(s => s.status_id == o.status_id)?.status_name ?? "Unknown",
				EmployeeId = o.employee_id,
				EmployeeName = GetEmployeeName(o.employee_id),
				TotalAmount = o.total_amount,
				SuppliedEquipmentItems = GetSuppliedEquipmentItems(o.supply_order_id)
			}).ToList();

		// Reset to first page when data is loaded or refreshed
		currentPage = 1;
	}

	private string GetEmployeeName(int employeeId)
	{
		var employee = employees.FirstOrDefault(e => e.employee_id == employeeId);
		return employee != null ? $"{employee.first_name} {employee.last_name}" : "Unknown";
	}

	private List<SuppliedEquipmentViewModel> GetSuppliedEquipmentItems(int supplyOrderId)
	{
		return suppliedEquipments
			.Where(se => se.supply_order_id == supplyOrderId)
			.Select(se => new SuppliedEquipmentViewModel
				{
					SuppliedEquipmentId = se.supplied_equipment_id,
					SupplyOrderId = se.supply_order_id,
					EquipmentId = se.equipment_id,
					EquipmentName = equipmentList.FirstOrDefault(e => e.equipment_id == se.equipment_id)?.name ?? "Unknown",
					Quantity = se.quantity,
					Price = se.price
				}).ToList();
	}

	private string GetStatusBadgeClass(string statusName)
	{
		return statusName.ToLower() switch
		{
			SupplyOrderStatuses.Pending => "badge bg-warning text-dark",
			SupplyOrderStatuses.Confirmed => "badge bg-info text-dark",
			SupplyOrderStatuses.Processing => "badge bg-primary",
			SupplyOrderStatuses.Completed => "badge bg-success",
			SupplyOrderStatuses.Cancelled => "badge bg-danger",
			_ => "badge bg-secondary"
		};
	}

	private void BeginEdit(SupplyOrderViewModel order, string field)
	{
		editingOrder = order;
		editingField = field;
	}

	private async Task EndEdit()
	{
		if (editingOrder != null && editingField != nameof(editingOrder.SuppliedEquipmentItems))
		{
			await SaveChanges(editingOrder);
			editingOrder = null;
			editingField = null;
		}
	}

	private void CancelEdit()
	{
		editingOrder = null;
		editingField = null;
	}
	private void ResetNewItemFields()
	{
		newSupplierName = "";
		newStatusName = "";
		newEmployeeFirstName = "";
		newEmployeeLastName = "";
		newEquipmentName = "";
	}

	private void CancelNewItem()
	{
		if (editingOrder != null)
		{
			if (editingField == nameof(editingOrder.SupplierName))
				editingOrder.SupplierId = suppliers.FirstOrDefault()?.supplier_id ?? 0;
			else if (editingField == nameof(editingOrder.StatusName))
				editingOrder.StatusId = statuses.FirstOrDefault()?.status_id ?? 0;
			else if (editingField == nameof(editingOrder.EmployeeName))
				editingOrder.EmployeeId = employees.FirstOrDefault()?.employee_id ?? 0;
		}

		ResetNewItemFields();
	}

	private async Task AddNewSupplier()
	{
		if (string.IsNullOrWhiteSpace(newSupplierName)) return;

		var newSupplier = new Supplier
			{
				name = newSupplierName,
				CreateDatetime = DateTime.Now,
				UpdateDatetime = DateTime.Now
			};

		var response = await ApiFacade.SuppliersApiService.Create(newSupplier);
		if (response.IsSuccessStatusCode && editingOrder != null)
		{
			await LoadData();
			var createdSupplier = suppliers.FirstOrDefault(s => s.name == newSupplierName);
			if (createdSupplier != null)
			{
				editingOrder.SupplierId = createdSupplier.supplier_id;
				editingOrder.SupplierName = createdSupplier.name;
			}
		}

		newSupplierName = "";
	}

	private async Task AddNewStatus()
	{
		if (string.IsNullOrWhiteSpace(newStatusName)) return;

		var newStatus = new SupplyOrderStatus
			{
				status_name = newStatusName,
				CreateDatetime = DateTime.Now,
				UpdateDatetime = DateTime.Now
			};

		var response = await ApiFacade.SupplyOrderStatusApiService.Create(newStatus);
		if (response.IsSuccessStatusCode && editingOrder != null)
		{
			await LoadData();
			var createdStatus = statuses.FirstOrDefault(s => s.status_name == newStatusName);
			if (createdStatus != null)
			{
				editingOrder.StatusId = createdStatus.status_id;
				editingOrder.StatusName = createdStatus.status_name;
			}
		}

		newStatusName = "";
	}

	private async Task AddNewEmployee()
	{
		if (string.IsNullOrWhiteSpace(newEmployeeFirstName) || string.IsNullOrWhiteSpace(newEmployeeLastName)) return;

		var newEmployee = new Employee
			{
				first_name = newEmployeeFirstName,
				last_name = newEmployeeLastName,
				CreateDatetime = DateTime.Now,
				UpdateDatetime = DateTime.Now
			};

		var response = await ApiFacade.EmployeeApiService.Create(newEmployee);
		if (response.IsSuccessStatusCode && editingOrder != null)
		{
			await LoadData();
			var createdEmployee = employees.FirstOrDefault(e =>
				e.first_name == newEmployeeFirstName && e.last_name == newEmployeeLastName);

			if (createdEmployee != null)
			{
				editingOrder.EmployeeId = createdEmployee.employee_id;
				editingOrder.EmployeeName = $"{createdEmployee.first_name} {createdEmployee.last_name}";
			}
		}

		newEmployeeFirstName = "";
		newEmployeeLastName = "";
	}

	private async Task SaveChanges(SupplyOrderViewModel order)
	{
		var supplyOrder = new SupplyOrder
			{
				supply_order_id = order.SupplyOrderId,
				order_date = order.OrderDate,
				supplier_id = order.SupplierId,
				status_id = order.StatusId,
				employee_id = order.EmployeeId,
				total_amount = order.TotalAmount,
				UpdateDatetime = DateTime.Now
			};

		await ApiFacade.SupplyOrdersApiService.Update(supplyOrder.supply_order_id, supplyOrder);
		await LoadData();
	}

	private async Task SaveEquipmentChanges(SupplyOrderViewModel order)
	{
		// Calculate new total amount
		order.TotalAmount = order.SuppliedEquipmentItems.Sum(item => item.Quantity * item.Price);

		// First update the supply order with new total
		await SaveChanges(order);

		// Then update all equipment items
		foreach (var item in order.SuppliedEquipmentItems)
		{
			var suppliedEquipment = new SuppliedEquipment
				{
					supplied_equipment_id = item.SuppliedEquipmentId,
					supply_order_id = item.SupplyOrderId,
					equipment_id = item.EquipmentId,
					quantity = item.Quantity,
					price = item.Price,
					UpdateDatetime = DateTime.Now
				};

			if (item.SuppliedEquipmentId > 0)
			{
				await ApiFacade.SuppliedEquipmentApiService.Update(suppliedEquipment.supplied_equipment_id, suppliedEquipment);
			}
			else
			{
				// For new items
				suppliedEquipment.CreateDatetime = DateTime.Now;
				await ApiFacade.SuppliedEquipmentApiService.Create(suppliedEquipment);
			}
		}

		// Remove deleted items from the database
		var existingItems = suppliedEquipments.Where(se => se.supply_order_id == order.SupplyOrderId);
		foreach (var existing in existingItems)
		{
			if (!order.SuppliedEquipmentItems.Any(i => i.SuppliedEquipmentId == existing.supplied_equipment_id))
			{
				await ApiFacade.SuppliedEquipmentApiService.Delete(existing.supplied_equipment_id);
			}
		}

		editingOrder = null;
		editingField = null;
		await LoadData();
	}

	private void CreateNewOrder()
	{
		NavigationManager.NavigateTo("/supply-orders/create");
	}

	private async Task DeleteOrder(int orderId)
	{
		bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this order?");
		if (confirmed)
		{
			// First delete all supplied equipment items
			var itemsToDelete = suppliedEquipments.Where(se => se.supply_order_id == orderId);
			foreach (var item in itemsToDelete)
			{
				await ApiFacade.SuppliedEquipmentApiService.Delete(item.supplied_equipment_id);
			}

			// Then delete the order
			await ApiFacade.SupplyOrdersApiService.Delete(orderId);
			await LoadData();
		}
	}

	public class SupplyOrderViewModel
	{
		public int SupplyOrderId { get; set; }
		public int SupplyOrderNumber { get; set; }
		public DateTime OrderDate { get; set; }
		public int SupplierId { get; set; }
		public string SupplierName { get; set; } = "";
		public int StatusId { get; set; }
		public string StatusName { get; set; } = "";
		public int EmployeeId { get; set; }
		public string EmployeeName { get; set; } = "";
		public decimal TotalAmount { get; set; }
		public List<SuppliedEquipmentViewModel> SuppliedEquipmentItems { get; set; } = new();
	}

	public class SuppliedEquipmentViewModel
	{
		public int SuppliedEquipmentId { get; set; }
		public int SupplyOrderId { get; set; }
		public int EquipmentId { get; set; }
		public string EquipmentName { get; set; } = "";
		public int Quantity { get; set; }
		public decimal Price { get; set; }
	}
}

<style>
	.table-container {
		max-height: 500px;
		overflow-y: auto;
		margin-bottom: 1rem;
	}

	.sticky-header {
		position: sticky;
		top: 0;
		z-index: 10;
		background-color: #f8f9fa;
	}

	.equipment-editor {
		background-color: #f8f9fa;
		border-radius: 4px;
		box-shadow: 0 2px 5px rgba(0,0,0,0.15);
		max-height: 400px;
		overflow-y: auto;
		width: 400px;
		z-index: 1000;
	}

	.equipment-item {
		background-color: white;
	}
</style>