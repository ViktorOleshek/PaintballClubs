@page "/supply-orders"
@using Domain.Constants
@using Domain.Entities
@using System.Collections.Generic
@using Services.ExternalApi.Facade
@using UI.Components.Pages.SupplyOrders.Component
@using System.ComponentModel.DataAnnotations
@inject IApiFacade ApiFacade
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject MudBlazor.ISnackbar Snackbar

<h3 class="mb-4">Supply Orders Management</h3>

<OrderListFilters SearchQuery="@searchQuery"
				  OnSearchChanged="(val) => { searchQuery = val; }"
				  StatusFilter="@statusFilter"
				  SupplierFilter="@supplierFilter"
				  EmployeeFilter="@employeeFilter"
				  DateFromFilter="@dateFromFilter"
				  DateToFilter="@dateToFilter"
				  OnStatusFilterChanged="(val) => { statusFilter = val; }"
				  OnSupplierFilterChanged="(val) => { supplierFilter = val; }"
				  OnEmployeeFilterChanged="(val) => { employeeFilter = val; }"
				  OnDateFromFilterChanged="(val) => { dateFromFilter = val; }"
				  OnDateToFilterChanged="(val) => { dateToFilter = val; }"
				  Statuses="@statuses"
				  Suppliers="@suppliers"
				  Employees="@employees" />

<div class="table-container">
	<div class="table-responsive">
		<table class="table table-bordered table-hover">
			<thead class="table-light sticky-header">
				<tr>
					<th>Order Number</th>
					<th>Order Date</th>
					<th>Supplier</th>
					<th>Status</th>
					<th>Employee</th>
					<th>Equipment Items</th>
					<th>Total Amount</th>
					<th style="width: 150px;">Actions</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var order in PaginatedOrders)
				{
					<tr class="@GetStatusRowClass(order.StatusName)">
						<td class="text-end cell-editable" @onclick="() => StartEditing(order.SupplyOrderId, OrderNumberField)">
							@if (editingOrderId == order.SupplyOrderId && editingField == OrderNumberField)
							{
								<input type="text" class="form-control form-control-sm"
									   value="@order.SupplyOrderNumber"
									   @onchange="(e) => UpdateOrderField(order, OrderNumberField, e.Value)"
									   @onblur="() => StopEditing()"
									   @onclick:stopPropagation="true"
									   @onkeydown="(e) => HandleKeyDown(e, order, OrderNumberField)" />
							}
							else
							{
								<span>@order.SupplyOrderNumber</span>
							}
						</td>
						<td class="cell-editable" @onclick="() => StartEditing(order.SupplyOrderId, OrderDateField)">
							@if (editingOrderId == order.SupplyOrderId && editingField == OrderDateField)
							{
								<input type="date" class="form-control form-select-sm"
									   value="@order.OrderDate.ToString("yyyy-MM-dd")" ;
									   @onchange="(e) => UpdateOrderField(order, OrderDateField, e.Value)"
									   @onblur="() => StopEditing()"
									   @onclick:stopPropagation="true"
									   @onkeydown="(e) => HandleKeyDown(e, order, OrderDateField)" />
							}
							else
							{
								<span>@order.OrderDate.ToShortDateString()</span>
							}
						</td>
						<td class="cell-editable" @onclick="() => StartEditing(order.SupplyOrderId, SupplierField)">
							@if (editingOrderId == order.SupplyOrderId && editingField == SupplierField)
							{
								<select class="form-select form-select-sm" value="@order.SupplierId"
										@onchange="(e) => UpdateOrderField(order, SupplierField, e.Value)"
										@onblur="() => StopEditing()"
										@onclick:stopPropagation="true">
									@foreach (var supplier in suppliers)
									{
										<option value="@supplier.supplier_id">@supplier.name</option>
									}
								</select>
							}
							else
							{
								<span>@order.SupplierName</span>
							}
						</td>
						<td class="cell-editable" @onclick="() => StartEditing(order.SupplyOrderId, StatusField)">
							@if (editingOrderId == order.SupplyOrderId && editingField == StatusField)
							{
								<select class="form-select form-select-sm" value="@order.StatusId"
										@onchange="(e) => UpdateOrderField(order, StatusField, e.Value)"
										@onblur="() => StopEditing()"
										@onclick:stopPropagation="true">
									@foreach (var status in statuses)
									{
										<option value="@status.status_id">@status.status_name</option>
									}
								</select>
							}
							else
							{
								<span class="@GetStatusBadgeClass(order.StatusName)">@order.StatusName</span>
							}
						</td>
						<td class="cell-editable" @onclick="() => StartEditing(order.SupplyOrderId, EmployeeField)">
							@if (editingOrderId == order.SupplyOrderId && editingField == EmployeeField)
							{
								<select class="form-select form-select-sm" value="@order.EmployeeId"
										@onchange="(e) => UpdateOrderField(order, EmployeeField, e.Value)"
										@onblur="() => StopEditing()"
										@onclick:stopPropagation="true">
									@foreach (var employee in employees)
									{
										<option value="@employee.employee_id">@($"{employee.first_name} {employee.last_name}")</option>
									}
								</select>
							}
							else
							{
								<span>@order.EmployeeName</span>
							}
						</td>
						<td>@order.SuppliedEquipmentItems.Count item(s)</td>
						<td class="text-end">@order.TotalAmount.ToString("C2")</td>
						<td>
							<div class="d-flex justify-content-around">
								<button class="btn btn-sm btn-primary me-1" @onclick="() => ToggleOrderDetails(order)">
									<i class="bi bi-pencil"></i>
								</button>
								<button class="btn btn-sm btn-danger" @onclick="(e) => DeleteOrder(order.SupplyOrderId, e)">
									<i class="bi bi-trash"></i>
								</button>
							</div>
						</td>
					</tr>

					@if (selectedOrder?.SupplyOrderId == order.SupplyOrderId)
					{
						<tr>
							<td colspan="8" class="p-0 order-details-container">
								<OrderDetailsPanel Order="selectedOrder"
												   Suppliers="suppliers"
												   Statuses="statuses"
												   Employees="employees"
												   EquipmentList="equipmentList"
												   Positions="positions"
												   Categories="categories"
												   ProductPlacements="productPlacements"
												   AvailableEquipmentList="availableEquipments"
												   Clubs="clubs"
												   Types="types"
												   Brands="brands"
												   OnSave="SaveOrderDetails"
												   OnClose="CloseOrderDetails" />
							</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
</div>

<PaginationControl CurrentPage="currentPage"
				   PageSize="pageSize"
				   TotalItems="FilteredOrders.Count()"
				   TotalPages="TotalPages"
				   OnPageChanged="GoToPage"
				   OnPageSizeChanged="(size) => { pageSize = size; currentPage = 1; }" />

@code {
	private const string OrderNumberField = "OrderNumber";
	private const string OrderDateField = "OrderDate";
	private const string SupplierField = "Supplier";
	private const string StatusField = "Status";
	private const string EmployeeField = "Employee";

	private string searchQuery = "";
	private int statusFilter = 0;
	private int supplierFilter = 0;
	private int employeeFilter = 0;
	private DateTime? dateFromFilter = null;
	private DateTime? dateToFilter = null;
	private List<SupplyOrderViewModel> orders = new();
	private List<Supplier> suppliers = new();
	private List<SupplyOrderStatus> statuses = new();
	private List<Employee> employees = new();
	private List<Equipment> equipmentList = new();
	private List<SuppliedEquipment> suppliedEquipments = new();
	private List<Domain.Entities.Position> positions = new();
	private List<Category> categories = new();
	private List<ProductPlacement> productPlacements = new();
	private List<AvailableEquipment> availableEquipments = new();
	private List<Club> clubs = new();
	private List<Domain.Entities.Type> types = new();
	private List<Brand> brands = new();

	private SupplyOrderViewModel? selectedOrder;
	private int editingOrderId = -1;
	private string editingField = "";
	private bool isProcessing = false;

	// Pagination parameters
	private int currentPage = 1;
	private int pageSize = 10;

	private IEnumerable<SupplyOrderViewModel> FilteredOrders =>
		orders.Where(o =>
			(string.IsNullOrWhiteSpace(searchQuery) ||
				o.SupplyOrderNumber.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
				o.SupplierName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
				o.StatusName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
				o.EmployeeName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
			(statusFilter == 0 || o.StatusId == statusFilter) &&
			(supplierFilter == 0 || o.SupplierId == supplierFilter) &&
			(employeeFilter == 0 || o.EmployeeId == employeeFilter) &&
			(!dateFromFilter.HasValue || o.OrderDate.Date >= dateFromFilter.Value.Date) &&
			(!dateToFilter.HasValue || o.OrderDate.Date <= dateToFilter.Value.Date)
		);

	private IEnumerable<SupplyOrderViewModel> PaginatedOrders =>
		FilteredOrders.Skip((currentPage - 1) * pageSize).Take(pageSize);

	private int TotalPages => (int)Math.Ceiling(FilteredOrders.Count() / (double)pageSize);

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	private void GoToPage(int page)
	{
		if (page < 1 || page > TotalPages)
			return;

		currentPage = page;
	}

	private async Task LoadData()
	{
		try
		{
			var supplyOrdersResponse = await ApiFacade.SupplyOrdersApiService.Get();
			var suppliersResponse = await ApiFacade.SuppliersApiService.Get();
			var statusesResponse = await ApiFacade.SupplyOrderStatusApiService.Get();
			var employeesResponse = await ApiFacade.EmployeeApiService.Get();
			var equipmentResponse = await ApiFacade.EquipmentApiService.Get();
			var suppliedEquipmentsResponse = await ApiFacade.SuppliedEquipmentApiService.Get();
			var positionsResponse = await ApiFacade.PositionApiService.Get();
			var categoriesResponse = await ApiFacade.CategoryApiService.Get();
			var productPlacementsResponse = await ApiFacade.ProductPlacementApiService.Get();
			var availableEquipmentsResponse = await ApiFacade.AvailableEquipmentApiService.Get();
			var clubsResponse = await ApiFacade.ClubApiService.Get();
			var typesResponse = await ApiFacade.TypeApiService.Get();
			var brandsResponse = await ApiFacade.BrandApiService.Get();

			if (!supplyOrdersResponse.IsSuccessStatusCode ||
				!suppliersResponse.IsSuccessStatusCode ||
				!statusesResponse.IsSuccessStatusCode ||
				!employeesResponse.IsSuccessStatusCode ||
				!equipmentResponse.IsSuccessStatusCode ||
				!suppliedEquipmentsResponse.IsSuccessStatusCode ||
				!positionsResponse.IsSuccessStatusCode ||
				!categoriesResponse.IsSuccessStatusCode ||
				!productPlacementsResponse.IsSuccessStatusCode ||
				!availableEquipmentsResponse.IsSuccessStatusCode ||
				!clubsResponse.IsSuccessStatusCode ||
				!typesResponse.IsSuccessStatusCode ||
				!brandsResponse.IsSuccessStatusCode)
			{
				Snackbar.Add("Failed to load some data. Please refresh the page.", MudBlazor.Severity.Error);
				return;
			}

			var supplyOrders = supplyOrdersResponse.Content;
			suppliers = suppliersResponse.Content.ToList();
			statuses = statusesResponse.Content.ToList();
			employees = employeesResponse.Content.ToList();
			equipmentList = equipmentResponse.Content.ToList();
			suppliedEquipments = suppliedEquipmentsResponse.Content.ToList();
			positions = positionsResponse.Content.ToList();
			categories = categoriesResponse.Content.ToList();
			productPlacements = productPlacementsResponse.Content.ToList();
			availableEquipments = availableEquipmentsResponse.Content.ToList();
			clubs = clubsResponse.Content.ToList();
			types = typesResponse.Content.ToList();
			brands = brandsResponse.Content.ToList();

			orders = supplyOrders.Select(o => new SupplyOrderViewModel
				{
					SupplyOrderId = o.supply_order_id,
					SupplyOrderNumber = o.supply_order_number,
					OrderDate = o.order_date,
					SupplierId = o.supplier_id,
					SupplierName = suppliers.FirstOrDefault(s => s.supplier_id == o.supplier_id)?.name ?? "Unknown",
					StatusId = o.status_id,
					StatusName = statuses.FirstOrDefault(s => s.status_id == o.status_id)?.status_name ?? "Unknown",
					EmployeeId = o.employee_id,
					EmployeeName = GetEmployeeName(o.employee_id),
					TotalAmount = o.total_amount,
					SuppliedEquipmentItems = GetSuppliedEquipmentItems(o.supply_order_id)
				}).ToList();

			// Reset to first page when data is loaded or refreshed
			currentPage = 1;

			// Reset selectedOrder to ensure it has the fresh data
			if (selectedOrder != null)
			{
				var updatedOrder = orders.FirstOrDefault(o => o.SupplyOrderId == selectedOrder.SupplyOrderId);
				if (updatedOrder != null)
				{
					selectedOrder = updatedOrder;
				}
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error loading data: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	private string GetEmployeeName(int employeeId)
	{
		var employee = employees.FirstOrDefault(e => e.employee_id == employeeId);
		return employee != null ? $"{employee.first_name} {employee.last_name}" : "Unknown";
	}

	private List<SuppliedEquipmentViewModel> GetSuppliedEquipmentItems(int supplyOrderId)
	{
		return suppliedEquipments
			.Where(se => se.supply_order_id == supplyOrderId)
			.Select(se => new SuppliedEquipmentViewModel
				{
					SuppliedEquipmentId = se.supplied_equipment_id,
					SupplyOrderId = se.supply_order_id,
					EquipmentId = se.equipment_id,
					EquipmentName = equipmentList.FirstOrDefault(e => e.equipment_id == se.equipment_id)?.name ?? "Unknown",
					Quantity = se.quantity,
					Price = se.price,
					IsExisting = true
				}).ToList();
	}

	private string GetStatusBadgeClass(string statusName)
	{
		return statusName switch
		{
			SupplyOrderStatuses.Pending => "badge bg-warning text-dark",
			SupplyOrderStatuses.Confirmed => "badge bg-info text-dark",
			SupplyOrderStatuses.Processing => "badge bg-primary",
			SupplyOrderStatuses.Completed => "badge bg-success",
			SupplyOrderStatuses.Cancelled => "badge bg-danger",
			_ => "badge bg-secondary"
		};
	}

	private string GetStatusRowClass(string statusName)
	{
		return statusName switch
		{
			SupplyOrderStatuses.Pending => "table-warning",
			SupplyOrderStatuses.Confirmed => "table-info",
			SupplyOrderStatuses.Processing => "table-primary",
			SupplyOrderStatuses.Completed => "table-success",
			SupplyOrderStatuses.Cancelled => "table-danger",
			_ => "table-secondary"
		};
	}

	private void StartEditing(int orderId, string field)
	{
		editingOrderId = orderId;
		editingField = field;
		StateHasChanged();
	}

	private async Task HandleKeyDown(KeyboardEventArgs e, SupplyOrderViewModel order, string field)
	{
		if (e.Key == "Enter")
		{
			StopEditing();
			await SaveRowChanges(order);
		}
		else if (e.Key == "Escape")
		{
			StopEditing();
		}
	}

	private void StopEditing()
	{
		editingOrderId = -1;
		editingField = "";
	}

	private async Task UpdateOrderField(SupplyOrderViewModel order, string field, object value)
	{
		try
		{
			switch (field)
			{
				case "OrderNumber":
					order.SupplyOrderNumber = value?.ToString() ?? "";
					break;
				case "OrderDate":
					if (DateTime.TryParse(value?.ToString(), out DateTime date))
					{
						order.OrderDate = date;
					}
					break;
				case "Supplier":
					if (int.TryParse(value?.ToString(), out int supplierId))
					{
						order.SupplierId = supplierId;
						order.SupplierName = suppliers.FirstOrDefault(s => s.supplier_id == supplierId)?.name ?? "Unknown";

						// Update details in selected order if it's the same order
						if (selectedOrder != null && selectedOrder.SupplyOrderId == order.SupplyOrderId)
						{
							selectedOrder.SupplierId = supplierId;
							selectedOrder.SupplierName = order.SupplierName;
						}
					}
					break;
				case "Status":
					if (int.TryParse(value?.ToString(), out int statusId))
					{
						order.StatusId = statusId;
						order.StatusName = statuses.FirstOrDefault(s => s.status_id == statusId)?.status_name ?? "Unknown";

						// Update details in selected order if it's the same order
						if (selectedOrder != null && selectedOrder.SupplyOrderId == order.SupplyOrderId)
						{
							selectedOrder.StatusId = statusId;
							selectedOrder.StatusName = order.StatusName;
						}
					}
					break;
				case "Employee":
					if (int.TryParse(value?.ToString(), out int employeeId))
					{
						order.EmployeeId = employeeId;
						order.EmployeeName = GetEmployeeName(employeeId);

						// Update details in selected order if it's the same order
						if (selectedOrder != null && selectedOrder.SupplyOrderId == order.SupplyOrderId)
						{
							selectedOrder.EmployeeId = employeeId;
							selectedOrder.EmployeeName = order.EmployeeName;
						}
					}
					break;
			}

			await SaveRowChanges(order);
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error updating field: {ex.Message}", MudBlazor.Severity.Error);
		}
	}

	private async Task SaveRowChanges(SupplyOrderViewModel order)
	{
		if (isProcessing) return;

		isProcessing = true;
		try
		{
			var supplyOrder = new SupplyOrder
				{
					supply_order_id = order.SupplyOrderId,
					supply_order_number = order.SupplyOrderNumber,
					order_date = order.OrderDate,
					supplier_id = order.SupplierId,
					status_id = order.StatusId,
					employee_id = order.EmployeeId,
					total_amount = order.TotalAmount,
					UpdateDatetime = DateTime.Now
				};

			var updateResponse = await ApiFacade.SupplyOrdersApiService.Update(supplyOrder.supply_order_id, supplyOrder);

			if (updateResponse.IsSuccessStatusCode)
			{
				Snackbar.Add("Order updated successfully!", MudBlazor.Severity.Success);
			}
			else
			{
				Snackbar.Add("Failed to update order.", MudBlazor.Severity.Error);
				await LoadData(); // Reload data to reset changes
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error saving changes: {ex.Message}", MudBlazor.Severity.Error);
			await LoadData(); // Reload data to reset changes
		}
		finally
		{
			isProcessing = false;
		}
	}

	private void ToggleOrderDetails(SupplyOrderViewModel order)
	{
		if (selectedOrder?.SupplyOrderId == order.SupplyOrderId)
		{
			selectedOrder = null;
		}
		else
		{
			selectedOrder = order;
		}
	}

	private void CloseOrderDetails()
	{
		selectedOrder = null;
	}

	private async Task SaveOrderDetails()
	{
		if (selectedOrder != null)
		{
			try
			{
				// Save base order information
				var supplyOrder = new SupplyOrder
					{
						supply_order_id = selectedOrder.SupplyOrderId,
						supply_order_number = selectedOrder.SupplyOrderNumber,
						order_date = selectedOrder.OrderDate,
						supplier_id = selectedOrder.SupplierId,
						status_id = selectedOrder.StatusId,
						employee_id = selectedOrder.EmployeeId,
						total_amount = selectedOrder.TotalAmount,
						UpdateDatetime = DateTime.Now
					};

				var updateResponse = await ApiFacade.SupplyOrdersApiService.Update(supplyOrder.supply_order_id, supplyOrder);

				if (!updateResponse.IsSuccessStatusCode)
				{
					Snackbar.Add("Failed to update order.", MudBlazor.Severity.Error);
					return;
				}

				// Process deleted items
				var currentEquipmentIds = selectedOrder.SuppliedEquipmentItems
					.Where(i => i.IsExisting)
					.Select(i => i.SuppliedEquipmentId)
					.ToList();

				var itemsToDelete = suppliedEquipments
					.Where(se => se.supply_order_id == selectedOrder.SupplyOrderId)
					.Where(se => !currentEquipmentIds.Contains(se.supplied_equipment_id))
					.ToList();

				foreach (var item in itemsToDelete)
				{
					await ApiFacade.SuppliedEquipmentApiService.Delete(item.supplied_equipment_id);
				}

				// Save supplied equipment items
				foreach (var item in selectedOrder.SuppliedEquipmentItems)
				{
					var suppliedEquipment = new SuppliedEquipment
						{
							supplied_equipment_id = item.SuppliedEquipmentId,
							supply_order_id = item.SupplyOrderId,
							equipment_id = item.EquipmentId,
							quantity = item.Quantity,
							price = item.Price,
							UpdateDatetime = DateTime.Now
						};

					if (item.SuppliedEquipmentId > 0 && item.IsExisting)
					{
						await ApiFacade.SuppliedEquipmentApiService.Update(suppliedEquipment.supplied_equipment_id, suppliedEquipment);
					}
					else if (!item.IsExisting)
					{
						// For new items
						suppliedEquipment.CreateDatetime = DateTime.Now;
						var createResponse = await ApiFacade.SuppliedEquipmentApiService.Create(suppliedEquipment);
						if (createResponse.IsSuccessStatusCode && createResponse.Content != null)
						{
							item.SuppliedEquipmentId = createResponse.Content.supplied_equipment_id;
							item.IsExisting = true;
						}
					}
				}

				// Update the main list item to reflect changes
				var mainListItem = orders.FirstOrDefault(o => o.SupplyOrderId == selectedOrder.SupplyOrderId);
				if (mainListItem != null)
				{
					// Update basic information
					mainListItem.SupplyOrderNumber = selectedOrder.SupplyOrderNumber;
					mainListItem.OrderDate = selectedOrder.OrderDate;
					mainListItem.SupplierId = selectedOrder.SupplierId;
					mainListItem.SupplierName = selectedOrder.SupplierName;
					mainListItem.StatusId = selectedOrder.StatusId;
					mainListItem.StatusName = selectedOrder.StatusName;
					mainListItem.EmployeeId = selectedOrder.EmployeeId;
					mainListItem.EmployeeName = selectedOrder.EmployeeName;
					mainListItem.TotalAmount = selectedOrder.TotalAmount;

					// Update equipment items count
					mainListItem.SuppliedEquipmentItems = selectedOrder.SuppliedEquipmentItems;
				}

				await LoadData();
				Snackbar.Add("Order successfully updated!", MudBlazor.Severity.Success);
			}
			catch (Exception ex)
			{
				Snackbar.Add($"Error saving order: {ex.Message}", MudBlazor.Severity.Error);
			}
		}
	}

	private void CreateNewOrder()
	{
		NavigationManager.NavigateTo("/supply-orders/create");
	}

	private async Task DeleteOrder(int orderId, MouseEventArgs e)
	{
		bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this order and all associated equipment items?");
		if (confirmed)
		{
			try
			{
				// First delete all supplied equipment items
				var itemsToDelete = suppliedEquipments.Where(se => se.supply_order_id == orderId);
				foreach (var item in itemsToDelete)
				{
					await ApiFacade.SuppliedEquipmentApiService.Delete(item.supplied_equipment_id);
				}

				// Then delete the order
				var response = await ApiFacade.SupplyOrdersApiService.Delete(orderId);

				if (response.IsSuccessStatusCode)
				{
					// If we were viewing details of this order, close it
					if (selectedOrder?.SupplyOrderId == orderId)
					{
						selectedOrder = null;
					}

					Snackbar.Add("Order successfully deleted!", MudBlazor.Severity.Success);
					await LoadData();
				}
				else
				{
					Snackbar.Add("Failed to delete order.", MudBlazor.Severity.Error);
				}
			}
			catch (Exception ex)
			{
				Snackbar.Add($"Error deleting order: {ex.Message}", MudBlazor.Severity.Error);
			}
		}
	}

	public class SupplyOrderViewModel
	{
		[Required]
		public int SupplyOrderId { get; set; }

		[Required(ErrorMessage = "Order number is required")]
		[StringLength(50, ErrorMessage = "Order number cannot exceed 50 characters")]
		public string SupplyOrderNumber { get; set; } = string.Empty;

		[Required(ErrorMessage = "Order date is required")]
		public DateTime OrderDate { get; set; }

		[Required(ErrorMessage = "Supplier is required")]
		public int SupplierId { get; set; }

		public string SupplierName { get; set; } = "";

		[Required(ErrorMessage = "Status is required")]
		public int StatusId { get; set; }

		public string StatusName { get; set; } = "";

		[Required(ErrorMessage = "Employee is required")]
		public int EmployeeId { get; set; }

		public string EmployeeName { get; set; } = "";

		[Required]
		[Range(0, double.MaxValue, ErrorMessage = "Total amount must be a positive number")]
		public decimal TotalAmount { get; set; }

		public List<SuppliedEquipmentViewModel> SuppliedEquipmentItems { get; set; } = new();
	}

	public class SuppliedEquipmentViewModel
	{
		public int SuppliedEquipmentId { get; set; }
		public int SupplyOrderId { get; set; }

		[Required(ErrorMessage = "Equipment is required")]
		public int EquipmentId { get; set; }

		public string EquipmentName { get; set; } = "";

		[Required(ErrorMessage = "Quantity is required")]
		[Range(1, int.MaxValue, ErrorMessage = "Quantity must be at least 1")]
		public int Quantity { get; set; }

		[Required(ErrorMessage = "Price is required")]
		[Range(0, double.MaxValue, ErrorMessage = "Price must be a positive number")]
		public decimal Price { get; set; }

		// Flag to indicate if this is an existing record or a new one
		public bool IsExisting { get; set; }
	}
}

<style>
	.table-container {
		max-height: 550px;
		overflow-y: auto;
		margin-bottom: 1rem;
	}

	.sticky-header {
		position: sticky;
		top: 0;
		z-index: 10;
		background-color: #f8f9fa;
	}

	.order-details-container {
		border-top: none !important;
	}
</style>