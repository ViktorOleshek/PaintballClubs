@page "/supply-orders"
@using BlazorDownloadFile
@using Domain.Constants
@using Domain.Entities
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components.Authorization
@using Services.Export
@using Services.Export.Model
@using Services.ExternalApi.Facade
@using UI.Components.Pages.SupplyOrders.Component
@using System.ComponentModel.DataAnnotations

@inject IApiFacade ApiFacade
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject IExportService ExportService

<AuthorizeView Policy=@Policies.OfficeManagerAndWarehouseWorker>
	<Authorized>

		<h3 class="mb-4">Управління замовленнями на постачання</h3>

		<OrderListFilters SearchQuery="@searchQuery"
						  OnSearchChanged="(val) => { searchQuery = val; }"
						  StatusFilter="@statusFilter"
						  SupplierFilter="@supplierFilter"
						  EmployeeFilter="@employeeFilter"
						  DateFromFilter="@dateFromFilter"
						  DateToFilter="@dateToFilter"
						  OnStatusFilterChanged="(val) => { statusFilter = val; }"
						  OnSupplierFilterChanged="(val) => { supplierFilter = val; }"
						  OnEmployeeFilterChanged="(val) => { employeeFilter = val; }"
						  OnDateFromFilterChanged="(val) => { dateFromFilter = val; }"
						  OnDateToFilterChanged="(val) => { dateToFilter = val; }"
						  Statuses="@statuses"
						  Suppliers="@suppliers"
						  Employees="@employees" />

		<button class="btn btn-primary mt-3" @onclick="ToggleExportForm">
			<i class="bi bi-download me-1"></i> Експортувати дані
		</button>

		@if (showExportForm)
		{
			<div class="card mt-3">
				<div class="card-header">
					<h5>Експорт замовлень постачання</h5>
				</div>
				<div class="card-body">
					<div class="row">
						<div class="col-md-4 mb-3">
							<label>Формат експорту</label>
							<select class="form-select" @bind="exportFormat">
								<option value="@ExportFormat.CSV">CSV</option>
								<option value="@ExportFormat.JSON">JSON</option>
							</select>
						</div>
						<div class="col-md-4 mb-3">
							<label>Обсяг експорту</label>
							<select class="form-select" @bind="exportScope">
								<option value="filtered">Відфільтровані замовлення</option>
								<option value="all">Усі замовлення</option>
							</select>
						</div>
						<div class="col-md-4 mb-3">
							<label>Рівень деталізації</label>
							<select class="form-select" @bind="exportDetailLevel">
								<option value="basic">Основна інформація</option>
								<option value="detailed">З деталями обладнання</option>
								<AuthorizeView Policy=@Roles.WarehouseWorker>
									<Authorized Context="exportWithDetail">
										<option value="full">Повні деталі з розміщенням</option>
									</Authorized>
								</AuthorizeView>
							</select>
						</div>
					</div>

					<div class="mb-3">
						<label>Стовпці для включення</label>
						<div class="row">
							<div class="col-md-3">
								<div class="form-check">
									<input class="form-check-input" type="checkbox" id="chkOrderNumber" @bind="includeOrderNumber">
									<label class="form-check-label" for="chkOrderNumber">Номер замовлення</label>
								</div>
								<div class="form-check">
									<input class="form-check-input" type="checkbox" id="chkOrderDate" @bind="includeOrderDate">
									<label class="form-check-label" for="chkOrderDate">Дата замовлення</label>
								</div>
								<div class="form-check">
									<input class="form-check-input" type="checkbox" id="chkSupplier" @bind="includeSupplier">
									<label class="form-check-label" for="chkSupplier">Постачальник</label>
								</div>
							</div>
							<div class="col-md-3">
								<div class="form-check">
									<input class="form-check-input" type="checkbox" id="chkStatus" @bind="includeStatus">
									<label class="form-check-label" for="chkStatus">Статус</label>
								</div>
								<div class="form-check">
									<input class="form-check-input" type="checkbox" id="chkEmployee" @bind="includeEmployee">
									<label class="form-check-label" for="chkEmployee">Співробітник</label>
								</div>
								<div class="form-check">
									<input class="form-check-input" type="checkbox" id="chkTotalAmount" @bind="includeTotalAmount">
									<label class="form-check-label" for="chkTotalAmount">Загальна сума</label>
								</div>
							</div>
							<div class="col-md-3">
								@if (exportDetailLevel != "basic")
								{
									<div class="form-check">
										<input class="form-check-input" type="checkbox" id="chkEquipment" @bind="includeEquipment">
										<label class="form-check-label" for="chkEquipment">Деталі обладнання</label>
									</div>
									<div class="form-check">
										<input class="form-check-input" type="checkbox" id="chkBrand" @bind="includeBrand">
										<label class="form-check-label" for="chkBrand">Бренд</label>
									</div>
									<div class="form-check">
										<input class="form-check-input" type="checkbox" id="chkCategory" @bind="includeCategory">
										<label class="form-check-label" for="chkCategory">Категорія</label>
									</div>
								}
							</div>
							<div class="col-md-3">
								@if (exportDetailLevel == "full")
								{
									<div class="form-check">
										<input class="form-check-input" type="checkbox" id="chkPlacements" @bind="includePlacements">
										<label class="form-check-label" for="chkPlacements">Деталі розміщення</label>
									</div>
									<div class="form-check">
										<input class="form-check-input" type="checkbox" id="chkClub" @bind="includeClub">
										<label class="form-check-label" for="chkClub">Клуб</label>
									</div>
								}
							</div>
						</div>
					</div>

					<div class="d-flex justify-content-end">
						<button class="btn btn-secondary me-2" @onclick="ToggleExportForm">Закрити</button>
						<button class="btn btn-primary" @onclick="ExportData" disabled="@isExporting">
							@if (isExporting)
							{
								<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
								<span>Експортування...</span>
							}
							else
							{
								<span>Експорт</span>
							}
						</button>
					</div>
				</div>
			</div>
		}

		<div class="table-container">
			<div class="table-responsive">
				<table class="table table-bordered table-hover">
					<thead class="table-light sticky-header">
						<tr>
							<th>Номер замовлення</th>
							<th>Дата замовлення</th>
							<th>Постачальник</th>
							<th>Статус</th>
							<th>Співробітник</th>
							<th>Одиниці обладнання</th>
							<th>Загальна сума</th>
							<th style="width: 150px;">Дії</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var order in PaginatedOrders)
						{
							<tr class="@GetStatusRowClass(order.StatusName)">
								<td class="cell-editable">
									<span>@order.SupplyOrderNumber</span>
								</td>

								<AuthorizeView Policy=@Roles.OfficeManager>
									<Authorized Context="officeManagerAccess">
								<td class="cell-editable" @onclick="() => StartEditing(order.SupplyOrderId, OrderDateField)">
									@if (editingOrderId == order.SupplyOrderId && editingField == OrderDateField)
									{
										<input type="date" class="form-control form-select-sm"
											   value="@order.OrderDate.ToString("yyyy-MM-dd")"
											   @onchange="(e) => UpdateOrderField(order, OrderDateField, e.Value)"
											   @onblur="() => StopEditing()"
											   @onclick:stopPropagation="true"
											   @onkeydown="(e) => HandleKeyDown(e, order, OrderDateField)" />
									}
									else
									{
										<span>@order.OrderDate.ToShortDateString()</span>
									}
								</td>
								<td class="cell-editable" @onclick="() => StartEditing(order.SupplyOrderId, SupplierField)">
									@if (editingOrderId == order.SupplyOrderId && editingField == SupplierField)
									{
										<select class="form-select form-select-sm" value="@order.SupplierId"
												@onchange="(e) => UpdateOrderField(order, SupplierField, e.Value)"
												@onblur="() => StopEditing()"
												@onclick:stopPropagation="true">
											@foreach (var supplier in suppliers)
											{
												<option value="@supplier.supplier_id">@supplier.name</option>
											}
										</select>
									}
									else
									{
										<span>@order.SupplierName</span>
									}
								</td>
								<td class="cell-editable" @onclick="() => StartEditing(order.SupplyOrderId, StatusField)">
									@if (editingOrderId == order.SupplyOrderId && editingField == StatusField)
									{
										<select class="form-select form-select-sm" value="@order.StatusId"
												@onchange="(e) => UpdateOrderField(order, StatusField, e.Value)"
												@onblur="() => StopEditing()"
												@onclick:stopPropagation="true">
											@foreach (var status in statuses)
											{
												<option value="@status.status_id">@status.status_name</option>
											}
										</select>
									}
									else
									{
										<span class="@GetStatusBadgeClass(order.StatusName)">@order.StatusName</span>
									}
								</td>
								<td class="cell-editable" @onclick="() => StartEditing(order.SupplyOrderId, EmployeeField)">
									@if (editingOrderId == order.SupplyOrderId && editingField == EmployeeField)
									{
										<select class="form-select form-select-sm" value="@order.EmployeeId"
												@onchange="(e) => UpdateOrderField(order, EmployeeField, e.Value)"
												@onblur="() => StopEditing()"
												@onclick:stopPropagation="true">
											@foreach (var employee in employees)
											{
												<option value="@employee.employee_id">@($"{employee.first_name} {employee.last_name}")</option>
											}
										</select>
									}
									else
									{
										<span>@order.EmployeeName</span>
									}
								</td>
																	</Authorized>
								</AuthorizeView>

								<AuthorizeView Policy=@Roles.WarehouseWorker>
									<Authorized Context="warehouserWorkerReadOnly">
										<td>
											<span>@order.OrderDate.ToShortDateString()</span>
										</td>
										<td>
											<span>@order.SupplierName</span>
										</td>
										<td>
											<span class="@GetStatusBadgeClass(order.StatusName)">@order.StatusName</span>
										</td>
										<td>
											<span>@order.EmployeeName</span>
										</td>
									</Authorized>
								</AuthorizeView>
								<td>@order.SuppliedEquipmentItems.Count одиниць</td>
								<td class="text-end">@order.TotalAmount.ToString("C2")</td>
								<td>
									<div class="d-flex justify-content-around">
										<button class="btn btn-sm btn-primary me-1" @onclick="() => ToggleOrderDetails(order)">
											<i class="bi bi-info-lg"></i>
										</button>
										<AuthorizeView Policy=@Roles.WarehouseWorker>
											<Authorized Context="deleteSupplyOrder">
												<button class="btn btn-sm btn-danger" @onclick="(e) => DeleteOrder(order.SupplyOrderId, e)">
													<i class="bi bi-trash"></i>
												</button>
											</Authorized>
										</AuthorizeView>
									</div>
								</td>
							</tr>

							@if (selectedOrder?.SupplyOrderId == order.SupplyOrderId)
							{
								<tr>
									<td colspan="8" class="p-0 order-details-container">
										<OrderDetailsPanel Order="selectedOrder"
														   Suppliers="suppliers"
														   Statuses="statuses"
														   Employees="employees"
														   EquipmentList="equipmentList"
														   Positions="positions"
														   Categories="categories"
														   ProductPlacements="productPlacements"
														   AvailableEquipmentList="availableEquipments"
														   Clubs="clubs"
														   Types="types"
														   Brands="brands"
														   OnSave="SaveOrderDetails"
														   OnClose="CloseOrderDetails" />
									</td>
								</tr>
							}
						}
					</tbody>
				</table>
			</div>
		</div>

		<PaginationControl CurrentPage="currentPage"
						   PageSize="pageSize"
						   TotalItems="FilteredOrders.Count()"
						   TotalPages="TotalPages"
						   OnPageChanged="GoToPage"
						   OnPageSizeChanged="(size) => { pageSize = size; currentPage = 1; }" />

	</Authorized>
	<NotAuthorized>
		<p>Ця функція доступна тільки для працівників складу та офіс-менеджерів.</p>
	</NotAuthorized>
</AuthorizeView>

@code {
	private const string OrderNumberField = "OrderNumber";
	private const string OrderDateField = "OrderDate";
	private const string SupplierField = "Supplier";
	private const string StatusField = "Status";
	private const string EmployeeField = "Employee";

	private string searchQuery = "";
	private int statusFilter = 0;
	private int supplierFilter = 0;
	private int employeeFilter = 0;
	private DateTime? dateFromFilter = null;
	private DateTime? dateToFilter = null;
	private List<SupplyOrderViewModel> orders = new();
	private List<Supplier> suppliers = new();
	private List<SupplyOrderStatus> statuses = new();
	private List<Employee> employees = new();
	private List<Equipment> equipmentList = new();
	private List<SuppliedEquipment> suppliedEquipments = new();
	private List<Domain.Entities.Position> positions = new();
	private List<Category> categories = new();
	private List<ProductPlacement> productPlacements = new();
	private List<AvailableEquipment> availableEquipments = new();
	private List<Club> clubs = new();
	private List<Domain.Entities.Type> types = new();
	private List<Brand> brands = new();

	private SupplyOrderViewModel? selectedOrder;
	private int editingOrderId = -1;
	private string editingField = "";
	private bool isProcessing = false;

	// Pagination parameters
	private int currentPage = 1;
	private int pageSize = 10;

	private IEnumerable<SupplyOrderViewModel> FilteredOrders =>
	orders.Where(o =>
	(string.IsNullOrWhiteSpace(searchQuery) ||
	o.SupplyOrderNumber.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
	o.SupplierName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
	o.StatusName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
	o.EmployeeName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
	(statusFilter == 0 || o.StatusId == statusFilter) &&
	(supplierFilter == 0 || o.SupplierId == supplierFilter) &&
	(employeeFilter == 0 || o.EmployeeId == employeeFilter) &&
	(!dateFromFilter.HasValue || o.OrderDate.Date >= dateFromFilter.Value.Date) &&
	(!dateToFilter.HasValue || o.OrderDate.Date <= dateToFilter.Value.Date)
	);

	private IEnumerable<SupplyOrderViewModel> PaginatedOrders =>
	FilteredOrders.Skip((currentPage - 1) * pageSize).Take(pageSize);

	private int TotalPages => (int)Math.Ceiling(FilteredOrders.Count() / (double)pageSize);

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	private void GoToPage(int page)
	{
		if (page < 1 || page > TotalPages)
			return;

		currentPage = page;
	}

	// Add these variables to the @code section
	private bool showExportForm = false;
	private ExportFormat exportFormat = ExportFormat.CSV;
	private string exportScope = "filtered";
	private string exportDetailLevel = "basic";
	private bool isExporting = false;

	// Column selection
	private bool includeOrderNumber = true;
	private bool includeOrderDate = true;
	private bool includeSupplier = true;
	private bool includeStatus = true;
	private bool includeEmployee = true;
	private bool includeTotalAmount = true;
	private bool includeEquipment = true;
	private bool includeBrand = true;
	private bool includeCategory = true;
	private bool includeType = true;
	private bool includePlacements = true;
	private bool includeClub = true;

	private void ToggleExportForm()
	{
		showExportForm = !showExportForm;
	}

	private async Task ExportData()
	{
		isExporting = true;
		try
		{
			var fileName = $"supply_orders_{DateTime.Now:yyyyMMdd_HHmmss}";
			var fileExtension = exportFormat == ExportFormat.CSV ? "csv" : "json";

			// Determine which orders to export
			var ordersToExport = exportScope == "filtered" ? FilteredOrders : orders;

			string content = "";
			string contentType = "";
			// Prepare data for export based on detail level
			if (exportDetailLevel == "basic")
			{
				var basicData = ordersToExport.Select(o => new
				{
					OrderNumber = includeOrderNumber ? o.SupplyOrderNumber : null,
					OrderDate = includeOrderDate ? o.OrderDate.ToShortDateString() : null,
					Supplier = includeSupplier ? o.SupplierName : null,
					Status = includeStatus ? o.StatusName : null,
					Employee = includeEmployee ? o.EmployeeName : null,
					TotalAmount = includeTotalAmount ? o.TotalAmount : (decimal?)null
				});

				// Define the properties to include
				var properties = new Dictionary<string, Func<object, object>>();
				if (includeOrderNumber) properties.Add("Order Number", o => ((dynamic)o).OrderNumber);
				if (includeOrderDate) properties.Add("Order Date", o => ((dynamic)o).OrderDate);
				if (includeSupplier) properties.Add("Supplier", o => ((dynamic)o).Supplier);
				if (includeStatus) properties.Add("Status", o => ((dynamic)o).Status);
				if (includeEmployee) properties.Add("Employee", o => ((dynamic)o).Employee);
				if (includeTotalAmount) properties.Add("Total Amount", o => ((dynamic)o).TotalAmount);

				// Export the data
				if (exportFormat == ExportFormat.CSV)
				{
					content = ExportService.ExportToCsv(basicData, properties);
					contentType = "text/csv";
				}
				else
				{
					content = ExportService.ExportToJson(basicData, properties);
					contentType = "application/json";
				}
			}
			else if (exportDetailLevel == "detailed")
			{
				var detailedData = ordersToExport.Select(o => new
				{
					OrderNumber = includeOrderNumber ? o.SupplyOrderNumber : null,
					OrderDate = includeOrderDate ? o.OrderDate.ToShortDateString() : null,
					Supplier = includeSupplier ? o.SupplierName : null,
					Status = includeStatus ? o.StatusName : null,
					Employee = includeEmployee ? o.EmployeeName : null,
					TotalAmount = includeTotalAmount ? o.TotalAmount : (decimal?)null,
					Equipment = includeEquipment ? o.SuppliedEquipmentItems.Select(e => new
					{
						Name = e.EquipmentName,
						Brand = includeBrand ? brands.FirstOrDefault(b => b.brand_id == equipmentList.FirstOrDefault(eq => eq.equipment_id == e.EquipmentId)?.brand_id)?.brand_name : null,
						Category = includeCategory ? categories.FirstOrDefault(c => c.category_id == equipmentList.FirstOrDefault(eq => eq.equipment_id == e.EquipmentId)?.category_id)?.category_name : null,
						Type = includeType ? types.FirstOrDefault(t => t.type_id == equipmentList.FirstOrDefault(eq => eq.equipment_id == e.EquipmentId)?.type_id)?.type_name : null,
						Model = equipmentList.FirstOrDefault(eq => eq.equipment_id == e.EquipmentId)?.model,
						Quantity = e.Quantity,
						Price = e.Price
					}).ToList() : null
				});

				if (exportFormat == ExportFormat.JSON)
				{
					content = System.Text.Json.JsonSerializer.Serialize(detailedData, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
					contentType = "application/json";
				}
				else
				{
					// For CSV we need to flatten the structure
					var flattenedData = new List<object>();

					foreach (var order in detailedData)
					{
						if (order.Equipment != null && order.Equipment.Any())
						{
							foreach (var equipment in order.Equipment)
							{
								flattenedData.Add(new
								{
									OrderNumber = order.OrderNumber,
									OrderDate = order.OrderDate,
									Supplier = order.Supplier,
									Status = order.Status,
									Employee = order.Employee,
									TotalAmount = order.TotalAmount,
									EquipmentName = equipment.Name,
									Brand = equipment.Brand,
									Category = equipment.Category,
									Type = equipment.Type,
									Model = equipment.Model,
									Quantity = equipment.Quantity,
									Price = equipment.Price
								});
							}
						}
						else
						{
							flattenedData.Add(new
							{
								OrderNumber = order.OrderNumber,
								OrderDate = order.OrderDate,
								Supplier = order.Supplier,
								Status = order.Status,
								Employee = order.Employee,
								TotalAmount = order.TotalAmount,
								EquipmentName = (string)null,
								Brand = (string)null,
								Category = (string)null,
								Type = (string)null,
								Model = (string)null,
								Quantity = (int?)null,
								Price = (decimal?)null
							});
						}
					}

					var properties = new Dictionary<string, Func<object, object>>();
					if (includeOrderNumber) properties.Add("Order Number", o => ((dynamic)o).OrderNumber);
					if (includeOrderDate) properties.Add("Order Date", o => ((dynamic)o).OrderDate);
					if (includeSupplier) properties.Add("Supplier", o => ((dynamic)o).Supplier);
					if (includeStatus) properties.Add("Status", o => ((dynamic)o).Status);
					if (includeEmployee) properties.Add("Employee", o => ((dynamic)o).Employee);
					if (includeTotalAmount) properties.Add("Total Amount", o => ((dynamic)o).TotalAmount);
					if (includeEquipment) properties.Add("Equipment Name", o => ((dynamic)o).EquipmentName);
					if (includeBrand) properties.Add("Brand", o => ((dynamic)o).Brand);
					if (includeCategory) properties.Add("Category", o => ((dynamic)o).Category);
					if (includeType) properties.Add("Type", o => ((dynamic)o).Type);
					properties.Add("Model", o => ((dynamic)o).Model);
					properties.Add("Quantity", o => ((dynamic)o).Quantity);
					properties.Add("Price", o => ((dynamic)o).Price);

					content = ExportService.ExportToCsv(flattenedData, properties);
					contentType = "text/csv";
				}
			}
			else // full details
			{
				var fullData = new List<object>();

				foreach (var order in ordersToExport)
				{
					var orderData = new Dictionary<string, object>();

					if (includeOrderNumber) orderData["OrderNumber"] = order.SupplyOrderNumber;
					if (includeOrderDate) orderData["OrderDate"] = order.OrderDate.ToShortDateString();
					if (includeSupplier) orderData["Supplier"] = order.SupplierName;
					if (includeStatus) orderData["Status"] = order.StatusName;
					if (includeEmployee) orderData["Employee"] = order.EmployeeName;
					if (includeTotalAmount) orderData["TotalAmount"] = order.TotalAmount;

					if (includeEquipment && order.SuppliedEquipmentItems.Any())
					{
						var equipmentList = new List<object>();

						foreach (var equipment in order.SuppliedEquipmentItems)
						{
							var equipmentData = new Dictionary<string, object>();
							equipmentData["Name"] = equipment.EquipmentName;

							var equipDetails = this.equipmentList.FirstOrDefault(eq => eq.equipment_id == equipment.EquipmentId);
							if (equipDetails != null)
							{
								if (includeBrand) equipmentData["Brand"] = brands.FirstOrDefault(b => b.brand_id == equipDetails.brand_id)?.brand_name;
								if (includeCategory) equipmentData["Category"] = categories.FirstOrDefault(c => c.category_id == equipDetails.category_id)?.category_name;
								if (includeType) equipmentData["Type"] = types.FirstOrDefault(t => t.type_id == equipDetails.type_id)?.type_name;
								equipmentData["Model"] = equipDetails.model;
							}

							equipmentData["Quantity"] = equipment.Quantity;
							equipmentData["Price"] = equipment.Price;

							if (includePlacements && equipment.Placements.Any())
							{
								var placementList = new List<object>();

								foreach (var placement in equipment.Placements)
								{
									var placementData = new Dictionary<string, object>();
									placementData["PlacementDate"] = placement.PlacementDate.ToShortDateString();
									placementData["Quantity"] = placement.Quantity;
									placementData["Employee"] = placement.EmployeeName;

									if (includeClub) placementData["Club"] = placement.ClubName;

									placementList.Add(placementData);
								}

								equipmentData["Placements"] = placementList;
							}

							equipmentList.Add(equipmentData);
						}

						orderData["Equipment"] = equipmentList;
					}

					fullData.Add(orderData);
				}

				if (exportFormat == ExportFormat.JSON)
				{
					content = System.Text.Json.JsonSerializer.Serialize(fullData, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
					contentType = "application/json";

				}
				else
				{
					// For CSV we need to flatten the nested structure completely
					var flattenedData = new List<object>();

					foreach (var orderObj in fullData)
					{
						var order = (Dictionary<string, object>)orderObj;

						if (order.ContainsKey("Equipment") && order["Equipment"] is List<object> equipmentList && equipmentList.Any())
						{
							foreach (var equipObj in equipmentList)
							{
								var equipment = (Dictionary<string, object>)equipObj;

								if (equipment.ContainsKey("Placements") && equipment["Placements"] is List<object> placementList && placementList.Any())
								{
									foreach (var placementObj in placementList)
									{
										var placement = (Dictionary<string, object>)placementObj;

										var row = new Dictionary<string, object>();
										if (includeOrderNumber && order.ContainsKey("OrderNumber")) row["OrderNumber"] = order["OrderNumber"];
										if (includeOrderDate && order.ContainsKey("OrderDate")) row["OrderDate"] = order["OrderDate"];
										if (includeSupplier && order.ContainsKey("Supplier")) row["Supplier"] = order["Supplier"];
										if (includeStatus && order.ContainsKey("Status")) row["Status"] = order["Status"];
										if (includeEmployee && order.ContainsKey("Employee")) row["Employee"] = order["Employee"];
										if (includeTotalAmount && order.ContainsKey("TotalAmount")) row["TotalAmount"] = order["TotalAmount"];

										if (includeEquipment) row["EquipmentName"] = equipment["Name"];
										if (includeBrand && equipment.ContainsKey("Brand")) row["Brand"] = equipment["Brand"];
										if (includeCategory && equipment.ContainsKey("Category")) row["Category"] = equipment["Category"];
										if (includeType && equipment.ContainsKey("Type")) row["Type"] = equipment["Type"];
										row["Model"] = equipment.ContainsKey("Model") ? equipment["Model"] : null;
										row["EquipmentQuantity"] = equipment["Quantity"];
										row["EquipmentPrice"] = equipment["Price"];

										row["PlacementDate"] = placement["PlacementDate"];
										row["PlacementQuantity"] = placement["Quantity"];
										row["PlacementEmployee"] = placement["Employee"];
										if (includeClub && placement.ContainsKey("Club")) row["Club"] = placement["Club"];

										flattenedData.Add(row);
									}
								}
								else
								{
									var row = new Dictionary<string, object>();
									if (includeOrderNumber && order.ContainsKey("OrderNumber")) row["OrderNumber"] = order["OrderNumber"];
									if (includeOrderDate && order.ContainsKey("OrderDate")) row["OrderDate"] = order["OrderDate"];
									if (includeSupplier && order.ContainsKey("Supplier")) row["Supplier"] = order["Supplier"];
									if (includeStatus && order.ContainsKey("Status")) row["Status"] = order["Status"];
									if (includeEmployee && order.ContainsKey("Employee")) row["Employee"] = order["Employee"];
									if (includeTotalAmount && order.ContainsKey("TotalAmount")) row["TotalAmount"] = order["TotalAmount"];

									if (includeEquipment) row["EquipmentName"] = equipment["Name"];
									if (includeBrand && equipment.ContainsKey("Brand")) row["Brand"] = equipment["Brand"];
									if (includeCategory && equipment.ContainsKey("Category")) row["Category"] = equipment["Category"];
									if (includeType && equipment.ContainsKey("Type")) row["Type"] = equipment["Type"];
									row["Model"] = equipment.ContainsKey("Model") ? equipment["Model"] : null;
									row["EquipmentQuantity"] = equipment["Quantity"];
									row["EquipmentPrice"] = equipment["Price"];

									row["PlacementDate"] = null;
									row["PlacementQuantity"] = null;
									row["PlacementEmployee"] = null;
									if (includeClub) row["Club"] = null;

									flattenedData.Add(row);
								}
							}
						}
						else
						{
							var row = new Dictionary<string, object>();
							if (includeOrderNumber && order.ContainsKey("OrderNumber")) row["OrderNumber"] = order["OrderNumber"];
							if (includeOrderDate && order.ContainsKey("OrderDate")) row["OrderDate"] = order["OrderDate"];
							if (includeSupplier && order.ContainsKey("Supplier")) row["Supplier"] = order["Supplier"];
							if (includeStatus && order.ContainsKey("Status")) row["Status"] = order["Status"];
							if (includeEmployee && order.ContainsKey("Employee")) row["Employee"] = order["Employee"];
							if (includeTotalAmount && order.ContainsKey("TotalAmount")) row["TotalAmount"] = order["TotalAmount"];

							flattenedData.Add(row);
						}
					}

					var properties = new Dictionary<string, Func<object, object>>();
					if (includeOrderNumber) properties.Add("Order Number", o => ((Dictionary<string, object>)o).ContainsKey("OrderNumber") ? ((Dictionary<string, object>)o)["OrderNumber"] : null);
					if (includeOrderDate) properties.Add("Order Date", o => ((Dictionary<string, object>)o).ContainsKey("OrderDate") ? ((Dictionary<string, object>)o)["OrderDate"] : null);
					if (includeSupplier) properties.Add("Supplier", o => ((Dictionary<string, object>)o).ContainsKey("Supplier") ? ((Dictionary<string, object>)o)["Supplier"] : null);
					if (includeStatus) properties.Add("Status", o => ((Dictionary<string, object>)o).ContainsKey("Status") ? ((Dictionary<string, object>)o)["Status"] : null);
					if (includeEmployee) properties.Add("Employee", o => ((Dictionary<string, object>)o).ContainsKey("Employee") ? ((Dictionary<string, object>)o)["Employee"] : null);
					if (includeTotalAmount) properties.Add("Total Amount", o => ((Dictionary<string, object>)o).ContainsKey("TotalAmount") ? ((Dictionary<string, object>)o)["TotalAmount"] : null);

					if (includeEquipment) properties.Add("Equipment Name", o => ((Dictionary<string, object>)o).ContainsKey("EquipmentName") ? ((Dictionary<string, object>)o)["EquipmentName"] : null);
					if (includeBrand) properties.Add("Brand", o => ((Dictionary<string, object>)o).ContainsKey("Brand") ? ((Dictionary<string, object>)o)["Brand"] : null);
					if (includeCategory) properties.Add("Category", o => ((Dictionary<string, object>)o).ContainsKey("Category") ? ((Dictionary<string, object>)o)["Category"] : null);
					if (includeType) properties.Add("Type", o => ((Dictionary<string, object>)o).ContainsKey("Type") ? ((Dictionary<string, object>)o)["Type"] : null);
					properties.Add("Model", o => ((Dictionary<string, object>)o).ContainsKey("Model") ? ((Dictionary<string, object>)o)["Model"] : null);
					properties.Add("Equipment Quantity", o => ((Dictionary<string, object>)o).ContainsKey("EquipmentQuantity") ? ((Dictionary<string, object>)o)["EquipmentQuantity"] : null);
					properties.Add("Equipment Price", o => ((Dictionary<string, object>)o).ContainsKey("EquipmentPrice") ? ((Dictionary<string, object>)o)["EquipmentPrice"] : null);

					properties.Add("Placement Date", o => ((Dictionary<string, object>)o).ContainsKey("PlacementDate") ? ((Dictionary<string, object>)o)["PlacementDate"] : null);
					properties.Add("Placement Quantity", o => ((Dictionary<string, object>)o).ContainsKey("PlacementQuantity") ? ((Dictionary<string, object>)o)["PlacementQuantity"] : null);
					properties.Add("Placement Employee", o => ((Dictionary<string, object>)o).ContainsKey("PlacementEmployee") ? ((Dictionary<string, object>)o)["PlacementEmployee"] : null);
					if (includeClub) properties.Add("Club", o => ((Dictionary<string, object>)o).ContainsKey("Club") ? ((Dictionary<string, object>)o)["Club"] : null);

					content = ExportService.ExportToCsv(flattenedData, properties);
					contentType = "text/csv";
				}

			}

			await BlazorDownloadFileService.DownloadFileFromText(
			$"{fileName}.{fileExtension}",
			content,
			System.Text.Encoding.UTF8,
			contentType);

			Snackbar.Add($"Export completed successfully!", MudBlazor.Severity.Success);
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Export failed: {ex.Message}", MudBlazor.Severity.Error);
		}
		finally
		{
			isExporting = false;
		}
	}

	private async Task LoadData()
	{
		try
		{
			var supplyOrdersResponse = await ApiFacade.SupplyOrdersApiService.Get();
			var suppliersResponse = await ApiFacade.SuppliersApiService.Get();
			var statusesResponse = await ApiFacade.SupplyOrderStatusApiService.Get();
			var employeesResponse = await ApiFacade.EmployeeApiService.Get();
			var equipmentResponse = await ApiFacade.EquipmentApiService.Get();
			var suppliedEquipmentsResponse = await ApiFacade.SuppliedEquipmentApiService.Get();
			var positionsResponse = await ApiFacade.PositionApiService.Get();
			var categoriesResponse = await ApiFacade.CategoryApiService.Get();
			var productPlacementsResponse = await ApiFacade.ProductPlacementApiService.Get();
			var availableEquipmentsResponse = await ApiFacade.AvailableEquipmentApiService.Get();
			var clubsResponse = await ApiFacade.ClubApiService.Get();
			var typesResponse = await ApiFacade.TypeApiService.Get();
			var brandsResponse = await ApiFacade.BrandApiService.Get();

			if (!supplyOrdersResponse.IsSuccessStatusCode ||
			!suppliersResponse.IsSuccessStatusCode ||
			!statusesResponse.IsSuccessStatusCode ||
			!employeesResponse.IsSuccessStatusCode ||
			!equipmentResponse.IsSuccessStatusCode ||
			!suppliedEquipmentsResponse.IsSuccessStatusCode ||
			!positionsResponse.IsSuccessStatusCode ||
			!categoriesResponse.IsSuccessStatusCode ||
			!productPlacementsResponse.IsSuccessStatusCode ||
			!availableEquipmentsResponse.IsSuccessStatusCode ||
			!clubsResponse.IsSuccessStatusCode ||
			!typesResponse.IsSuccessStatusCode ||
			!brandsResponse.IsSuccessStatusCode)
			{
				Snackbar.Add("Не вдалося завантажити деякі дані. Будь ласка, оновіть сторінку.", MudBlazor.Severity.Error);
				return;
			}

			var supplyOrders = supplyOrdersResponse.Content;
			suppliers = suppliersResponse.Content.ToList();
			statuses = statusesResponse.Content.ToList();
			employees = employeesResponse.Content.ToList();
			equipmentList = equipmentResponse.Content.ToList();
			suppliedEquipments = suppliedEquipmentsResponse.Content.ToList();
			positions = positionsResponse.Content.ToList();
			categories = categoriesResponse.Content.ToList();
			productPlacements = productPlacementsResponse.Content.ToList();
			availableEquipments = availableEquipmentsResponse.Content.ToList();
			clubs = clubsResponse.Content.ToList();
			types = typesResponse.Content.ToList();
			brands = brandsResponse.Content.ToList();

			orders = supplyOrders.Select(o => new SupplyOrderViewModel
				{
					SupplyOrderId = o.supply_order_id,
					SupplyOrderNumber = o.supply_order_number,
					OrderDate = o.order_date,
					SupplierId = o.supplier_id,
					SupplierName = suppliers.FirstOrDefault(s => s.supplier_id == o.supplier_id)?.name ?? "Unknown",
					StatusId = o.status_id,
					StatusName = statuses.FirstOrDefault(s => s.status_id == o.status_id)?.status_name ?? "Unknown",
					EmployeeId = o.employee_id,
					EmployeeName = GetEmployeeName(o.employee_id),
					TotalAmount = o.total_amount,
					SuppliedEquipmentItems = GetSuppliedEquipmentItems(o.supply_order_id)
				}).ToList();

			// Reset to first page when data is loaded or refreshed
			currentPage = 1;

			// Reset selectedOrder to ensure it has the fresh data
			if (selectedOrder != null)
			{
				var updatedOrder = orders.FirstOrDefault(o => o.SupplyOrderId == selectedOrder.SupplyOrderId);
				if (updatedOrder != null)
				{
					selectedOrder = updatedOrder;
				}
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Не вдалось загрузити дані", MudBlazor.Severity.Error);
		}
	}

	private string GetEmployeeName(int employeeId)
	{
		var employee = employees.FirstOrDefault(e => e.employee_id == employeeId);
		return employee != null ? $"{employee.first_name} {employee.last_name}" : "Невідомо";
	}

	private List<SuppliedEquipmentViewModel> GetSuppliedEquipmentItems(int supplyOrderId)
	{
		var equipmentItems = suppliedEquipments
		.Where(se => se.supply_order_id == supplyOrderId)
		.Select(se => new SuppliedEquipmentViewModel
			{
				SuppliedEquipmentId = se.supplied_equipment_id,
				SupplyOrderId = se.supply_order_id,
				EquipmentId = se.equipment_id,
				EquipmentName = equipmentList.FirstOrDefault(e => e.equipment_id == se.equipment_id)?.name ?? "Невідомо",
				Quantity = se.quantity,
				Price = se.price,
				IsExisting = true,
				Placements = GetPlacements(se.supplied_equipment_id)
			}).ToList();

		return equipmentItems;
	}

	private List<PlacementViewModel> GetPlacements(int suppliedEquipmentId)
	{
		return productPlacements
		.Where(pp => pp.supplied_equipment_id == suppliedEquipmentId)
		.Select(pp =>
		{
			var availableEquipment = availableEquipments.FirstOrDefault(ae => ae.available_id == pp.available_id);
			return new PlacementViewModel
				{
					PlacementId = pp.placement_id,
					PlacementDate = pp.placement_date,
					Quantity = pp.quantity,
					EmployeeId = pp.employee_id,
					EmployeeName = GetEmployeeName(pp.employee_id),
					ClubId = availableEquipment?.club_id ?? 0,
					ClubName = clubs.FirstOrDefault(c => c.club_id == availableEquipment?.club_id)?.name ?? "Unknown",
					AvailableId = pp.available_id,
					IsExisting = true
				};
		}).ToList();
	}

	private string GetStatusBadgeClass(string statusName)
	{
		return statusName switch
		{
			SupplyOrderStatuses.Pending => "badge bg-warning text-dark",
			SupplyOrderStatuses.Confirmed => "badge bg-info text-dark",
			SupplyOrderStatuses.Processing => "badge bg-primary",
			SupplyOrderStatuses.Completed => "badge bg-success",
			SupplyOrderStatuses.Cancelled => "badge bg-danger",
			_ => "badge bg-secondary"
		};
	}

	private string GetStatusRowClass(string statusName)
	{
		return statusName switch
		{
			SupplyOrderStatuses.Pending => "table-warning",
			SupplyOrderStatuses.Confirmed => "table-info",
			SupplyOrderStatuses.Processing => "table-primary",
			SupplyOrderStatuses.Completed => "table-success",
			SupplyOrderStatuses.Cancelled => "table-danger",
			_ => "table-secondary"
		};
	}

	private void StartEditing(int orderId, string field)
	{
		editingOrderId = orderId;
		editingField = field;
		StateHasChanged();
	}

	private async Task HandleKeyDown(KeyboardEventArgs e, SupplyOrderViewModel order, string field)
	{
		if (e.Key == "Enter")
		{
			StopEditing();
			await SaveRowChanges(order);
		}
		else if (e.Key == "Escape")
		{
			StopEditing();
		}
	}

	private void StopEditing()
	{
		editingOrderId = -1;
		editingField = "";
	}

	private async Task UpdateOrderField(SupplyOrderViewModel order, string field, object value)
	{
		try
		{
			switch (field)
			{
				case "OrderNumber":
					order.SupplyOrderNumber = value?.ToString() ?? "";
					break;
				case "OrderDate":
					if (DateTime.TryParse(value?.ToString(), out DateTime date))
					{
						order.OrderDate = date;
					}
					break;
				case "Supplier":
					if (int.TryParse(value?.ToString(), out int supplierId))
					{
						order.SupplierId = supplierId;
						order.SupplierName = suppliers.FirstOrDefault(s => s.supplier_id == supplierId)?.name ?? "Невідомо";

						// Update details in selected order if it's the same order
						if (selectedOrder != null && selectedOrder.SupplyOrderId == order.SupplyOrderId)
						{
							selectedOrder.SupplierId = supplierId;
							selectedOrder.SupplierName = order.SupplierName;
						}
					}
					break;
				case "Status":
					if (int.TryParse(value?.ToString(), out int statusId))
					{
						order.StatusId = statusId;
						order.StatusName = statuses.FirstOrDefault(s => s.status_id == statusId)?.status_name ?? "Невідомо";

						// Update details in selected order if it's the same order
						if (selectedOrder != null && selectedOrder.SupplyOrderId == order.SupplyOrderId)
						{
							selectedOrder.StatusId = statusId;
							selectedOrder.StatusName = order.StatusName;
						}
					}
					break;
				case "Employee":
					if (int.TryParse(value?.ToString(), out int employeeId))
					{
						order.EmployeeId = employeeId;
						order.EmployeeName = GetEmployeeName(employeeId);

						// Update details in selected order if it's the same order
						if (selectedOrder != null && selectedOrder.SupplyOrderId == order.SupplyOrderId)
						{
							selectedOrder.EmployeeId = employeeId;
							selectedOrder.EmployeeName = order.EmployeeName;
						}
					}
					break;
			}

			await SaveRowChanges(order);
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка загрузки даних", MudBlazor.Severity.Error);
		}
	}

	private async Task SaveRowChanges(SupplyOrderViewModel order)
	{
		if (isProcessing) return;

		isProcessing = true;
		try
		{
			var supplyOrder = new SupplyOrder
				{
					supply_order_id = order.SupplyOrderId,
					supply_order_number = order.SupplyOrderNumber,
					order_date = order.OrderDate,
					supplier_id = order.SupplierId,
					status_id = order.StatusId,
					employee_id = order.EmployeeId,
					total_amount = order.TotalAmount,
					UpdateDatetime = DateTime.Now
				};

			var updateResponse = await ApiFacade.SupplyOrdersApiService.Update(supplyOrder.supply_order_id, supplyOrder);

			if (updateResponse.IsSuccessStatusCode)
			{
				Snackbar.Add("Замовлення успішно оновлено!", MudBlazor.Severity.Success);
			}
			else
			{
				Snackbar.Add("Не вдалося оновити замовлення.", MudBlazor.Severity.Error);
				await LoadData(); // Reload data to reset changes
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Помилка збереження змін", MudBlazor.Severity.Error);
			await LoadData(); // Reload data to reset changes
		}
		finally
		{
			isProcessing = false;
		}
	}

	private void ToggleOrderDetails(SupplyOrderViewModel order)
	{
		if (selectedOrder?.SupplyOrderId == order.SupplyOrderId)
		{
			selectedOrder = null;
		}
		else
		{
			selectedOrder = order;
		}
	}

	private void CloseOrderDetails()
	{
		selectedOrder = null;
	}
	private int GetEmployeeClubId(int employeeId)
	{
		var employee = employees.FirstOrDefault(e => e.employee_id == employeeId);
		return employee?.club_id ?? 0;
	}

	private async Task SaveOrderDetails()
	{
		if (selectedOrder != null)
		{
			try
			{
				// Save base order information
				var supplyOrder = new SupplyOrder
					{
						supply_order_id = selectedOrder.SupplyOrderId,
						supply_order_number = selectedOrder.SupplyOrderNumber,
						order_date = selectedOrder.OrderDate,
						supplier_id = selectedOrder.SupplierId,
						status_id = selectedOrder.StatusId,
						employee_id = selectedOrder.EmployeeId,
						total_amount = selectedOrder.TotalAmount,
						UpdateDatetime = DateTime.Now
					};

				var updateResponse = await ApiFacade.SupplyOrdersApiService.Update(supplyOrder.supply_order_id, supplyOrder);

				if (!updateResponse.IsSuccessStatusCode)
				{
					Snackbar.Add("Не вдалося оновити замовлення.", MudBlazor.Severity.Error);
					return;
				}

				// Process deleted items
				var currentEquipmentIds = selectedOrder.SuppliedEquipmentItems
				.Where(i => i.IsExisting)
				.Select(i => i.SuppliedEquipmentId)
				.ToList();

				var itemsToDelete = suppliedEquipments
				.Where(se => se.supply_order_id == selectedOrder.SupplyOrderId)
				.Where(se => !currentEquipmentIds.Contains(se.supplied_equipment_id))
				.ToList();

				foreach (var item in itemsToDelete)
				{
					// Check if this item has any placements first
					var hasPlacement = productPlacements.Any(p => p.supplied_equipment_id == item.supplied_equipment_id);
					if (hasPlacement)
					{
						Snackbar.Add($"Неможливо видалити обладнання з місцями розташування", MudBlazor.Severity.Warning);
						continue;
					}

					await ApiFacade.SuppliedEquipmentApiService.Delete(item.supplied_equipment_id);
				}

				// Save supplied equipment items
				foreach (var item in selectedOrder.SuppliedEquipmentItems)
				{
					var suppliedEquipment = new SuppliedEquipment
						{
							supplied_equipment_id = item.SuppliedEquipmentId,
							supply_order_id = item.SupplyOrderId,
							equipment_id = item.EquipmentId,
							quantity = item.Quantity,
							price = item.Price,
							UpdateDatetime = DateTime.Now
						};

					if (item.SuppliedEquipmentId > 0 && item.IsExisting)
					{
						var response = await ApiFacade.SuppliedEquipmentApiService.Update(suppliedEquipment.supplied_equipment_id, suppliedEquipment);
						if (response.IsSuccessStatusCode)
						{
							Snackbar.Add("Успішно оновлено запис обладнання у замовленні", MudBlazor.Severity.Success);
						}
						else
						{
							Snackbar.Add("Не вдалося створити запис обладнання у замовленні", MudBlazor.Severity.Error);
							continue;
						}
					}
					else if (!item.IsExisting)
					{
						// For new items
						suppliedEquipment.CreateDatetime = DateTime.Now;
						var createResponse = await ApiFacade.SuppliedEquipmentApiService.Create(suppliedEquipment);
						if (createResponse.IsSuccessStatusCode && createResponse.Content != null)
						{
							item.SuppliedEquipmentId = createResponse.Content.supplied_equipment_id;
							item.IsExisting = true;
						}
					}

					// Process placement items
					if (item.Placements != null && item.Placements.Any())
					{
						foreach (var placement in item.Placements)
						{
							if (!placement.IsExisting)
							{
								// If there's no available equipment record for this club and equipment, create one
								var availableEquipment = availableEquipments.FirstOrDefault(ae =>
								ae.equipment_id == item.EquipmentId && ae.club_id == placement.ClubId);

								if (availableEquipment == null)
								{
									// Create new available equipment record
									var newAvailable = new AvailableEquipment
										{
											equipment_id = item.EquipmentId,
											club_id = placement.ClubId,
											available_quantity = placement.Quantity,
											rental_price = item.Price * 1.5m, // Default markup for rental
											CreateDatetime = DateTime.Now,
											UpdateDatetime = DateTime.Now
										};

									var availableResponse = await ApiFacade.AvailableEquipmentApiService.Create(newAvailable);
									if (availableResponse.IsSuccessStatusCode && availableResponse.Content != null)
									{
										availableEquipment = availableResponse.Content;
										availableEquipments.Add(availableEquipment); // Add to local cache
									}
									else
									{
										Snackbar.Add("Не вдалося створити запис про доступне обладнання", MudBlazor.Severity.Error);
										continue;
									}
								}
								else
								{
									// Update existing available equipment quantity
									availableEquipment.available_quantity += placement.Quantity;
									var availableResponse = await ApiFacade.AvailableEquipmentApiService.Update(availableEquipment.available_id, availableEquipment);
									if (availableResponse.IsSuccessStatusCode)
									{
									}
									else
									{
										Snackbar.Add("Не вдалося створити запис про доступне обладнання", MudBlazor.Severity.Error);
										continue;
									}
								}

								// Create product placement record
								var newPlacement = new ProductPlacement
									{
										placement_date = placement.PlacementDate,
										quantity = placement.Quantity,
										employee_id = placement.EmployeeId,
										available_id = availableEquipment.available_id,
										supplied_equipment_id = item.SuppliedEquipmentId,
										CreateDatetime = DateTime.Now,
										UpdateDatetime = DateTime.Now
									};

								var placementResponse = await ApiFacade.ProductPlacementApiService.Create(newPlacement);
								if (placementResponse.IsSuccessStatusCode && placementResponse.Content != null)
								{
									productPlacements.Add(placementResponse.Content); // Add to local cache
									placement.PlacementId = placementResponse.Content.placement_id;
									placement.IsExisting = true;
								}
							}
						}
					}

					// Process placements from EquipmentManagementPanel
					var panelPlacements = productPlacements
					.Where(p => p.supplied_equipment_id == item.SuppliedEquipmentId &&
					!p.CreateDatetime.HasValue)
					.ToList();

					foreach (var placement in panelPlacements)
					{
						// Check if this is a new placement (not yet saved to database)
						if (placement.placement_id <= 0 || !placement.CreateDatetime.HasValue)
						{
							// Get available equipment
							var availableEquipment = availableEquipments.FirstOrDefault(ae => ae.available_id == placement.available_id);

							if (availableEquipment == null)
							{
								// Create new available equipment record
								var newAvailable = new AvailableEquipment
									{
										equipment_id = item.EquipmentId,
										club_id = GetEmployeeClubId(placement.employee_id),
										available_quantity = placement.quantity,
										rental_price = item.Price * 1.5m, // Default markup for rental
										CreateDatetime = DateTime.Now,
										UpdateDatetime = DateTime.Now
									};

								var availableResponse = await ApiFacade.AvailableEquipmentApiService.Create(newAvailable);
								if (availableResponse.IsSuccessStatusCode && availableResponse.Content != null)
								{
									availableEquipment = availableResponse.Content;
									availableEquipments.Add(availableEquipment); // Add to local cache
									placement.available_id = availableEquipment.available_id;
								}
								else
								{
									Snackbar.Add("Не вдалося створити запис про доступне обладнання", MudBlazor.Severity.Error);
									continue;
								}
							}
							else
							{
								// Update existing available equipment quantity
								availableEquipment.available_quantity += placement.quantity;
								await ApiFacade.AvailableEquipmentApiService.Update(availableEquipment.available_id, availableEquipment);
							}

							// Set creation datetime
							placement.CreateDatetime = DateTime.Now;
							placement.UpdateDatetime = DateTime.Now;

							// Create the placement in database
							var placementResponse = await ApiFacade.ProductPlacementApiService.Create(placement);
							if (!placementResponse.IsSuccessStatusCode)
							{
								Snackbar.Add("Не вдалося зберегти місце розташування.", MudBlazor.Severity.Error);
							}
						}
					}
				}

				// Update the main list item to reflect changes
				var mainListItem = orders.FirstOrDefault(o => o.SupplyOrderId == selectedOrder.SupplyOrderId);
				if (mainListItem != null)
				{
					// Update basic information
					mainListItem.SupplyOrderNumber = selectedOrder.SupplyOrderNumber;
					mainListItem.OrderDate = selectedOrder.OrderDate;
					mainListItem.SupplierId = selectedOrder.SupplierId;
					mainListItem.SupplierName = selectedOrder.SupplierName;
					mainListItem.StatusId = selectedOrder.StatusId;
					mainListItem.StatusName = selectedOrder.StatusName;
					mainListItem.EmployeeId = selectedOrder.EmployeeId;
					mainListItem.EmployeeName = selectedOrder.EmployeeName;
					mainListItem.TotalAmount = selectedOrder.TotalAmount;

					// Update equipment items count
					mainListItem.SuppliedEquipmentItems = selectedOrder.SuppliedEquipmentItems;
				}

				await LoadData();
				Snackbar.Add("Замовлення успішно оновлено!", MudBlazor.Severity.Success);
			}
			catch (Exception ex)
			{
				Snackbar.Add($"Помилка збереження замовлення", MudBlazor.Severity.Error);
			}
		}
	}
	private void CreateNewOrder()
	{
		NavigationManager.NavigateTo("/supply-orders/create");
	}

	private async Task DeleteOrder(int orderId, MouseEventArgs e)
	{
		bool confirmed = await JSRuntime.InvokeAsync<bool>("підтвердити", "Ви впевнені, що хочете видалити це замовлення та все пов'язане з ним обладнання?");
		if (confirmed)
		{
			try
			{
				// First delete all supplied equipment items
				var itemsToDelete = suppliedEquipments.Where(se => se.supply_order_id == orderId);
				foreach (var item in itemsToDelete)
				{
					await ApiFacade.SuppliedEquipmentApiService.Delete(item.supplied_equipment_id);
				}

				// Then delete the order
				var response = await ApiFacade.SupplyOrdersApiService.Delete(orderId);

				if (response.IsSuccessStatusCode)
				{
					// If we were viewing details of this order, close it
					if (selectedOrder?.SupplyOrderId == orderId)
					{
						selectedOrder = null;
					}

					Snackbar.Add("Замовлення успішно видалено!", MudBlazor.Severity.Success);
					await LoadData();
				}
				else
				{
					Snackbar.Add("Не вдалося видалити замовлення.", MudBlazor.Severity.Error);
				}
			}
			catch (Exception ex)
			{
				Snackbar.Add($"Помилка видалення замовлення", MudBlazor.Severity.Error);
			}
		}
	}

	public class SupplyOrderViewModel
	{
		[Required]
		public int SupplyOrderId { get; set; }
		[Required(ErrorMessage = "Номер замовлення є обов'язковим")]
		[StringLength(50, ErrorMessage = "Номер замовлення не може перевищувати 50 символів")]
		public string SupplyOrderNumber { get; set; } = string.Empty;
		[Required(ErrorMessage = "Дата замовлення є обов'язковою")]
		public DateTime OrderDate { get; set; }
		[Required(ErrorMessage = "Постачальник є обов'язковим")]
		public int SupplierId { get; set; }
		public string SupplierName { get; set; } = "";
		[Required(ErrorMessage = "Статус є обов'язковим")]
		public int StatusId { get; set; }
		public string StatusName { get; set; } = "";
		[Required(ErrorMessage = "Співробітник є обов'язковим")]
		public int EmployeeId { get; set; }
		public string EmployeeName { get; set; } = "";
		[Required]
		[Range(0, double.MaxValue, ErrorMessage = "Загальна сума має бути додатнім числом")]
		public decimal TotalAmount { get; set; }
		public List<SuppliedEquipmentViewModel> SuppliedEquipmentItems { get; set; } = new();
	}
	public class SuppliedEquipmentViewModel
	{
		public int SuppliedEquipmentId { get; set; }
		public int SupplyOrderId { get; set; }
		[Required(ErrorMessage = "Обладнання є обов'язковим")]
		public int EquipmentId { get; set; }
		public string EquipmentName { get; set; } = "";
		[Required(ErrorMessage = "Кількість є обов'язковою")]
		[Range(1, int.MaxValue, ErrorMessage = "Кількість має бути не менше 1")]
		public int Quantity { get; set; }
		[Required(ErrorMessage = "Ціна є обов'язковою")]
		[Range(0, double.MaxValue, ErrorMessage = "Ціна має бути додатнім числом")]
		public decimal Price { get; set; }
		public bool IsExisting { get; set; }
		public List<PlacementViewModel> Placements { get; set; } = new();
	}
	public class PlacementViewModel
	{
		public int PlacementId { get; set; }
		public DateTime PlacementDate { get; set; } = DateTime.Today;
		public int Quantity { get; set; }
		public int EmployeeId { get; set; }
		public int ClubId { get; set; }
		public string ClubName { get; set; } = "";
		public string EmployeeName { get; set; } = "";
		public int AvailableId { get; set; }
		public bool IsExisting { get; set; }
	}
}

<style>
	.table-container {
		max-height: 550px;
		overflow-y: auto;
		margin-bottom: 1rem;
	}

	.sticky-header {
		position: sticky;
		top: 0;
		z-index: 10;
		background-color: #f8f9fa;
	}

	.order-details-container {
		border-top: none !important;
	}
</style>
