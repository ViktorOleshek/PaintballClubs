@page "/supply-orders"
@using Domain.Constants
@using Domain.Entities
@using System.Collections.Generic
@using Services.ExternalApi.Facade
@using UI.Components.Pages.SupplyOrders.Component
@inject IApiFacade ApiFacade
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3 class="mb-4">Supply Orders Management</h3>

<div class="row mb-3">
	<div class="col-md-4">
		<input type="text" class="form-control" placeholder="Search orders..." @bind-value="searchQuery" @bind-value:event="oninput" />
	</div>
	<div class="col">
		<button class="btn btn-success" @onclick="CreateNewOrder">
			<i class="bi bi-plus-circle me-1"></i> New Order
		</button>
	</div>
</div>

<div class="table-container">
	<div class="table-responsive">
		<table class="table table-bordered table-hover">
			<thead class="table-light sticky-header">
				<tr>
					<th>Order Number</th>
					<th>Order Date</th>
					<th>Supplier</th>
					<th>Status</th>
					<th>Employee</th>
					<th>Equipment Items</th>
					<th>Total Amount</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var order in PaginatedOrders)
				{
					<tr class="@GetStatusRowClass(order.StatusName)" @onclick="() => ToggleOrderDetails(order)">
						<td class="text-end">@order.SupplyOrderNumber</td>
						<td>@order.OrderDate.ToShortDateString()</td>
						<td>@order.SupplierName</td>
						<td>
							<span class="@GetStatusBadgeClass(order.StatusName)">@order.StatusName</span>
						</td>
						<td>@order.EmployeeName</td>
						<td>@order.SuppliedEquipmentItems.Count items</td>
						<td class="text-end">@order.TotalAmount.ToString("C2")</td>
						<td>
							<div class="d-flex justify-content-around">
								<button class="btn btn-sm btn-danger" @onclick="(e) => DeleteOrder(order.SupplyOrderId, e)">
									<i class="bi bi-trash"></i>
								</button>
							</div>
						</td>
					</tr>
					@if (selectedOrder?.SupplyOrderId == order.SupplyOrderId)
					{
						<tr>
							<td colspan="8" class="p-0 order-details-container">
								<OrderDetailsPanel Order="selectedOrder"
												   Suppliers="suppliers"
												   Statuses="statuses"
												   Employees="employees"
												   EquipmentList="equipmentList"
												   Positions="positions"
												   Categories="categories"
												   ProductPlacements="productPlacements"
												   OnSave="SaveOrderDetails"
												   OnClose="CloseOrderDetails" />
							</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
</div>

<PaginationControl CurrentPage="currentPage"
				   PageSize="pageSize"
				   TotalItems="FilteredOrders.Count()"
				   TotalPages="TotalPages"
				   OnPageChanged="GoToPage"
				   OnPageSizeChanged="(size) => { pageSize = size; currentPage = 1; }" />

@code {
	private string searchQuery = "";
	private List<SupplyOrderViewModel> orders = new();
	private List<Supplier> suppliers = new();
	private List<SupplyOrderStatus> statuses = new();
	private List<Employee> employees = new();
	private List<Equipment> equipmentList = new();
	private List<SuppliedEquipment> suppliedEquipments = new();
	private List<Domain.Entities.Position> positions = new();
	private List<Category> categories = new();
	private List<ProductPlacement> productPlacements = new();

	private SupplyOrderViewModel? selectedOrder;

	// Pagination parameters
	private int currentPage = 1;
	private int pageSize = 10;

	private IEnumerable<SupplyOrderViewModel> FilteredOrders =>
		string.IsNullOrWhiteSpace(searchQuery)
			? orders
			: orders.Where(o => o.SupplyOrderId.ToString().Contains(searchQuery) ||
										o.SupplierName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
										o.StatusName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
										o.EmployeeName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));

	private IEnumerable<SupplyOrderViewModel> PaginatedOrders =>
		FilteredOrders.Skip((currentPage - 1) * pageSize).Take(pageSize);

	private int TotalPages => (int)Math.Ceiling(FilteredOrders.Count() / (double)pageSize);

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	private void GoToPage(int page)
	{
		if (page < 1 || page > TotalPages)
			return;

		currentPage = page;
	}

	private async Task LoadData()
	{
		var supplyOrdersResponse = await ApiFacade.SupplyOrdersApiService.Get();
		var suppliersResponse = await ApiFacade.SuppliersApiService.Get();
		var statusesResponse = await ApiFacade.SupplyOrderStatusApiService.Get();
		var employeesResponse = await ApiFacade.EmployeeApiService.Get();
		var equipmentResponse = await ApiFacade.EquipmentApiService.Get();
		var suppliedEquipmentsResponse = await ApiFacade.SuppliedEquipmentApiService.Get();
		var positionsResponse = await ApiFacade.PositionApiService.Get();
		var categoriesResponse = await ApiFacade.CategoryApiService.Get();
		var productPlacementsResponse = await ApiFacade.ProductPlacementApiService.Get();

		if (!supplyOrdersResponse.IsSuccessStatusCode ||
			!suppliersResponse.IsSuccessStatusCode ||
			!statusesResponse.IsSuccessStatusCode ||
			!employeesResponse.IsSuccessStatusCode ||
			!equipmentResponse.IsSuccessStatusCode ||
			!suppliedEquipmentsResponse.IsSuccessStatusCode ||
			!positionsResponse.IsSuccessStatusCode ||
			!categoriesResponse.IsSuccessStatusCode ||
			!productPlacementsResponse.IsSuccessStatusCode)
		{
			return;
		}

		var supplyOrders = supplyOrdersResponse.Content;
		suppliers = suppliersResponse.Content.ToList();
		statuses = statusesResponse.Content.ToList();
		employees = employeesResponse.Content.ToList();
		equipmentList = equipmentResponse.Content.ToList();
		suppliedEquipments = suppliedEquipmentsResponse.Content.ToList();
		positions = positionsResponse.Content.ToList();
		categories = categoriesResponse.Content.ToList();
		productPlacements = productPlacementsResponse.Content.ToList();

		orders = supplyOrders.Select(o => new SupplyOrderViewModel
			{
				SupplyOrderId = o.supply_order_id,
				SupplyOrderNumber = o.supply_order_number,
				OrderDate = o.order_date,
				SupplierId = o.supplier_id,
				SupplierName = suppliers.FirstOrDefault(s => s.supplier_id == o.supplier_id)?.name ?? "Unknown",
				StatusId = o.status_id,
				StatusName = statuses.FirstOrDefault(s => s.status_id == o.status_id)?.status_name ?? "Unknown",
				EmployeeId = o.employee_id,
				EmployeeName = GetEmployeeName(o.employee_id),
				TotalAmount = o.total_amount,
				SuppliedEquipmentItems = GetSuppliedEquipmentItems(o.supply_order_id)
			}).ToList();

		// Reset to first page when data is loaded or refreshed
		currentPage = 1;
	}

	private string GetEmployeeName(int employeeId)
	{
		var employee = employees.FirstOrDefault(e => e.employee_id == employeeId);
		return employee != null ? $"{employee.first_name} {employee.last_name}" : "Unknown";
	}

	private List<SuppliedEquipmentViewModel> GetSuppliedEquipmentItems(int supplyOrderId)
	{
		return suppliedEquipments
			.Where(se => se.supply_order_id == supplyOrderId)
			.Select(se => new SuppliedEquipmentViewModel
				{
					SuppliedEquipmentId = se.supplied_equipment_id,
					SupplyOrderId = se.supply_order_id,
					EquipmentId = se.equipment_id,
					EquipmentName = equipmentList.FirstOrDefault(e => e.equipment_id == se.equipment_id)?.name ?? "Unknown",
					Quantity = se.quantity,
					Price = se.price
				}).ToList();
	}

	private string GetStatusBadgeClass(string statusName)
	{
		return statusName switch
		{
			SupplyOrderStatuses.Pending => "badge bg-warning text-dark",
			SupplyOrderStatuses.Confirmed => "badge bg-info text-dark",
			SupplyOrderStatuses.Processing => "badge bg-primary",
			SupplyOrderStatuses.Completed => "badge bg-success",
			SupplyOrderStatuses.Cancelled => "badge bg-danger",
			_ => "badge bg-secondary"
		};
	}

	private string GetStatusRowClass(string statusName)
	{
		return statusName switch
		{
			SupplyOrderStatuses.Pending => "table-warning",   // жовтий фон
			SupplyOrderStatuses.Confirmed => "table-info",    // блакитний фон
			SupplyOrderStatuses.Processing => "table-primary", // синій фон
			SupplyOrderStatuses.Completed => "table-success", // зелений фон
			SupplyOrderStatuses.Cancelled => "table-danger",  // червоний фон
			_ => "table-secondary"
		};
	}

	private void ToggleOrderDetails(SupplyOrderViewModel order)
	{
		if (selectedOrder?.SupplyOrderId == order.SupplyOrderId)
		{
			selectedOrder = null;
		}
		else
		{
			selectedOrder = order;
		}
	}

	private void CloseOrderDetails()
	{
		selectedOrder = null;
	}

	private async Task SaveOrderDetails()
	{
		if (selectedOrder != null)
		{
			// Save base order information
			var supplyOrder = new SupplyOrder
				{
					supply_order_id = selectedOrder.SupplyOrderId,
					order_date = selectedOrder.OrderDate,
					supplier_id = selectedOrder.SupplierId,
					status_id = selectedOrder.StatusId,
					employee_id = selectedOrder.EmployeeId,
					total_amount = selectedOrder.TotalAmount,
					UpdateDatetime = DateTime.Now
				};

			await ApiFacade.SupplyOrdersApiService.Update(supplyOrder.supply_order_id, supplyOrder);

			// Save supplied equipment items
			foreach (var item in selectedOrder.SuppliedEquipmentItems)
			{
				var suppliedEquipment = new SuppliedEquipment
					{
						supplied_equipment_id = item.SuppliedEquipmentId,
						supply_order_id = item.SupplyOrderId,
						equipment_id = item.EquipmentId,
						quantity = item.Quantity,
						price = item.Price,
						UpdateDatetime = DateTime.Now
					};

				if (item.SuppliedEquipmentId > 0)
				{
					await ApiFacade.SuppliedEquipmentApiService.Update(suppliedEquipment.supplied_equipment_id, suppliedEquipment);
				}
				else
				{
					// For new items
					suppliedEquipment.CreateDatetime = DateTime.Now;
					await ApiFacade.SuppliedEquipmentApiService.Create(suppliedEquipment);
				}
			}

			await LoadData();
		}
	}

	private void CreateNewOrder()
	{
		NavigationManager.NavigateTo("/supply-orders/create");
	}

	private async Task DeleteOrder(int orderId, MouseEventArgs e)
	{
		// e.StopPropagation(); // Prevent row click event

		bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this order?");
		if (confirmed)
		{
			// First delete all supplied equipment items
			var itemsToDelete = suppliedEquipments.Where(se => se.supply_order_id == orderId);
			foreach (var item in itemsToDelete)
			{
				await ApiFacade.SuppliedEquipmentApiService.Delete(item.supplied_equipment_id);
			}

			// Then delete the order
			await ApiFacade.SupplyOrdersApiService.Delete(orderId);
			await LoadData();
		}
	}

	public class SupplyOrderViewModel
	{
		public int SupplyOrderId { get; set; }
		public string SupplyOrderNumber { get; set; } = string.Empty;
		public DateTime OrderDate { get; set; }
		public int SupplierId { get; set; }
		public string SupplierName { get; set; } = "";
		public int StatusId { get; set; }
		public string StatusName { get; set; } = "";
		public int EmployeeId { get; set; }
		public string EmployeeName { get; set; } = "";
		public decimal TotalAmount { get; set; }
		public List<SuppliedEquipmentViewModel> SuppliedEquipmentItems { get; set; } = new();
	}

	public class SuppliedEquipmentViewModel
	{
		public int SuppliedEquipmentId { get; set; }
		public int SupplyOrderId { get; set; }
		public int EquipmentId { get; set; }
		public string EquipmentName { get; set; } = "";
		public int Quantity { get; set; }
		public decimal Price { get; set; }
	}
}

<style>
	.table-container {
		max-height: 700px;
		overflow-y: auto;
		margin-bottom: 1rem;
	}

	.sticky-header {
		position: sticky;
		top: 0;
		z-index: 10;
		background-color: #f8f9fa;
	}

	/* Order details panel */
	.order-details-container {
		border-top: none !important;
	}
</style>