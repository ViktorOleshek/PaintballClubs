@using Domain.Entities
@using Microsoft.AspNetCore.Components.Authorization
@using Services.ExternalApi.Facade
@using UI.Extensions
@inherits LayoutComponentBase

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="page">
	<div class="sidebar">
		<NavMenu />
	</div>

	<main>
		<div class="top-row px-4">
			@if (!isAuthenticated)
			{
				<MudButton Href="/login"
						   Color=@Color.Primary
						   Variant=@Variant.Filled
						   Class="ml-2">
					Увійти
				</MudButton>
			}
			else
			{
				<MudMenu Icon=@Icons.Material.Filled.AccountCircle
						 Color=@Color.Primary
						 AriaLabel="Open user menu">
					<ActivatorContent>
						<div class="d-flex align-center">
							<MudAvatar Color="Color.Secondary" Class="mr-2">
								@(employee.first_name) @(employee.last_name)
							</MudAvatar>
							<div>
								<MudText Typo="Typo.body1" Color="Color.Tertiary">
									@(employee.last_name) @(employee.first_name)
								</MudText>
								<MudText Typo="Typo.caption" Style="font-style: italic;" Color="Color.Tertiary">
									@posititonName
								</MudText>
							</div>
						</div>
					</ActivatorContent>
					<ChildContent>
						<MudMenuItem Label="Вийти"
									 Href="/logout" />
					</ChildContent>
				</MudMenu>
			}
		</div>

		<article class="content px-4">
			@Body
		</article>
	</main>
</div>

<div id="blazor-error-ui" data-nosnippet>
	Сталася необроблена помилка.
	<a href="." class="reload">Перезавантажити</a>
	<span class="dismiss">🗙</span>
</div>

<style>
	.top-row {
		background-color: #d1e6e7;
		padding: 0.5rem;
	}

		.top-row .mud-menu {
			display: flex;
			align-items: center;
		}
</style>

@code {
	private bool isAuthenticated;
	private Employee employee = new();
	private string? posititonName;

	[Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
	[Inject] private IApiFacade ApiFacade { get; set; } = default!;
	[Inject] private ISnackbar Snackbar { get; set; } = default!;
	[Inject] private NavigationManager NavigationManager { get; set; } = default!;
	[Inject] private IDialogService DialogService { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		isAuthenticated = authState.User.Identity?.IsAuthenticated == true;

		if (!isAuthenticated) return;

		if (AuthenticationStateProvider is not CustomAuthStateProvider customProvider)
		{
			Snackbar.Add("Authentication provider is not valid.", Severity.Error);
			return;
		}

		var employee_id = await customProvider.LoadUserIdFromToken();
		if (employee_id is null)
		{
			Snackbar.Add("User ID not found in token.", Severity.Error);
			return;
		}

		var employeeResponse = await ApiFacade.EmployeeApiService.Get((int)employee_id);
		if (!employeeResponse.IsSuccessStatusCode)
		{
			Snackbar.Add("Failed to load employee.", Severity.Error);
			return;
		}
		employee = employeeResponse.Content;
		posititonName = await customProvider.LoadUserRoleFromToken();
	}
}